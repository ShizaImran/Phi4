[
  {
    "chapter": "Chapter 1 Binary systems and hexadecimal",
    "text": "1.1 \nIntroduction \n1.2 \n111c binary system \n1.3 \nMeasurement of the size of computer memories \n1.4 \nExample use ofbinary \n1.5 \nThe hexadecimal system \n1.6 \nUse of the hexadecimal system"
  },
  {
    "chapter": "Chapter 3",
    "text": "Logic gates and logic circuits \n3.1 \nIntroduction \n3.2 \nLogic gates \n3.3 \nTruth tables \n3.4 \nThe fimction ofthe six logic gates \n3.5 \nLogic circuits \n3.6 \nLogic circuits in the real world"
  },
  {
    "chapter": "Chapter 4",
    "text": "Operating systems and computer architecture \n4.1 \nIntroduction \n4.2 \nOperating systems \n4.3 \nInterrupts \n4.4 \nComputer architecture \n4 .5 \nThe fetch-execute cycle"
  },
  {
    "chapter": "Chapter 6 Memory and data storage",
    "text": "6.1 \nIntroduction \n6.2 \nFile formats \n6.3 \nLossless and lossy file compression \n6.4 \nMemory and storage \n6.5 \nHow to estimate the size ofa file \nviii \n14 \n14 \n14 \n17 \n22 \n26 \n26 \n26 \n26 \n27 \n29 \n38 \n42 \n42 \n42 \n43 \n45 \n49 \n51 \n51 \n51 \n67 \n76 \n76 \n76 \n80 \n81 \n88"
  },
  {
    "chapter": "Chapter 7 High- and low-level languages",
    "text": "90 \n7.1 \nProgramming languages \n90 \n7.2 \nTranslators \n92 \n7.3 \nWhat happens when things go wrong? \n94"
  },
  {
    "chapter": "Chapter 8 Security and ethics",
    "text": "97 \n8.1 \nIntroduction \n97 \n8.2 \nSecurity and data integrity \n97 \n8.3 \nCookies \n100 \n8.4 \nLoss of data and data corruption \n101 \n8.5 \nFirewallsandproxyservers \n102 \n8.6 \nSecurity protocols \n103 \n8.7 \nEncryption \n104 \n8.8 \nApplications \n109 \n8.9 \nComputer ethics \n110 \n8.10 Freesoftware,freewareandshareware \n111 \nSection 2 Practical problem-solving and programming \n114"
  },
  {
    "chapter": "Chapter 9 Problem-solving and design",
    "text": "115 \n9.1 \nIntroduction \n115 \n9.2 \nAlgorithms \n118 \n9.3 \nTest data \n119 \n9.4 \nValidation and \\·erification \n120 \n9.5 \nUsing trace tables \n125 \n9.6 \nIdentifying and correcting errors \n127 \n9.7 \nProducing algorithms \n129"
  },
  {
    "chapter": "Chapter 10",
    "text": "Pseudocode and flowcharts \n134 \n10. l Introduction \n134 \n10.2 Assignment \n134 \n10.3 Conditional statements \n135 \n10.4 Loop structures \n137 \n10.5 Input andoutputstatements \n139 \nl 0.6 Standard actions \n139 \n10.7 Exan1ples of algorithms in pseudocode \n139 \n10.8 Standard flowchart symbols \n142"
  },
  {
    "chapter": "Chapter 11",
    "text": "Programming concepts \n11. l Introduction \n11.2 Programming \n11.3 Declaration and use of variables and constants \n11.4 Basic data types \n11.5 How to make your program work \n146 \n146 \n146 \n149 \n150 \n151"
  },
  {
    "chapter": "Chapter 12",
    "text": "Data structures: arrays and using pre-release material \n12.1 Introduction \n12.2 Arrays \n12.3 Using pre-release material"
  },
  {
    "chapter": "Chapter 13",
    "text": "Databases \n13.1 Introduction \n13.2 What are databases used for? \n13.3 TI1e strucrnre ofa database \n13.4 Practical use of a database \nIndex \n163 \n163 \n163 \n168 \n169 \n169 \n169 \n169 \n171 \n178 \nI ntrod ucti on \nA ims \nl11is textbook has been written to provide the knowledge, understanding and \npractical skills that a student would need for the Cambridge Internntional \nF.xaminations Computer Science I GCSE and GCE O Level courses. \nThe textbook is part of a package which includes a student CD-ROM. A \nteacher's CD-ROM is also available separately which includes additional guidance \nand other useful information ( see later in this introduction ). \nThis OC>Ok and accompanying student CD-ROM provide: \n• practice end-of-chapter questions which include questions from past Cambridge \nInternational Examinations papers \n• activities which gi\\·e students additional guidance and practice \n• sample program solutions for programming activities \n• hints and tips where these provide additional help and knowledge. \nAlthough this book has been written with the Cambridge lnter11atio11al \nF.xaminatiom syllabus in mind, it can still be used as a useful reference textbook \nfor other GCSE computing courses. It is also a useful source of information for \nthose srudcnts starting an A le\\·el computer science course ~ especially at AS level. \nUsing the book \n111c textbook contains 13 chapters. Although it is possible for some elements \nof the practical problem-solving chapters to be examined in Paper I (Theory \nof Computer Science ), and vice versa, the sections for the theory work are \nin Chapters 1 to 8 and the practical work in Chapters 9 to 13. The book has \nbeen split into Section 1 (TI1eory of computer science ) and Section 2 ( Practical \nproblem-solving and programming) to follow the Cambridge International \nF.xaminatiom syllabus as closely as possible. \nActivities are shown throughout the books as follows: \n( Activity 1.1 \n) \nStudent CD-ROM \nTI1e accompanying student CD-ROM contains additional guidance to enhance \nthe learning process in a number ofkeyareas in the textbook. The CD-ROM uses \nanimation and verbal commentary wherever this is found helpful in the learning \nprocess. The CD-ROM includes sample program solutions for the programming \nactivities. \nWhere book topics are included in the CD-ROM the following symbol is used: 0 \nTeacher's CD-ROM \nAn additional teacher's CD-ROM is available to accompany this textbook. TI1is \nCD-ROM includes the following material: \n• possible responses to sample examination and other guestions \n• each guesrion part suggests a level of difficulty \n• expected responses to the guesrions at that level are included \n• additional notes on why the responses meet the required level only \n• answers to the end-of-chapter 'luestions in this textbook and to some of the \nactivities where relevant \n• program files in Python and Java for activities and end-of-chapter questions. \n• a scheme of work to help teacher's plan their r.110-year computer science course; \nthis scheme includes: \n• chapter numbers from the book \n• topic to be covered from the chapter \n• approximate time alkx:ation adllised to cover the topic \n• Cambridge lnten1ational F.xaminationssyllabus reference \n• relevant page numbers from the textbook \n• activities found in the textbook to help in the teaching process \n• any additional notes to help plan the lessons. \nThe teacher's CD-ROM has not been through the Cambridge endorsement \nprocess. \nDavid W<Jtson and Helen Williams \nSeptember 2014 \nThis page intentionally left blank \nG) Binary systems and hexadecimal \nlnthischapteryouwilllearnabout: \ne thebinarysystem \n• measurement of computer memories \ne thehexadecimal1ystem \ne howtoconvertnumbersbetweendifferentnumberbasesystems \n1.1 Introduction \nAs you progress through this book you will begin to realise how complex \ncomputer systems really are. By the time you reach"
  },
  {
    "chapter": "Chapter 12 you should ha\\·e a",
    "text": "better understanding of the fundamentals behind computers themselves and the \nsoftware that controls them. \nHowe\\'er, no matter how complex the system, the basic building block in all \ncomputers is the binary number system. This system is chosen since it consists of \nls and Os only. Since computers contain millions and millions of tiny 'switches', \nwhich must be in the ON or OFF position, this lends itsclflogically to the binary \nsystem. A s,.vitch in the ON position can be represented by l; a switch in the OFF \nposition can be represented by 0. \n1.2 The binary system \nWe arc all familiar with the dcnary (base 10) number system which counts in \nmultiples of 10. This gives us the well-known headings of units, 10s, 100s, 1000s \nand soon: \n10 OOO \n1000 \n100 \n10 \n(104) \n( 101) \n( 102) \n( 101) \n( 100) \n111c BINARY SYSI\"EM is based on the number 2. Thus, only the two 'values' 0 and \nI can be used in this system to represent each digit. Using the same method as \ndcnary, thisgi\\·cs the headings of 20, 21, 22, 23 and so on. The typical headings \nfor a bi.nary number with eight digits would be: \n128 \n64 \n32 \n16 \nA typical binary number would be: \n111011 I 0 \n1.2.1 Converting from binary to denary @ \nIt is fairly straightfonvard to change a binary number into a dcnary number. \nEach time a 1 appears in a column, the column value is added to the total. For \nexample, the binary number above is: \n128 + 64 + 32 + 8 + 4 + 2 - 238 (dcnary) \nThe O values arc simply ignored. \n0 \n1.2 \nActivity 1.1 \nConvertthelollowingb.narynumber,; \nintodeoary: \na 00110011 \nb 01111111 \nc 10011001 \nd 01110100 \ne 11111111 \nf 00001111 \ng 10001111 \nh 11110000 \ni 01110000 \nj 11101110 \n1.2.2 Converting from denary to binary ® \nThe reverse operation, converting from denary to binary, is slightly more \ncomplex. There are two basic ways of doing this. The first method is 'trial and \nerror' and the second method is more methodical and involves repetitive division. \nMethod l \nConsider the conversion of the dcnary number, 107, into binary. This method \ninvolves placing l s in the appropriate position so that the total equates to 107: \n128 \n64 \n32 \n16 \nMethod 2 \nThis method involves successive division by 2. The remainders arc then read from \nBOTTOM to TOP to give the binary value. Again using 107, we get: \nFigure 1.1 \nActivity 1.2 \nreadlhe,emainde,lrombottomto \ntoptogetlhebiM,ynumbef \n0 \n1 \n1 \n0 \n1 0 \n1 \n1 \nConvertthelollowingdenarynumbersinto \nbiMry{usingbothmethods) \n• 41 \nb 67 \n' 86 \nd 100 \ne 111 \nf 127 \ng 144 \nh 189 \ni 200 \nj 255 \nThe binary system \n• \n1 \nBINARY SYSTEMS AND HEXADECIMAL \n1.3 Measurement of the size of computer memories \nA binary digit is commonly referred to as a BIT; 8 bits are usually referred to as a \nThe byte is the smallest unit of memory in a computer. Some computers \nuse larger bytes but they are always multiples of8 (e.g. 16-bit systems and \n32-bit systems). One byte of memory wouldn't allow you to store very much \ninformation; therefore memory size is measured in the following multiples: \n1kiim,te(1KB) \n(1MB) \ne(1GB) \n1terabvte(1Tl!) \n1nPtabvte(1P!!) \n(Note: 1024 x 1024 - I 048576 and so on.) \nTo give some idea of the scale of these numbers, a typical data transfer rate \nusing the internet is 32 megabits (i.e. 4 MB ) per second (so a 40 i\\1.B file would \ntake 10 seconds to transfer). Most hard disk systems in computers are 1 or \n2 TB in size (so a 2 TB memory could store over half a million 4 MB photos, for \nexample). \nIt should be pointed out here that there is some confusion in the naming \nof memory sizes. The IEC convention is now adopted by some organisations. \nManufacturers of storage devices often use the de nary system to measure storage \nsize. For example, \nl kilobyte - 1000 byte \nl megabyte - 1000000 bytes \nI gigabyte - l 000000000 bytes \nI terabyte - 1 OOO 000000 OOO bytes and so on. \n111c ! EC convention for computer internal memories (including RAJ\\1) becomes: \n1 kibibytc ( l KiB ) - I 024 bytes \nl mebibyte ( 1 MiB ) - I 048576 bytes \nI gibibyte ( 1 GiB ) - l 073 741824 bytes \n1 tebibyte ( 1 TiB ) - 1099511627776 bytes and so on. \nH owe\\·er, the IEC terms are not universally used and this textbook will use \nthe more conventional terms shown in Table 1. 1. This also ties up with the \nCambridge International E'l:aminations computer science syllabus which uses the \nsame terminology as in Table 1. 1. \n1.4 Example use of binary \nThis section gives an example of a use of the binary system. \\Ve will introduce the \nidea of computer REGISTERS; this subject is covered in more depth in"
  },
  {
    "chapter": "Chapter 4.",
    "text": "A register is a group ofbits; it is often depicted as follows: \n0 \n1.5 \nFigur• 1.2 \n\\\\'hen computers (or microprocessors) are used to control devices (such as \nrobots), registers arc used as part of the control system. The following example \ndescribes how registers can be used in controlling a simple device. \nA robot vacuum cleaner has three wheels, A, Band C. A rotates on a spindle \nto allow for direction changes (as well as forward and bachvard movement); \nB and C are fixed to revolve around their ules to provide only forward and \nbackward mo\\·ement, and have an electric motor attached: \nFigur• 1.3 \nAn 8-bit register is used to control the movement ofthe robot vacuum cleaner: \nBdirPCtion \nC directioo \nfllfWards \nfrnwards \nFigur•1.4 \nIf the register contains I O 1 0 1 0 l O this means 'motor Bis ON and motorCis \nON t111d both motors are tuniing to produce FORiVARDS motion'. Effecti\\·ely, the \nvacuum cleaner is moving forwards. \nActivity 1.3 \na What would be the effect jf the register contained the follov,iing ~alues7 \n1 10011000 \nb What would the register contain if only motor C was ON and the motors were turning in a \nBACKWARDS direction? \nc What would the register contain if motor Band motor C were both ON but B was turning in a \nbackwarddirectionandCwa1turninginalorwarddirection? \nd What would be the effect jf the register contained the follov,iing? \n11111111 \n1.5 The hexadecimal system \nThe HEXADECIMAL SYSI\"EM is very closely related to the binary system. \nH exadecimal (sometimes referred to as simply 'hex') is a base 16 system and \ntherefore needs to use 16 different 'values' to represent each digit. \nThe hexadecimal system \n• \n1 \nBINARY SYSTEMS AND HEXADECIMAL \nBecause it is a system based on 16 different digits, the numbers Oto 9 and \nthe letters A to F arc used to represent each hexadecimal (hex) digit. (A - 10, \nB - 11 ,C - 12,D - 13, E - 14 and F - 15. ) Using the same method asdcnary \nand binary, this gi\\·cs the headings of 160, 161, 162, 163 and so on. The typical \nheadings for a hexadecimal number with five digits would be: \n65 536 \n4 096 \n256 \n16 \nl \n(lfrl) \n(163) \n(162) \n(161) \n(160) \nSince 16 - 24 this means that FOUR binary digits arc cciuivalcnt to each hexadecimal \ndigit. Table 1.2 summarises the link between binary, hexadecimal and dcnary. \nBinaryvalu• \nDenaryvalu• \n1.5.1 Converting from binary to hexadecimal \nand from hexadecimal to binary (v \nCo1wcrting from binary to hexadecimal is a fairly easy process. Starting from \nthe right and moving left, split the binary number into groups of 4 bits. If the \nlast group has less than 4 bits, then simply fill in with Os from the left. Take each \ngroup of4 bits and convert it into the cciuivalcnt hexadecimal digit using Table 1.2. \nLook at the following two examples to sec how this works. \nExample 1 \nI O 1I111000 0 1 \nFirst split this up into groups of 4 bits: \n101 1 111 0 0 0 0 I \nTI1cn, using Table 1.2, find the CCJliivalcnt hexadecimal digits: \nExample 2 \n100 0 0 I 111 111 0 l \n0 \n1.5 \nFirst split this up into groups of4 bits: \nI O OOO I 1111 1101 \nThe left group only contains 2 bits, so add in two Os: \n0 0 I O OOO I \n1111 1101 \nNow use Table 1.2 to find the equivalent hexadecimal digits: \nActivity 1.4 \nConvertthelollowingb4narynumbers \ninto hexadecimal· \na 11000011 \nb 11110111 \nc 1001111111 \nd 10011101110 \ne 000111100001 \nf 100010011110 \ng 0010011111110 \nh 0111010011100 \ni 1111111101111101 \nj 00110011110101110 \nD \nCon\\'erting from hexadecimal to binary is also very straightforward. Using the \ndata in Table 1.2, simply take each hexadecimal digit and write down the 4-bit \ncode which corresponds to the digit. \nExample 3 \nA \nUsing Table 1.2, find the 4-bit code for each digit: \n0 100 0 1 0 I \n101 0 \nPut the groups together to form the binary number: \n0 100 0 101 l O 1 0 \nExample 4 \nAgain just use Table 1.2: \n1011 l 111 \n0 00 0 100 0 \nThen put all the digits together: \n10111111 0000 1000 \nActivity 1.5 \nConvertthelollowinghexadedmalnumbersintobinary· \na 6C \nf BA6 \nb 59 \ng 9(( \nc AA \nh 40AA \nd AOO \ni DA47 \nJ 1AB0 \nThe hexadecimal system \n0 \n1 \nBINARY SYSTEMS AND HEXADECIMAL \n1.5.2 Converting from hexadecimal to denary \nand from denary to hexadecimal ® \nTo con\\'ert a hexadecimal number to denary is fairly straightforward. Take each \nhexadecimal digit and multiply it by its value. Add the totals together to obtain \nthe dcnary\\'aluc. \nExample 1 \nA \nFirst multiply each digit by its value: \n256 \n16 \n(4 x 256 - 1024) \n(5 x 16 - 80) \n(10 x 1 - 10) \n(Note: A - 10) \nAdd the totals together: \ndenary number - 1 l 1 4 \nExample 2 \nFirst multiply each digit by its value: \n256 \n16 \n(12 x 256 - 3072) (8 x 16 - 128) (15 x 1 - 15) (Note: C - 12 and F - 15) \nAdd the totals together: \ndcnary number - 3 2 1 5 \nActivity 1.6 \nCoovert the following heXildedmal number,; \nintodenary: \na 6B \nb9 C \n< 4A \nd FF \ne 1FF \nf AOl \ng BB4 \nh CAB \ni 12AE \nj A089 \nTo con\\'ert from denary to hexadecimal is a little more difficult. As with the \ncotwersion from binary to dcnary, there arc two very similar methods that can be \nused. Again, the first method is 'trial and error' and the second method is more \nmethodical and im·olvcs repetitive division. \n0 \n1.6 \nUse of the hexadecimal system \nMethod l \nConsider the conversion of the dcnary number, 2004, into hexadecimal. This \nmethod involves placing hexadecimal digits in the appropriate position so that the \ntotal eguatesto2004: \n256 \n16 \nD \n(Note: D - 13) \nA quick check shows that: (7 x 256) + ( 13 x 16) + (4 x 1) gives 2004. \nMethod 2 \nThis method involves successive division by 16. The remainders are then read \nfrom BOTTOM to TOP to gi\\·e the hexadecimal value. Again using 2004, we get: \n\" ~\"\"' \n16 \n125 ,em.;nder: 4 \n16 \n7 ,emaamier: 13 \n0 ,em.;nder: 7 \nFigur•1.5 \nActivity 1. 7 \n1 \nrei>dtherem.;nderfmmbottomtotop \ntogetthehexadecimalnOO'lber: \n'0' \nConvertthelollowingdenarynumbers \nintoheXddecimal{uloingbothmethods): \na 98 \nb 227 \nc 490 \nd 511 \ne 826 \nf 1000 \ng 2634 \nh 3743 \ni 4007 \nj SOOO \n1.6 Use of t he hexadecimal system \nThis section reviews five uses of the hexadecimal system. 111c information in this \nchapter gives the reader sufficient grounding in each topic at this le\\'el. Further \nmaterial can be found by searching the internet, but be careful that you don't go \noff at a tangent. \n1.6.1 Memory dumps \nSince it is much easier to work with: B 5 A 4 I A F C \nrather than: l O 1111001110 1 olo 10010001110101111111100 \nhexadecimal is often used when developing new software or when trying to \ntrace errors in programs. The contents of part of the computer memory can \nhold the key to help solve many problems. When the memory contents are \noutput to a printer or monitor, this is known as a MEMORY DUMP: \n0 \n1 \nBINARY SYSTEMS AND HEXADECIMAL \n1-·· ....... ··················1 \n009901'77 \nn \n20 6D 65 6D 6F 12 79 20 64 75 6D 70 20 66 72 6F 6D 20 20 61 \n00990E9 E \n74 797069636l6C2020636F6D707574657220206D85 \n00990EA5 \n6D 6F 72 H \n20 73 69 6F 77 69 611 67 20 74 68 65 20 20 63 6 F 61! \n00990EBC \n746561?74 73206F66206l206ll756D62657220206F66 \n00990ED3 \n6C6F63 6l 74696F61173 2020696E2020696578202020 \n00990BIIA \n6116F74 6l 74696F61120200000000000000000000000 \nFigure 1.6 \nA program developer can look at each of the hexadecimal codes ( as shown in \nFigure 1.6) and determine where the error lies. The value on the far left shows \nthe memory location so that it is possible to find out exactly where in memory tl1e \nfault occurs. This is clearly much more manageable using hexadecimal rather than \nusing binary. It's a very powerfid fault-tracing tool, but requires c.onsiderable \nknowledge of computer architecture in order to interpret tl1e results. \n1.6.2 HyperText Mark-up Language (HTML) \nHYPERTEXT MARK·UP LANGUAGE (HTML) is used when writing and \nde\\·eloping web pages. HTML isn't a progranuning language but is simply a \nmark-up language. A mark-up language is used in the processing, definition and \npresentation of text ( for example, specifying the colour of tl1e text). \nHTML uses <tags> which are used to bracket a piece of code; for exan1ple, \n<td> starts a standard cell in an HTML table, and </td> ends it. Whatever is \nberween tl1e two tags has been defined. H ere is a short section of HTML code: \n<hJ :,Used car sales</hJ > \n<h2>Cars f rom $500</h2> \n<br><h2:>Cash sales only</h2></td></br> \nHTML code is often used to represent colours of text on the computer screen. \n1l1e values change to represent different colours. The different intensity of the \nthree primary colours (red, green and blue) is determined by its hexadecimal \nvalue. For example: \n• # FF 00 00 represents primary colour red \n• # 00 FF 00 represents primary colour green \n• # 00 00 FF represents primary colour blue \n• # FF 00 FF represents fuchsia \n• # FF 80 00 represents orange \n• # B 1 89 04 represents tan \n1.6 \nUse of the hexadecimal system \nand so on producing almost any colour the user wants. There are many websites \navailable that allow a user to find the HTML code for the colour needed. \nActivity 1.8 \nUsingtheinternet,findtheHTMLtodesforanumberofcolours \nTry entering HTML code into the computer and see how the colours and font types can be \nchanged to good effect \nMake use of websites, ,;uch as www.html .arrl toproduce your own web pages \nWith a little practice, you can import/embed images into your own design of web page using \nfreely available software. \nRemember this is not a programming language. It is s.imply a mark-up language, so vecy little \nprogrammingskillisrequilrotouseHTML \n1.6.3 Media Access Control (MAC) \nA MEDIA ACCESS CoNTROL (MAC) ADDRFSS refers to a number which uniguely \nidentifies a device on the internet. The MAC address refers to the network \ninterface card (NIC) which is part of the device. The ,\\1AC address is rarely \nchanged so that a particular device can always be identified no matter where it is. \nA MAC address is usually made up of 48 bits which are shown as six groups of \nhexadecimal digits (although 64-bit addresses are also known): \nNN - NN - NN - DD - DD - DD \nNN:NN:NN:DD:DD:DD \nwhere the first half (NN - NN - NN) is the identity number of the manufacturer \nof the device and the second half (DD- DO - DO) is the serial number of the \ndevice. For example: 00 - l C - B3 - 4F - 25 - FE is the MAC address of a device \nproduced by the Apple Corporation (code: 001 CB3 ) with a serial number of \n4F25FE. Sometimes lower case hexadecimal letters are used in the MAC address: \nOO-lc-b3-4f-25 -fe. Other manufacturer identity numbers include: \n• 00 - 14 - 22 which identifies devices made by Dell \n• 00 - 40 - 96 which identifies devices made by Cisco \n• 00 - AO - C9 which identifies devices made by Intel, and so on. \nTypes of MAC address \nIt should be pointed out that there are mu types of MAC address: the \nUNIVERSALLY ADMINISTERED MAC ADDRESS (UAA) and the LocALLY \nADMINISTERED MAC ADDRESS (LAA). \nThe UAA is by far the most common type of MAC address and this is the one \nset by the manufacturer at the factory. It is rare for a user to want to change this \nMAC address. \nH owever, there are some occasions when a user or an organisation wishes to \nchange their MAC address. This is a relati\\·ely easy task to carry out but it will \ncause big problems if the changed address isn't unique. \nThere are a fei.11 reasons why the MAC address needs to be changed using LAA: \n• Certain software used on mainframe systems needs all the MAC addresses of \ndevices to fall into a strict format; because of this, it may be necessary to change \nthe MAC address of some devices to ensure they follow the correct format. \n• \n1 \nBINARY SYSTEMS AND HEXADECIMAL \n• It may be necessary to bypass a MAC address filter on a router or a firewall; \no nly ,\\1AC addresses with a certain format are allowed through, otherwise the \ndevices will be blocked. \n• To get past certain types ofnen11ork restrictions it may be necessary to emulate \nunrestricted MAC addresses; hence it may require the MAC address to be \nchanged on certain devices connected to the nen11ork. \n1.6.4 Web addresses @ \nEach character used on a keyboard has what is known as an ASCII CODE \n(AMERICAN STANDARD CODE FOR INFORMATION INTERCHANGE). These codes can \nbe represented using hexadecimal values or decimal values. Figure 1.7 shows part \nof an ASCII table. \n,. \n.... \nChar \nO« \n, .. \nChu \n,. , .. \n\"'\" \n\" \n\" \n<:SPACh \" \n., . \" \n\"' \n\" \n\" \n' \n\" \n\" \nA \n\" \n\" \n\" \n\" \n\" \n\" . '\" \n\" . \nSS \n,, . \" \n\" \n' \n\" \n\" \n;e \n\" \ns \n\" \n.. \n0 \n\"'' \n\" \n' \n\" \n;s . \" \n\" \n' \n'\" \n\" \n'\" \n\" \n' \n\" \n.. \n' \n'\" \n\" \n' \n\" \n\" \n\" \n\" \nG \n'\" \n\" \n'\" \n'\" \nn \n.. \n\" \n'\" .. . \n\" \n\" \nn \n\" \n' \n'\"' \n\" \n\" \n>A \n\" \n<A \n' \n'\"' \nSA \n\" \n'\" \n,s \n.. \n' \n'\" .. . \n.. \nK \n\" \n\" \n' \n\"\" \n\"' \n' \n\" \n\" \nn \n., \nM \n'\"' \n\" \nm \n\" \n\" \n'\" \n\" \n\" \n'\" \n\" \n\" \n\" \n' \n\" \n\" \n0 \n\"' \n\" \n.. \n\"' \n0 \n\"\" \nS> . \"' \n\" . \n\" \n\" \n' \n., \nS> \nQ \nm \n\" \nS> \n,, \n' \n\"' \ns, \n' \n'\" \nn \nS> \na; \n' \n., \n\" \n' \nm \nn \ns, \n\" \n' \n.. \n\" \n' \n,,. \n\" \n' \n\" \nSS \n' \n\" \nSS \n\" \n\"' \n,s \n\" \n\" . \" \n\" \n' \n\"\" \n\" \nSS \n\" \n' \n\" \n\" \nw \n'\" \nn \nw \n'\" \n'\" . '\" \n\" \n' \n'\" ,. \n\" \n\" \n' \n\"' \n\" \n' \n\"' \n\" \n'\" \naA \n\"' \nSA \n' \nm \n>A \n\" \n'\" \n\" \n'\" \nI \nm \n'\" \nI \n\"' \n\" \n\" \nSC \n' \n\"' \nK \n\" \n\" \n\" \nso \nm \n\" \nI \n., \n\" \n\" \n\" \n\"\" \n\" \n\" \n\" \n' \n\" \n\" \nm \n\" \n<:OHETb \nFigure 1.7 \nA good example of the use of ASCII codes is the representation ofa web address \n(or URL, which stands for uniform resource locator) such as www.hoddcr.co.uk \nwhich becomes (using hexadecimal 11alues): \n%77 %77 %77 %2£ %68 %6F %64 %64 %65 %72 %2E %63 %6F %2E %75 %6B \nh \nd \nd \nk \n(Note: the% sign is used to denote that hexadecin1al is being used.) \n• \n1.6 \nActivity 1.9 \nUsing the ASCII rnde table (Figure 1.7) convert the following URL~ into the equivalent \nhexadecimal: \na www.de.org.uk \nb www.de.org.uk/computer_sdence \nc httpsJ/INvwi.hodder.co.uk \nd www.HodderEducation.co.uk \ne http://www.ucles.ac.uk/computing.htm \nUse of the hexadecimal system \nSometimes the hexadecimal addresses arc used in the address of files or web pages \nas a security feature. It takes longer to type in the URL using the hexadecimal \ncodes, but it has the advantage that you are unlikely to fall into the trap of \ncopying and pasting a 'fake' website address. \n1.6.5 Assembly code and machine code \nComputer memory can be referred to directly using machine code or assembly \ncode. This can have many advantages to program developers or when carrying \nout troubleshooting. \nMachine code and assembly code are co\\·ered in much more derail in"
  },
  {
    "chapter": "Chapter 7;",
    "text": "here we are simply interested in how hexadecimal fits into the picrnre. \nUsing hexadecimal makes it much easier, faster and less error prone to write \ncode compared to binary. Using true machine code (which uses binary) is \\·ery \ncumbersome and it takes a long time to kL-y in the values. It is also very easy to \nmistype the digits in a 'sea of ls and Os'. Here is a simple example: \nSTO \nFFA4 \n(assembly code ) \nA5E4 \nFFA4 \n(machine code using hexadecimal \\lalucs) \n1010 01011110 0100 1111 1111 1010 0100 \n(machine code using binary) \n,\\lachine code and assembly code are examples of low-level languages and are \nused by software dL·velopers when producing, for example, computer games. As \nyou will find in"
  },
  {
    "chapter": "Chapter 7, although they look cumbersome, thL-y ha\\·e many",
    "text": "advantages at the development stage of software writing ( especially when trying \nto locate errors in the code). \nCommunication and internet technologies \n2.1 Introduction \nWhen data is sent from one device to another, it is important to consider how \nthat data is transmitted. It is also important to ensure that the data hasn't been \nchanged in any way. \nThe internet has now become an integral part of all of our li\\·es. This chapter \nwill consider some of the important technologies going on in the background \nwhich support the internet. \n2.2 Data transmission \nData transmission can be either over a short distance ( for example, from \ncomputer to printer) or over longer distances (for example, over a telephone \nnetwork). Essentially, three factors need to be considered when transmitting \ndata ( each factor has to be agreed by both sender and receiver for this to work \nwithout error): \n• the direction of the data transmission (i.e. in one direction only or in both \ndirections) \n• the method of transmission (how many bits arc sent at the same time ) \n• the method of synchronisation between the two devices. \n2.2.1 Simplex, half-duplex and full-duplex © \nS IMPLEX DATA TRANSMISSION is in one direction only (i.e. from sender to receiver). \nExample: data being sent from a computer to a printer. \nHALF· DUPLEX DATA TRANSMISSION is in both directions but not at the same time \n(i.e. data can be sent from 'A' to 'B' or from 'B' to 'A' along the same line, but \nnot at the same time). Example: a phone conversation between two people where \nonly one person speaks at a time. \nFULL·DUPLEX DATA TRANSMISSION is in bothdirectiom sim11/taneously (i.e. data \ncan be sent from 'A' to ' B' and from 'B' to 'A' along the same line, both at the \nsame time) . Example: broadband connection on a phone line. \n2.2.2 Serial and parallel data transmission © \nSERIAL DATA TRANSMISSION is when data is sent, 011e bit at t1 time, over t1 single \nwireorcht1nnel (bits arc sent one after the other in a single stream). \nFigure2.1 \n(Note: bits can be transmitted as simplex, half-duplex or full-duplex.) \n• \n2.2 \nThis method of data transmission works well o\\·er long distances. However, data \nis transmitted at a slower rate than parallel data transmission. Since only one wire \nor channel is used, there is no problem of data arri\\'ing at its destination out of \nsynchronisation. \nAn example of its use is sending data from a computer to a modem for \ntransmission over a telephone line. \nPARAILBL DATA TRANSMISSION is when sevem/ bits of dntt1 (umal/y 1 byte) are \nsent down several wires 01' channels at the same time; one wire or channel is used \nto transmit each bit. \nData transmission \nI -· I l-~-1 \n~;,£~ \nFigur• 2.2 \n... ;;::=,,p \n(Note: bits can be transmitted as simplex, half-duplex or full-duplex. ) • \nThis method of data transmission works very well o\\·er short distances ( over \nlonger distances, the bits can become 'skewed' - this means they will no longer be \nFigure 2.3 R;bbooronnector \nsynchronised). It is, howe\\·er, a faster method of data transmission than serial. \nAn example of its use is when sending data to a printer from a computer using a \nribbon connector. \nActivity 2.1 \nDescribewhatisme,mtby: \na serial, hatl-duplexdatatransmission \nb parallel,full-duplexdatatransmiOOn \nc serial,simplexdata trammission \nA common use for serial data transmission is discussed in Section 2.2.4 (Universal \nSerial Bus (USB)). \nParallel data transmission is used in the internal electronics of the computer \nsystem. The pathways benveen the CPU and the memory all use this method \nof data transmission. Integrated circuits, buses and other internal components \nall use parallel data transmission because of the need for high speed data transfer. \nThe use of8 -bit, 16-bit, 32-bit and 64-bit buses, for example, allow much faster \ndata transmission rates than could be achieved with single channel serial data \ntransfer. An internal clock is used to ensure the correct timing of data transfer; \nit is essentially synchronous in narnre (see Section 2.2.3 ) and the short distances \nbetween components mean that none of the issues described earlier have any real \nimpact on the accuracy ofthe data."
  },
  {
    "chapter": "Chapter 4 covers the internal architecrnre of computer systems (including the",
    "text": "role of buses) and this should be read in conjunction with the information given \nabove. \n2.2.3 Asynchronous and synchronous data transmission \nAsYNCH RONOUS DATA T RANSMISSION refers to data being transmitted in an agreed \nbit pattern. Data bits (ls and Os) arc grouped together and sent with CONTROL \n2 \nCOMMUNICATION AND INTERNET TECHNOLOGIES \n1,tartbit 1, I O 1, 1, 1, 1, I O I O 1, 1, 1, I O 1, I O 1, I O I siopbit I \ncootrol bit \nFigu,.2.4 \nThis means that the recei\\·er of the data knows when the data starts and when it \nends. This prevents data becoming mixed up; without these control bits, it would \nbe in1possible to separate groups of data as they arrived. \nSYNCHRONOUS DATA TRANSMISSION is a continuous stream of data (unlike \nasynchronous data which is sent in discrete groups). The data is accompanied by \ntiming signals generated by an internal clock. This ensures that the sender and \nrecei\\'cr are synchronised with each other. \nThe recei\\'ercounts how many bits (l s and Os) were sent and then reassembles \nthem into bytes of data. The timing must be \\·ery accurate here since there arc \nno control bits sent in this type of data transmission. Howe\\'er, it is a faster \ndata transfer method than asynchronous and is therefore used where this is an \nimportant issue (for example, in network communications). \n2.2.4 Universal Serial Bus (USB) \n1l1e UNIVERSAL SERIAL Bus (USB) is an asynchronous serial data transmission \nmethod. It has quickly become the standard method for transferring data between \na computer and a number of devices. Essentially, the USB cable consists of: \n• a four-wire shielded cable \n• two of the wires arc used for power and the earth \n• two of the wires are used in the data transmission. \nWhen a de\\'ice is plugged into a computer using one of the USB ports: \n• the computer automatically detects that a device is present (this is due to a \nsmall change in the \\'oltagc level on the data signal wires in the cable ) \nFigu,. 2.5 use cable \n• the de\\'ice is automatically recognised, and the appropriate DEVICE DRIVER is \nloaded up so that computer and de\\'ice can communicate effectively \n• if a new device is detected, the computer will look for the de\\'ice driver which \nmatches the dt.·\\'ice; if this is not available, the user is prompted to download \nthe appropriate software. \nEven though the USB system has become the industrial standard, there arc still a \nnumber ofbenefits (/ ) and drawbacks (x) to using this system: \nOevkespluggedintolhe«rnputera,reaotomabcally \ndetected;de,,;ced,iv,,.-,a,reautomaticallyuploaded \nThero,mec!OfScanonlyfitonew~:thisp,'-\"'enls \nThemaximumcablelenglhisp,esentlyabootS \ninror,ectconnectionsbeingmade \nmetres \nThishasbecomethe indllSt,y,tan,fa,d;thismeans \nthatcoosidefablesuppo,tisavailabletousers \nSeveraldiffe,entdatatransmissioo,atesare \nThep,esenttransmissioo,ateislimitedtoJessthan \nsupported \n500megabil5Jll'fsecood \n2.3 \n2.3 Error-checking methods \nFollowing data transmission, there is always the risk that the data has been \ncorrupted or changed in some way. This can occur whether data is being \ntransmitted over short distances or o\\'er long distances. \nChecking for errors is important since computers aren't able to check that text \nis correct; they can only recognise whether a word is in their built-in dictionary or \nnot. Look at the following text: \nCan you racd tihs? \n' I cnduo't bvleicc taht I culod aulaclty uesdtannrd waht I was rdnaieg. \nUnisg the icndeblirc pweor of the hmuan mnid, aocdcrnig to rscccrah \nat Cmabridgc Uincrvtisy, it dseno't mttaer in waht oderr the ltercts in a \nwrod are, the olny irpoamtnt tihng is taht the frsit and lsat ltteer be in the \nrhgit pclae. The rsct can be a raotl mscs and you can sit!] racd it whoutit a \npbocrlm. \nTihs is bucscac the huamn mnid dcos not racd crvcy lttccr by istlcf, but \nthe wrod as a wlohc. \nAaznmig, huh? Yeah and I awlyas tghhuot slclinpg was ipmorantt! Sec if \nyuor fdrcins can racd tihs too' \n(From an unknown source at Cambridge University) \nWhilst you probably had little problem understanding this text, a computer \nwould be unable to make any sense of it. \nThis is why error checking is such an important part of computer technology. \nThis section considers a number of ways tliat can be used to check for errors so \nthat you don't end up with text as shown in the example above! \nA number of methods exist which can detect errors and, in some cases, actually \ncorrect tl1e error. The methods covered in tl1is section arc : \n• parity checking \n• automatic repeat request (ARQ) \n• checksum \n• echo checking. \n2.3.1 Parity checking @ \nPARITY C H ECKING is one method used to check whether data has been changed or \ncorrupted following transmission from one device or medium to anotl1er device \nor medium. \nA byte of data, for example, is allocated a PARITY BIT. This is allocated before \ntransmission takes place. Systems that use EVEN PARITY ha\\·e an even number of \n1-bits; systems that use ODD PARITY have an odd number of 1-bits. \nConsider tl1e following byte: \np,,<itybit \nFigur•2.6 \nError<hecking methods \n2 \nCOMMUNICATION AND INTERNET TECHNOLOGIES \nIf this byte is using even parity, then the parity bit needs to be O since there is \nalready an even number of I -bits (in this case, 4 ). \nIf odd parity is being used, then the parity bit needs to be I to make the \nnumber of I-bits odd. \nTherefore, the byte just before transmission would be: \neither(even parity) \nparjtybit \nRgu,.2.7 \nor (odd parity) \nparjtybit \nRgu,.2.8 \nBefore data is transferred, an agreement is made between sender and recei\\·er \nregarding which of the two types of parity are used. This is an example of a \nActivity 2.2 \nFindtheparitybitsloreadiolthelollowingbytes: \na 1101101 \nb 0001111 \nc 0111000 \nd 1110100 \neveoparjtyused \neven parity used \neven parity used \noddparjtyused \nodd parity used \nIf a byte has been transmitted from 'A' to 'B', and even parity is used, \nan error would be flagged if the byte now had an odd number of I-bits at \nthe recei\\'er'send. \nExample 1@ \nRgu,.2.9 \nIn this case, the receiver's byte has three I -bits, which means it now has odd \nparity whilst the byte from the sender had even parity ( four I-bits). This clearly \nmeans an error has occurred during the transmission of the data. \nThe error is detected by the computer recalculating the parity of the byte sent. \nIf c\\'cn parity has been agreed between sender and recei\\·er, then a change of \nparity in the received byte indicates that a transmission error has occurred. \n2.3 \nActivity 2.3 \nWhichofthefollowingbyteshaveanerrorfollowingdatatransmission? \na 11101101 \nb 01001111 \nc 00111000 \nd 11110100 \neven parity used \neven parity used \neven parity used \nodd parity used \nodd parity used \nIn each case where an error occurs, can you work out which bit is incorrect? \nNamrally, any of the bits in Example 1 could have been changed leading to \na transmission error. Therefore, e\\·en though an error has been flagged , it is \nimpossible to know exactly which bit is in error. (Your last answer in Activity 2.3 \nshould have been 'NO' since there isn't enough information to determine which \nbit has been changed. ) \n0 One of the ways around this problem is to use PARITY BLOCKS. ln this \nmethod, a block of data is sent and the number of 1-bits are totalled horizontally \nand vertically (in other words, a parity check is done in both horizontal and \nvertical directions). As Example 2 shows, this method not only identifies that an \nerror has occurred but also indicates where the error is. \nExample 2 @ \nIn this example, nine b)'tes of data ha\\·e been transmitted. Agreement has been \nmade that even parity will be used. Another byte, known as the PARITY BITE, \nhas also been sent. This b)'te consists entirely of the parity bits produced by the \n\\'ertical parity check. The parity b)'te also indicates the end of the block of data. \nThe following table shows how the data arri\\·ed at the recei\\'ing end: \nbyteB \n0 \nbyte9 \n0 \nparity \n\"'~ \nA carefid srudy of Table 2.2 shows the following: \n• byte 8 (row 8 ) has incorrect parity (there are three 1-bits) \n• bit 5 (column 5 ) also has incorrect parity (there are five 1-bits). \nError<hecking methods \n2 \nCOMMUNICATION AND INTERNET TECHNOLOGIES \nFirst of all, the table shows that an error has occurred following data transmission. \nSecondly, at the intersection of row 8 and column 5, the position of the \nincorrect bit value (which caused the error) can be found. \nThis means that byte 8 should have the value: \nFigure2.10 \nwhich would also correct column 5 giving an even vertical parity ( now has four \n1-bits). \nThis byte could therefore be corrected automatically as shown above, or an \nerror message could be relayed back to the sender asking them to retransmit the \nblock of data. \nOne final point: if two of the bits change value following data transmission, \nit may be impossible to locate the error using the above method. For example, \nusing fa:ample l again: \nFigure2.11 \nThis byte could reach the destination as: \nFigure2.12 \nFigure2.13 \nFigure2.14 \nAll three are clearly incorrect; but they have retained even parity so this wouldn't \nhave triggered an error message at the receiving end. Clearly we need to look \nat other methods to complement parity when it comes to error checking \ntransmitted data. \n2.3 \nActivity 2.4 \nThe following block of data was received after transmission from a remote computer; odd parity \nbeingusedbybothsenderandreceiver.Oneofthebitshasbeeochangedduringthetransmission \nstage. LDG1tewherethiserrorisands.uggestamrrectedbyte value \nbyte1 \n0 \nbyte2 \n1 \nbyte3 \n1 \nbyte4 \n0 \nbvt.5 \n1 \nbvte6 \n1 \nbvte7 \n0 \nbvte8 \n0 \nlbvte9 \nO \nparity \nS,w \n2.3.2 Automatic Repeat Request (ARO) \nAurm,IATIC REPEAT REQuEIT (ARQ) is another method used to check whether \ndata has been correctly transmitted. \nIt uses an ACKNOWLEDGEMENT (a message sent by the receiver indicating that \ndata has been received correctly) and n1,rnour (this is the rime allowed to elapse \nbefore an acknowledgement is recei\\·ed). \nIf an acknowledgement isn't sent back to the sender before rime out occurs, \nthen the message is automatically resent. \n2.3.3 Checksum ® \nCHECKSUM is another way to check if data has been changed or corrupted \nfollowing data transmission. Data is sent in blocks and an additional value, \nthe checksum, is also sent at the end of the bloc.k of data. \nTo explain how this works, we will assume the checksum of a block of data \nis I byte in length. This gives a maximum value of28 - 1 (i.e. 255). 111e value \n0000 0000 is ignored in this calculation. Example 3 explains how a checksum is \ngenerated. \nExample 3 \nIf the sum of all the bytes in the transmitted block of data is<• 255, then the \nchecksum is this value. \nHowever, if the Slllll of all the brt:es in the data block> 255, then the checksum \nis found using the simple algorithm in Figure 2.15. \nSuppose the value ofX is 1185, then tracing through the algorithm, we get: \nX - 1185 \n1 1185/256 - 4.629 \n2 Rounding down to nearest whole number gives Y - 4 \n3 Multiplying br 256 gives Z - Y • 256 - 1024 \n4 The difference (X - Z) gives the checksum: (ll85 - 1024) - 161 \n5 This gives the checksum - 16 1 \nError<hecking methods \nOividethesum,X.of \nthebyte,by2S6 \nRoondtheanswer \ndowntothenea,est \nwholenumbef.Y \nCakulatethe \nciffereoce(X - Z) \nThi,valuei,the \nchecksum \nFigure 2.15 \n2 \nCOMMUNICATION AND INTERNET TECHNOLOGIES \nWhen a block of data is about to be transmitted, the checksum for the bytes is \nfirst of all calculated. This value is then transmitted with the block of data. At the \nrecei\\'ing end, the checksum is recalculated from the block of data received. This \ncalculated value is then compared to the checksum transmitted. If they are the \nsame value, then the data was transmitted without any errors; if the \\'alues are \ndifferent, then a request is sent for the data to be retransmitted. \nActivity 2.5 \nCakulate the chedsum for blocks of \ndatawiththefollowingbytesums \n,\n148 \nb 905 \nc 14S0 \nd 4095 \n2.3.4 Echo check \nWith ECHO CHECK, when data is sent to another device, this data is sent back \nagain to the sender. The sender compares the two sets of data to check if any \nerrors occurred during the transmission process. \nAs you will ha\\'e no doubt worked out, this isn't \\'ery reliable. If the two sets \nof data are different, it isn't known whether the error occurred when sending \nthe data in the first place, or if the error occurred when sending the data back \nfor checking! \nH owe\\·er, if no errors occurred then it is another way to check that the data \nwas transmitted correctly. \n2.4 Internet t echnologies \nTI1e internet is a world-,vide system of computer nenvorks and computers. All \ncomputers attached to the internet can communicate with each other providing \na number of rules and protocols are adhered to. \n2.4.1 Internet Service Provider (ISP) \nEach user makes use of an INTERNET SERVICE PROVIDER (ISP); tl1ese are \ncompanies that pro\\'ide the user with access to the internet. A monthly fee is \nusually charged for tills service. The ISP will set up a user account which will \ncontain a username and a password; most ISPs also gi,·e the user an email address. \nBefore ISPs became crnrunon in the 1990s, internet access was usually limited \nto users who were part of a miiversity or a gO\\·ernment agency. \n2.4.2 Internet Protocol (IP) Address \nEach device on the internet is gi\\'en a unique address known as tl1e INI\"ERNIIT \nPROTOCOL (IP) ADDRESS. This is a 32-bit number which is usually written in the \nform: \n109.108.158.1 \nA home computer is given an IP address when it connects to the internet. This is \nassigned by the ISP and is unique for that particular internet session. The only IP \naddresses tl1at remain fairly unchanged are web ser\\'ers. \n2.4 \nAn IP address can be used instead of typing in the full URL. For example: \nhnp://109. 108.158.1 \nwould take you straight to the device corresponding to this address. \nIP addresses and MAC add resses \nYou will recall the term MEDIA ACCESS CONrROL (MAC) ADDRESS from Chapter l. \nThis is a unigue number that identifies a device connected to the internet. So \nwhat is the difference between an IP address and a ,\\.IAC address? The IP address \ngives the location of a device on the internet, whereas the MAC address identifies \nthe device connected to the internet. \nYou can think of the IP address as the address of the house you live in (it will \nhave some unique way of identifying it, such as a JX)St or zip code). Using this \nexample, the MAC address can be thought of as a way of uniquely identifying \neach person living in that house. It is possible to move house (so your IP address \nwill change) but the same people will be living in the new house ( so their MAC \naddresses will remain unchanged). \n2.4.3 HyperText Mark-up Language (HTML) \nH YPERTEXT MARK-UP LANGUAGE (H TML) is used when writing and \nde\\·eloping web pages. HTML isn't a programming language but is simply a \nmark-up language. A mark-up language is used in the processing, definition and \npresentation of text (for example, specifying the colour of the text). \nHTML uses <tags> which are used to bracket a piece of code; for example, \n<td> starts a standard cell in an HTML table, and </td> ends it. 'Nhatever is \nbetween the two tags has been defined. H ere is a short section of HTML code: \nc:tr> \nc:td>c:hl>Small carc:/hJ> \nc:hl>Used car salesc:/hl> \nc:h2>Cars from $500c:/h2> \nc:br>c:h2>Cash sales onlyc:/h2>c:/td>c:/br> \nc:/tr> \nc:colgroup> \nc:col span•\"2\" style•\"background-color,red\"> \nc:col style•\"background-color:yellow\"> \nHTML st ructure and presentation \n\\\\'hen writing HTML code, it is very imixirtant to realise that there is a difference \nbetween the structure and the presentation. \nSr&ucruRE is the essential part of the HTML document; it includes the \nsemantics (meaning) and strucrnral mark-up of the document. \nPRESENTATION is the style of the document; i.e. how the document will look \n(or even sound ifit includes multin1edia elements). \nThese two features must be kept separate throughout the designing of a \nweb page. At the end of the design process, the author should have an HTML \ndocument (which contains the structure and the actual content) and a separate \ncss (CASCADING STYLE SH EIIT) file. The css file will contain t.·verything to control \nthe acrnal presentation ofthe web page. \nInternet technologies \n• \n2 \nCOMMUNICATION AND INTERNET TECHNOLOGIES \nSome of the <tags> used to create a css file have been shown already in the \nHTML example shown abo\\·e . The following section shows an example ofhow \nthese <tags> can be used to create a stylesheet called example2 . css. This is \nthen used in a web page document. The tags (hl, h3 and p) all define how the \ndocument will look when this css file (stylesheet) is attached. \n~r'\"--\"'\"-\"'f<;io,, ..... -r,.;.i~E,:1.,..,.-, ..... \nlcalo.aia!~uark \n(eolo\"'f:r::~~ifji;;7rlf: \nFigu,.2.16 Thisshow,:howlhecssfile (examp'el.css)isc,eatedfllf useinthe \ndocumentbelow;h1.h3andphaveall beendefined. sowhenthefileisattached \nbelow.awebbmwserknow,:howtodisplaythi,webpage \nFigu,.2.17 \n2.4.4 Hypertext transfer protocol (http) \nHYPERTEXT TRANSFER PROTOCOL ( Hrrr) is a set of rules that must be obeyed \nwhen transferring files across the internet. \\Vhen some form of security ( e.g. SSL \n~;:~fi:i::~:: :::7~ti;~~~~:e s:~las ::l ~;l:s s~\n1\n::: :~:~ ~:: ~::~:s at:e~t1:::p \nrefers to http over i;;ecure. It is slower to use https than http; https is usually only \nadopted where sensit.i\\·e or private data is being transferred across the .internet. \n2.4.5 Web browsers \nA WBB BROWSBR is software which allows a user to display a web page on their \ncomputer screen. Web browsers interpret or translate the HTML code from \nwebsites and show the result of the translation. This can often be in the form of \nvideos, images or sound. Most web browsers share the following features: \n• they have a H OME page \n• they have the ability to store a user's fu\\·ourite websites/pages \n• they keep a history of the websites visited by the user \n• they give the ability to go backward and forward to websites opened. \n2.4 \nUsers can either dick on a link, such as \\.\\'W'\\','.hoddcreducation.co.uk/igcse or \nthey can type in the uniform resource locator (URL) manually. \nThe web browser will break up the URL into three parts: \nhttp://www.hoddereducation.eo.uk/igcsc_comp11ter_science \nthe protocol \nused {i.e \nhttp) \n(often the \nweb page) \nThe web browser translates the web server name into an IP address (see Section \n2.4.2) which is part ofthe URL. The HTML code is remrned and is shown as a \ncorrectly formatted page on the computer screen. It is also (X)SSible that cookies \nmay be sent from the web browser to the web server when the code is executed. \n(Note: please refer to Section 8 .3 for more information about the use of cookies.) \nInternet technologies \n• \n® Logic gates and logic circuits \nlnthischapteryouwilllearnabout: \ne logk:gates \ne truthtilbles \ne logkdrcuit1 \ne useolBooleanalgebra \n3.1 Introduction \nElectronic circuits in computers, many new memories and controlling devices \nare made up of thousands of LOGIC GATES. Logic gates take bi.nary inputs and \nproduce a binary output. Several logic gates combined together form a LOGIC \nCIRCUIT and these circuits are designed to carry out a specific function. \nThe checking of the output from a logic gate or logic circuit is done using \na T RlITH TABLE. \nThis chapter will consider the function and role oflogic gates, logic circuits \nand truth tables. Also a number of possible applications of logic circuits will \nbe considered. A reference to BooL EAN ALGEBRA will be made throughout the \nchapter, but this is really outside the scope of this textbook. H owever, Boolean \nalgebra will be seen on many logic gate websites and is included here for \ncompleteness. \n3.2 Logic gates ® \nSix different logic gates will be considered in this chapter: \n----[>- =D-\nNOT gate \nANO gate \n=D- =D-\n0 R gate \nNANO gate \n=D- =D-\nNOR gate \nXOR gate \nFigu,.3.1 Logicgate,ymbols \n3.3 Trut h tables \nTruth tables arc used to trace the output from a logic gate or logic circuit. The \nNOT gate is the only logic gate with one input; the other five gates ha\\'c two \ninputs. \n\\\\'hen constructing truth tables, all possible combinations of ls and Os which \ncan be input arc considered. For the NOT gate (one input) there are only 21 (2 ) \npossible binary combinations. For all other gates (two inputs), there are 22 (4 ) \npossible binary combinations. \nFor logic circuits, the number of inputs can be more than 2; for example \nthree inputs give a possible 23 (8 ) binary combinations. And for four inputs, \nthe number of possible binary combinations is 2'4- (16). It is clear that the number \nof possible binary combinations is a multiple of the number 2 in C\\'ery case. \n3.4 \nTo summarise in table form: \nTable 3.1Truthtablesla< two threeandtou,inputs \nInputs \nInputs \nI','---,~·~~ \n~~-tC-' ~-t-'-----i \n3.4 The function of the logic gates \n3.4.1 NOT gate \nA--[>-, \nFigur• 3.2 \nDescription: \nThe output, X, is l if: \nthe input, A, is 0 \n3.4.2 AND gate \nFigur• 3.3 \nDescription: \nThe output, X, is 1 if: \nboth inputs, A and B, are 1 \nTruth table: \nInput \nOutput \nA \n' \nTruth table: \nInputs \nOutput \n' \n' \nInputs \nThe function of the logic gates \nHow to write this: \nX - NOT A (logic notation) \nX - a \n(Boolean algebra) \nHow to write this: \nX - A AND B (logic notation) \nX - a · b \n(Boolean algebra) \n3 \nLOGIC GATES AND LOGIC CIRCUITS \n3.4.3 OR gate \nFigu,.3.4 \nDescripti on: \nTruth table: \nTI1coutput, X, is 1 if: \neither input, A or B, is 1 \n3.4.4 NAND gate (NOT AND) \n:=O-x \nFigu,.3.5 \nDescription: \nTI1coutput, X, is 1 if: \ninput A AND input B \narc NOT both I \nTruth table: \n3.4.5 NOR gate (NOT OR) \nFigu,.3.6 \nDescripti on: \nTI1coutput, X, is 1 if: \nneither input A nor \ninput Bis 1 \nTruth table: \nHow to write this: \nX - A ORB (logic notation ) \nX - a+ b \n(Boolean algebra) \nHow to write this: \nX - A NAND B (logic notation) \nX - ~ \n(Boolean algebra) \nHow to write this: \nX - A NOR B (logic notation ) \nX - a+D \n(Boolean algebra) \n3.5 \nLogic circuits \n3.4.6 XOR gate \n:=D-x \nFigur• 3.7 \nDescription: \nTruth ta ble: \nHow to write thi s: \nThe output, X, is l if: \nX - A XOR B (logic notation) \n(input A is 1 AND input BisO) \nOR \n(inputAisOANDinputBis 1) \nInputs \nOutput \n0 \nX \nX -(a · 6 ) + (i · b) (Boolean algebra) \n(Note: this is sometimes wrinen \nas: (a+b) · ~) \nActivity 3.1 \nFindoutwhyX:(a,D)+(ii,b)and(a+b},a--:--obothrepresentthesamelogk:gate \n(Note: the three symbols in the Boolean algebra ha\\·e the following meaning: \nrepresents the AND operation \n+ \nrepresents the OR operation \na bar abo\\·e the letter, e.g. ii, represents the NOT operation. ) \n3.5 Logic circuits \n\\\\'hen logic gates are combined together to carry out a particular function, \nsuch as controlling a robot, they form a logic circuit. \nThe output from the logic circuit is checked using a truth table. There now \nfollows three examples which show: \n• how to produce a truth table \n• how to design a logic circuit from a gi\\·en logic statement/Boolean algebra \n• how to design a logic circuit to carry out an actual safety function. \n3.5.1 Example 1 ® \nProduce a truth table for the following logic circuit (note the use of • at \njunctions): \nFigur• 3.8 \n3 \nLOGIC GATES AND LOGIC CIRCUITS \nThere arc three inputs to this logic circuit, therefore there will be eight possible \nbinary values which can be input. \nTo show step-wise how the truth table is produced, the logic circuit has been \nsplit up into three parts and intermediate values arc shown as P, Q and R. \nPart 1 \nThis is the first part of the logic circuit; the first task is to find the intermediate \nvalucs P andQ. \nFigu,.3.9 \nTI1e value of P is found from the AND gate where the inputs arc A and B. \nTI1cvaluc ofQ is found from the NOR gate where the inputs arc B and C. \nAn intermediate truth table is produced using the logic function descriptions \nin Section 3.4. \nInput values \nOutputvaluH \nPart 2 \n111c second part of the logic circuit has P and Q as inputs and the intermediate \noutput, R: \nFigu,.3.10 \n• \n3.5 \nThis produces the following intermediate truth table. (Note: even though there \nare only two inputs to the logic gate, we ha\\·e generated eight binary values in \npart 1 and these must all be used in this second truth table. ) \nInputs \nOutput \nQ \n\" \nPart 3 \nThe final part of the logic circuit has Rand C as inputs and the final output, X: \nFigur• 3.11 \nThis gi\\·es the third intermediate truth table: \nInputs \nPutting all three intermediate truth tables together produces the final truth table \nwhich represents the original logic circuit: \nlnputvaluH \nLogic circuits \n3 \nLOGIC GATES AND LOGIC CIRCUITS \nTI1e intermediate \\'alues can be left out ofthe final truth table, but it is good \npractice to lea\\'e them in until you become confident about producing the truth \ntables. The final truth table would then look like this: \nlnputvalu.. \nOutput \nActivity 3.2 \nProducetruthtablesforeachofthefollowinglogiccircuit\"i.Youareadvisedtosplitthemupinto \nintermediatepartstohelpeliminateerrors. \nFigure3.12 \n3.5 \n3.5.2 Example 2 e \nA safety system uses three inputs to a logic circuit. An alarm, X, sounds if input \nA represents ON and input B represents OFF; or if input B represents ON and \ninputCrepresentsOFF. \nProduce a logic circuit and truth table to show the conditions which cause \nthe output Xtobe 1. \nThe first thing to do is to write down the logic statement representing the \nscenario in this example. To do this, it is necessary to recall that ON - 1 and \nOFF - 0 and also that O is usually considered to be NOT 1. \nSo we get the following logic statement: \nFigur• 3.17 \n(Aa1AND8aNOT1) \nOR \n(B•1ANDCaOOT1 ) \nI \nTh,J.,.rn \nI \nmoo~ct,,.., \nthe OR gate \nNote: this statement can also be written in Boolean algebra as: \n1• · SJ. (b . ,) \nLogic circuits \n3 \nLOGIC GATES AND LOGIC CIRCUITS \nThe logic circuit is made up of three parts as shown in the logic statement. \\Ve \nwill produce the logic gate for the first part and the third part. Then join both \nparts together with the OR gate. \nFigure3.18 \nNow combining both parts with the OR gate gi\\'es us: \nFigure3.19 \nl11ere are two ways to produce the truth table: \n• trace through the logic circuit using the method described in Example 1 \n(Section 3.5.1 ) \n• produce the truth table using the original logic statement; this second method \nhas the advantage that it allows you to check that your logic circuit is correct. \nWe will use the second method in this example: \nInputs \nOutput \nB \n(A:1 AND 8:NOT 1) \n(8:1 AND C=NOT 1) \nX \n(Note: it is optional to leave in the intermediate values or to remm·e them giving \na four-column truth table with headings: A, B, C, X. ) \n3.5 \nActivity 3.3 \nOrawthelogiccircuitsandcompletethetruthtableslorthefollowinglogicstatementsand \nBoolean algebra statements: \na X: 1 if{A: 1 ORB: 1)0R(A:OAN08 = 1) \nb Y = 1 if{A = OAND B = O)AND{B = 0 OR C = 1) \nc T = 1 if (switch K is ON or switch Lis ON) OR (switch K is ON and switch Mis OFF) OR (switch \nMis ON) \nd X:(a.b)+(b.c} \na R = 1 if (switdi A is ON and switch 8 is ON) ANO (switch 8 is ON or switch C is OFF) \n3.5.3 Example 3 \nA wind rnrbine has a safety system which uses three inputs to a logic circuit. \nA certain combination of conditions results in an output, X, from the logic circuit \nbeing cciual to 1. \\Vhcn the value ofX - 1 then the wind mrbine is shut down. \nThe following table shows which parameters are being monitored and form \nthe three inputs to the logic circuit. \nParameter \nd-\nription \nturbinespel'd \nbearingtemperature \nT \n\\Mndvekx:ity \nBinaryvalu•\nD-riptionofcondition \n<a120kph \n>120kph \nThe output, X, will ha\\·e a value of l if any of the following combination of \nconditions occur: \n• either mrbine speed<• 1000 rpm and bearing temperature> 80°C \n• or mrbine speed > I OOO rpm and wind velocity > 120 kph \n• or bearing temperamre <• 80°C and wind velocity> 120 kph. \nDesign the logic circuit and complete the truth table to produce a value ofX - 1 \nwhen any of the three conditions above occur. \nThis is a different type of problem to those covered in Examples l and 2. \nThis time a real situation is g iven and it is necessary to convert the information \ninto a logic statement and then produce the logic circuit and truth table. It is \nad\\~sable in problems as complex as this to produce the logic circuit and truth \ntable separately (based on the conditions given) and then check them against each \nother to see ifthere are any errors. \nStage 1 \nThe first thing to do is to convert each of the three statements into logic \nstatements. Use the information given in the table and the three condition \nstatements to find how the three parameters, S, T and W, are linked. We usually \nlook for the key words AND, OR and NOT when converting actual statements \ninto logic. \nLogic circuits \n• \n3 \nLOGIC GATES AND LOGIC CIRCUITS \n\\\\'e end up with the following three logic statements: \ni turbine speed <• I 000 rpm and bearing temperature > 80°C \nlogic statement: (S - NOT l AND T - 1) \nii turbine speed > 1000 rpm and wind velocity> 120 kph \nlogic statement: (S - 1 AND W - 1) \niii bearing temperature <• 80°C and wind velocity > 120 kph \nlogic statement: (T - NOT 1 AND W - 1) \nStage 2 \nThis now produces three intermediate logic circuits: \nFigu,.3.20 \nii !====O-\nFigu .. 3.21 \nFigu,.3.22 \nEach of the three original statements were joined together by the word OR. Thus \nwe need to join all of the three intermediate logic circuits by two OR gates to get \nthe final logic circuit. \nWe will start by joining (i) and (ii ) together using an OR gate: \nFigu,.3.23 \n• \n3.5 \nFinally, we connect the logic circuit in Figure 3.23 to Figure 3.22 to obtain \ntheammrer: \nFigur• 3.24 \nThe final part is to produce the truth table. We will do this using the original \nlogic statement. This method has the bonus of allowing an extra check to be \nmade on the logic circuit in Figure 3.24 to see whether or not it is correct. It is \npossible, howe\\'er, to produce the truth table straight from the logic circuit in \nFigure 3.24. \nThere were three parts to the problem, so the truth table will first evaluate each \npart. Then, by applying OR gates, as shown below, the final value, X, is obtained: \ni (S - NOTIANDT - 1) \nii (S - 1 ANDW - 1) \niil (T - NOT I ANDW - 1) \nWe find the outputs from parts (i) and (ii) and then OR these two outputs \ntogether to obtain a new intermediate, which we will label part (iv). \nWe then OR parts (iii) and (i\\') together to get the \\'alue ofX. \nlnouts \nOutcut \nT \n(i)(S:NOT 1 \n(ii)(S:1AND (iiQ(T:NOT 1 (iv) \nX \nANDT:1) \nW:1) \nANDW:1) \nLogic circuits \n3 \nLOGIC GATES AND LOGIC CIRCUITS \nActivity 3.4 \nTwoscenariosaredesc:ribedbelow. lne.Khu11e,producethelogiccircuitandcompleteatruth \ntabletorepreseotthesc:enario \nii Achemicalprocessisprotectedbyalogicdrcuit.Therearethreeinputstothelogiccircuit \nrepresenting key parameters in the chemical process. An alarm, X, will give an output value \nof1 dependingoncertainconditionsinthechemicalprocess. The following table describes \ntheprocessconditionsbeingmonitored: \nPuam•t..rdHcription Parametu \nBinarvvalu• o-riptionofcondition \nchemkalrea<lionrate \nO \nrea<lion,ate <40mol/llsec \nprocess temperature \nAnalarm,X,willgeneratethevalue 1 if: \neither \nreactionrate<40moWsec \nconcentration> 4 mol ANO temperature> 115°( \nreaction rate>= 40 moWsec ANO temperature> 115°( \nb Apo1Nerstationhasasaletysystemcontrolledbyalogiccircuit. Threeinputstothelogic \ncircuit determine whether the output, S, is 1. When S = 1 the power !ilation shuts down. \nThefollowingtabledescribestheconditionsbeingmonitored \nParam.ierdHcription Parametu \nBinaryvalu• D-riptionofcondition \ngas temperature \nO \nastemperature <:160\"( \nreactor pressure \nwater temperature \nOutput,S,willgenerateavalueofl,if \neither \nwater temperature <:120\"( \ngas temperature> 160'C AND water temperature<= 120\"C \ngas temperature<= 160'CANDreactorpressure> 10bar \nwater temperature> 120°CANDreactorpressure> 10bar \n3.6 Logic circuits in the real world \nAnybody with an electronics background who is reading this chapter will be aware \nthat the design of logic circuits is considerably more complex than has been described. \nThis chapter has described in detail some of the fundamental theories used \nin logic circuit design. This will give the reader sufficient grounding to cover all \nexisting (l)GCSE and O level syllabuses. H owc\\'cr, it is worth finally discussing \nsome of the more advanced aspects oflogic circuit design. \nElectronics companies need to consider the cost of components, case of \nfabrication and time constraints when designing and building logic circuits. \n3.6 \n\\\\'e will mention two possible ways electronics companies can review logic \ncircuit design: \n1 One method is to use 'off-the-shelf' logic units and build up the logic circuit \nas a number of'building blocks'. \nlogic circuits in the real world \n2 Another method im·olves simplif)ing the logic circuit as far as possible; this may \nbe necessary where room is at a premium ( e.g. in building circuit boards for use \nin satellites to allow space exploration). \n3.6.1 Using logic 'building blocks' \nOne very common 'building block' is the NANO gate. It is possible to build \nup any logic gate, and therefore any logic circuit, by simply linking together a \nnumber ofNAND gates. For example, the AND, OR and NOT gates can be \nbuilt from these gates as shown below: \nThe AND gate: \nFigure3.25 \nThe OR gate: \nFigur• 3.26 \nThe NOT gate: \nFigur• 3.27 \nActivity 3.5 \n8ydrawingthetrutht<1bles,showthatthethreecircuitsabovecanbeusedtorepresentANO, \nOR and NOT gates. \n3 \nLOGIC GATES AND LOGIC CIRCUITS \nActivity 3.6 \na Show how the following logic circuit could be built using NAND gates only. \nAlsocompletetruthtablesforbothlogicdrcuit1toshowthattheyproduceidentic.aloutputs \nFigure3.28 \nb Show how the XOR gate could be built from NAND gates only. \nc Complete a truth table for your final design to show it that it produces the !>ilme output as a \nsingle XOR gate. \nActivity 3. 7 \nShow by drawing a truth table which single logic gate has the s.ame function as the following \nlogic circuit made up of NAND gates only. \nFigure3.29 \n3.6.2 Simplification of logic circuits \nThe second method invokes the simplification oflogic circuits. By reducing the \nnumber of components, the cost of production can be less. T his can also impro\\·c \nreliability and make it easier to trace faults if they occur. \nThe following example (Figure 3.30) can be simplified to a single gate. You are \nasked to show how this can be done in Activity 3.8. \nFigure3.30 \n3.6 \nActivity 3.8 \nShow by drawing a truth table which single logic gate has the 'Hime function as the logic circuit \ndrawninFigure3.30 \nActivity 3.9 \nComplete the truth tilble for the following logic circuit and then consider what s.implified design \ncouldreplacethewholelogiccircuit \nlogic circuits in the real world \nOperating systems and computer architecture \n4.1 Introduction \nAll modern computers ha\\'e some form of operating system which users generally \ntake for granted. The operating system makes it possible to communicate with \nthe software and hardware that make up a typical computer system. \nThere are many ways of representing computer architecmre, but one of the \nmore common ones is known as the von Neumann model which will be fully \ndescribed in this chapter. \n4.2 Operating systems \n1l1e OPERATING SYSTEM (OS) is essentially software running in the background \nof a computer system. It manages many of the basic functions which are shown in \nFigure 4.1. Obviously not all operating systems carry out everything shown in the \nfigure but it gives some idea of the importance and complexity of this software. \nWithout it, most computers would be very user-unfriendly and the majority of \nusers would find it almost impossible to work with computers on a day·to-day basis. \nFigu,.4. 1 \nOne of the most common examples of an operating system is known as Windows \nand is used on many personal computers. Other examples include: Linux, \nAndroid, UNIX and DOS. Windows is an example of a single-user multitasking \n4.3 \noperating system - this means only one user can use the computer at a time but \ncan h:we many applications open simultaneously. H ow operating systems actually \nwork is beyond the scope of this textbook. \nWhen a computer is first fXJWCred up, the initiating programs are loaded \ninto memory from the ROM (read only memory) chip. These programs nm a \nchecking procedure to make sure the hardware, processor, internal memory and \nbios ( basic input-output system) arc all functioning correctly. lfno errors are \ndetected, then the operating system is loaded into memory. \nIt is worth mentioning here that simple de\\'ices with embedded microprocessors \ndon't always ha\\·c an operating system. H ousehold items, such as cookers, \nmicrowa\\·e ovens and washing machines only carry out single tasks which don't \nvary. The input is usually a button pressed or a touchsc.rcen option selected which \nactivates a simple hardware function which doesn't need an operating system to \ncontrol it. \nActivity 4.1 \nFindouthowapplianceslittedwithmicroprocessorscanbecontrolledandi!Clivatedby \nweb.enableddevicessuchassmartphones. \n4.3 Interrupts and buffers \nAn INTERRUPT is a signal sent from a device or from software to the processor. \nThis will cause the processor to temporarily stop what it is doing and service \nthe interrupt. Interrupts can occur when, for example: \n• a disk drive is ready to receive more data \n• an error has occurred, such as a paper jam in a printer \n• the user has pressed a key to interrupt the current process ~ an example could \nbe <CTRL><ALT><BREAK> keys pressed simultaneously \n• a software error has occurred ~ an example of this would be if an .exe file \ncouldn't be found to initiate the execution of a program. \nOnce the interrupt signal is received, the processor either carries on \\vith what it \nwas doing or stops to sef'lice the device/program that generated the intermpt. \nInterrupts allow computers to carry out many tasks or to have several windows \nopen at the same time. An example would be downloading a file from the internet \nat the same time as listening to some music from the computer library. vVhenever \nan interrupt is serviced, the status of the current task being run is sa\\'ed. This is \ndone using an INI\"ERRUPT HANDLER and once the interrupt has been fully sef'liced, \nthe status of the interrupted task is reinstated and it continues from the point \nprior to the intern1pt being sent. \nBUFFERS arc used in computers as a temporary memory area. These are essential \nin modern computers since hardware devices operate at much slower speeds than \nthe processor. !fit wasn't for buffers, processors would spend the majority of their \ntime idle, waiting for the hardware device to complete its operation. Buffers are \nessentially filled from the processor or memory unit and whilst these are emptied \nto the hardware device, the processor carries on with other tasks. Buffers are used, \nfor example, when streaming a video from the internet. This ensures that the \nvideo playback doesn't keep on stopping to wait for data from the internet. \nBuffers and intermpts are often used together to allow standard computer \nfunctions to be carried out. These functions are often taken for granted by users \nInterrupts and buffers \n4 \nOPERATING SYSTEMS AND COMPUTER ARCHITECTURE \nof modern computer systems. Figure 4.2 shows how buffers and interrupts are \nused when a docW11e.nt is sent to a printer. \nTherurrenttaskissuspendedwhi!st \ntheinterrupti,seiviced \nFigu,.4.2 \nActivity 4.2 \nMeanwhife. theproc:es<Ofis \nabletocanyootothertask, \nwti.lethe{prfr,ter) buffer i, \nbefr,gempbed \nFind out how buffers and interrupt, are used when sending data to memories ~has OVD1 \nandsolidstate(e.g. peodrive). \n( Activity 4.3 \nF\"'d o,< how ooffm ae .,s,d wh,a swamiog a ,idro o, mo,, fmm she ioS,m,s ro \"'\"' \ncomputer. \nActivity 4.4 \nInvestigate the many way; that hardware and software can cause an interrupt to occur. Are All \ninterruptstreatedequallyordosomehavepriorityoverothers? \n) \n4.4 \n4.4 Computer architecture \nVery early computers were fed data whilst the machines were acrually running. \nThey weren't able to store programs; consequently, thL-y weren't able to run \nwithout human intervention. ln about 1945, John von Neumann developed \nthe idea of a stored program computer, often referred to as the VON NEUMANN \nARCH ITBGnJRB concept. His idea was to hold programs and data in a memory. \nData would then mo\\·e between the memory unit and the processor. \nThere are many diagrams which show von Neumann architecture. \nFigures 4.3 and 4.4 show two different ways of representing this computer \nmodel. The first diagram is a fairly simple model whereas the second diagram \ngoes into more detail. \nFigure 4.3 shows the idea of how a processor and memory unit are linked \ntogether by connections known as BUSFS. This is a simple representation of \nvon Neumann architecrnrc. These connections are described in Table 4.1. \n>oc= \ni~i..----. .. -•--.i M~ \n\\!flit) \n:Z,.~rus.+ \nOatabus .. \nControlbus ... \nFigur• 4.3 \nTable 4.1 describes the fimction of each of the three buses shown in Figure 4.3. \nBuses essentially move data around the computer and also send out control signals \nto make sure everything is properly synchronised. \nlypeofbus \no-riptionofbus \nrarriessignal,relatingtoaddres,es \n(seetat .. )belw'-\"\"1theproces<0< \nand the memory \nsendsdatabetweentheproces<0<. \nthememoryunitandtheinput/ \noutputde\\,;ce, \n:,~: si~',,;,,~:~_:: ~t~1 \nacti,,.;t>eswithintheromputer \n(examplesk,dude:the,eadand \nw,;tefunctions) \nunldir•tion•l (si(jl\\alstravel in \nooedirecl>ononly) \nbl-cll,-tional (datacantr..,ei ;n \nOOthdirectioo,) \nunidir•tional(si(jl\\alslfavelin \nooedirection only) \nComputer architecture \n4 \nOPERATING SYSTEMS AND COMPUTER ARCHITECTURE \nFigure 4.4 shows a slightly more detailed diagram of the \\·on Neumann architecture. \nIt brings to our attention another n<.·w concept in this computer model - the idea \nof ADDRESSES and REGISIBRS. Addresses indicate where the data is stored and \nregisters are needed so that data can be manipulated within the computer. \nFigu,. 4.4 \nAn address is the location of where data can be found in a computer memory. \nEach address in the memory is unique. The addresses arcn 't actually shown in \nFigure 4.4, but they are contained in the part of the diagram labelled memory \nunit. T he actual function of the addresses is discussed in Section 4 .4. 1. \nYou will notice a number of items shown in the diagram known as registers: \nMAR, MDR, ALU, PC and C IR. TI1e.se arc a little more complex and their fimction \nwill be fully described in the following pages. But essentially a register is simply \na high-speed storage area within the computer. All data must be represented in a \nregister before it can be processed. For example, iftwo numbers are to be added, \nboth numbers must be stored in registers and the result of the addition must also be \nstored in a register. \nActivity 4.5 \nDraw up a rnmmary table that show,; how buses. registers and addresses are all connected \ntogether.Thiscanbedonebydoingadesk-topexerdse \n• Use a sheet of AO (flipchart size) paper and draw a large outline of the FIVE main components \nshowninFigure4.4 \n• Cutcolouredarrowsoutolcardboardtoshowthebusesandplaceonthediagramyou·ve \njustdrawn;thedataandcontrolbuseswillbeeasytofit. \n• However, you will need to do a little bit of thinking to decide how the address bus fits into \nyour diagram \n• CutthefiveregistersoutolcardboardandplacethemonthelargeAOoutline \n• Above the memory unit. place an example of some memory addresses and their contents \n• Cut out some 8-bit binary numbers representing your addresses and contents \n• Finally by moving data around you should be able to see how buses, addresses and registers \nallinterconnect;yougetfurtherhelpindoingthisdesl::-topexercisewheoyouread \nSectiom4.4.1to4.4.4 \n• TrytofindouthowsimpleoperationslikeadditioncanbeG1rriedoutusingyourdesk-top \n4.4 \n4.4.1 Memory unit \nThe computer memory unit is made up of a number of partitions. Each partition \nconsists of an ADDRESS and its CONTENTS. The example shown here uses 8 bits for \neach address and 8 bits for the content. In a real computer memory, the address \nand its contents are acmally much larger than this. \nThe address will uniciudy identify every LOCATION in the memory and the \ncontents will be the binary. \nFigure 4.4 showed five examples of registers. Their function will be described \nlater on, but for now, the abbreviations stand for: \n• MAR memory address register \n• MDRmemory data register \n• ALU arithmetic and logic unit \n• PC program counter \n• CIR current instruction register. \nLet us now consider how the two registers (,\\.lAR.and MDR) shown in the \nmemory unit arc used. \nConsider the READ operation. \\Ve will use the memory section shown in \nTable 4.2. Suppose we want to read the contents of memory location 1111 0001; \nthe two registers arc used as follows: \n• The address of location 1111 OOO 1 to be read from is first written into the \nMAR (memory address register): \nMAR I 1 I 1 I 1 I 1 I O I O I O I 1 I \nFigure4.5 \n• A 'read signal' is sent to the computer memory using the control bus. \n• 111c contents of memory location 1111 OOO I arc then put into the MD R \n(memory data register): \n(Look at Table 4.2 to confirm this. ) \nMAR I O I 1 I O I 1 I 1 I O I 1 I 1 I \nFigure 4.6 \nNow let us consider the \\VRITE operation. Again we will use the memory section \nshown in T able 4.2. Suppose this time we want to show how the value 1001 0101 \nwas written into memory location 1111 1101. \nComputer architecture \n4 \nOPERATING SYSTEMS AND COMPUTER ARCHITECTURE \n• The data to be stored is first written into the MDR (mcmory data register): \nMAR I 1 I O I O I 1 I O I 1 I O I 1 I \nFigure4.7 \n• This data has to be written into the memory location with the address \n11 11 1101; so this address is now written into the MAR: \nMAR I 1 I 1 I 1 I 1 I 1 I 1 I O I 1 I \nFigure4.8 \n• Finally, a 'write signal' is sent to the computer memory using the control bus \nand this value will then be written into the correct memory location. \n(Again confirm this by looking at Table 4.2. ) \nActivity 4.6 \nUs.e your model uwted in Activity 4.S to show how the two operations, read and write, are \ncarriedoutinthevonNeumilnnarc:hitecture \n4.4.2 Processor \nTI1e PROCESSOR contains the ARITHMETIC AND LOGIC UNIT (ALU). The ALU \nallows arithmctic.(c.g. add, subtract, etc.) and logic (e.g. AND, OR, NOT, etc.) \noperations to be carried out. How this is used is explained in Section 4.5. \n4.4.3 Control unit \nThe CONTROL UNIT controls the operation of the memory, processor and input/ \noutput devices. It contains the CURRENT INsrRUCrION REGisrER (CIR) and \nthe PROGRAM COUNTER (PC). The C l R contains the current instruction during \nprocessing. The PC contains the address of the next instruction to be executed. \nEssentially, the control unit reads an instruction from memory (the address \nof the location where the instruction can be found is stored in the Program \nCounter (PC)). This instruction is then interpreted. During that process, signals \narc generated along the control bus to tell the other components in the computer \nwhat to do. \nHow this all fits together with the other components of the von Neumann \nmodel is discussed in Section 4.5. \n4.4.4 Input and output devices \nTI1e input and output devices arc discussed in"
  },
  {
    "chapter": "Chapter 5 and arc the main",
    "text": "method of entering data into and getting data out of computer systems. Input \ndevices convert external data into a form the computer can understand and can \nthen process ( e.g. keyboards, touchscreens and microphones). Output devices \nshow the results of computer processing in a humanly understandable form \n(e.g. printers, monitors and loudspeakers). \nHow all of these five registers are used by a typical computer system can be \nfound in Section 4.5 - the fetch-execute cycle. Again other textbooks and websites \nwill all have different ways of showing how this cycle operates. The important \nthing is to get a good general understanding of how the cycle functions. \n4.5 \n4.5 The fetch-execute cycle 0 \nTo carry out a set of instructions, the processor first of all FETCH ES some data and \ninstructions from memory and stores them in suitable registers. Both the address \nbus and the data bus are used in this process. Once this is done, each instruction \nneeds to be decoded before finally being EXECU'IBD. This is all known as the \nH ITCH -EXECUTE CYCLE and is the last part of this puzzle. \nFet ch \nIn the fetch-execute cycle, the next instruction is fetched from the memory address \ncurrently stored in the Program Counter (PC) and is then stored in the Current \nInstruction Register (CIR). 111c PC is then incremented (increased by 1) so that \nthe next instruction can be processed. \nThis is then decoded so that each instruction can be interpreted in the next part \nof the cycle. \nExecute \nThe processor passes the decoded instruction as a set of control signals to the \nappropriate comix,nents within the computer system. This allows each instruction \nto be carried out in its logical sequence. \nFigure 4.9 shows how the fetch-execute cycle is carried out in the von Neumann \ncomputer model. As with most aspects of computer science, there will be slight \nvariations on this diagram if other textbooks or websites arc consulted. The main \naim is to end up with a clear understanding of how this cycle works. \nThep,ogramcounte,(P()cootains!headdressolthe \nmemo:y 00000 °' 1:;: fe~~!Juctioo which has to \nThisadd,ee.sis!heoropledlmm!heKtothememo,y \naddr=register(MAR);!ht!sisdooellSO!lgtheaddr= \nTheco!lteot,(instruction)atthememo,ykxatioo \n{address)rontaonedillMAAarethMcopH'dtemporarily \nilllothememorydataregiste,(MOR) \nTheronlel\\ts(instructioos)oltheMDRa,elhencopied \naodplacedintotherurrentinstructioo,egister(CIR) \nThevalueinthel'Cis!henincrementedbylsothatit \noowpointsto!hene7,\\~~whod!hastobe \nTheinstructiooisfinallyderodedandlhenexecutedby \nsendingO<ltsigllals(vialhecOf\\tfolbus)to!hevafious \nromponentsollhecomputerS)'Stl'm \nFigur• 4.9 \nThe fetch~xecute cycle \n• \n4 \nOPERATING SYSTEMS AND COMPUTER ARCHITECTURE \nFigure 4.9 shows the acrual stages that take place during the fetch-execute cycle, \nshowing how each ofthe registers and buses are used in the process (the first five \nboxes are part of the fetch cycle and the last box is part of the execute cycle). \nActivity 4. 7 \n• ltisv,,,orthtryingtodoadesk-topexert:isetocarryoutaseriesofinstructionsusingtheletch-\nexecute cycle. Do 'iOme research and decide on four or five operations {add. subtract, etc.) \nand give the 8-bit binary codes. Then ue.ite a memory map as shown in Activity 4.5 \n• Once this is done, use the five registers you ueated in Activity4.S and news.bit binary \nvaluestotraceouteXil(tlywhathappensasinstructionsareletchedandexecutedinyour \nrnmputermodel. \n® Input and output devices \nlnthischapteryouwinle.-imabout: \ne inputdevices \ne applicationsolinputdevices \ne outputdevices \ne applicatioosoloutputdevices \n5.1 Introduction \nComputer systems would be of little real use without a method of input or \noutput. This chapter reviews how a number of input and output devices work. \nIt also considers a variety of applications which make use of these dt.·vices. \nThe input devices covered include: \n• scanners \n• barcode readers/scanners \n• quick response (QR) code readers \n• digital cameras \n• keyboards \n• pointing devices (such as a mouse ) \n• microphones \n• touchscrecns \n• sensors \n• interacti\\·c whiteboards. \nThe output devices covered include : \n• inkjetprintcrs \n• laser printers \n• 3Dpri.ntcrs \n• 2D/ 3Dcutters \n• actuators \n• loudspeakers \n• LCD/ LED monitors \n• projectors (LCD and OLP). \n5.2 Input devices \n5.2.1 Scanners \nSCANNERS are either two-dimensional (20 ) or three-dimensional (30). \nTwo-d imensional sca nners \nThese types of scanner are the most common fonn and are generally used to \ninput hard-copy (paper) documents. The image is converted into an electronic \nform which can be stored in a computer. \n5 \nINP(JT AND OUTPUT DEVICES \nA number of stages occur when scanning a document: \nA bright licj>t lheo illuminates the document - modem scanners \nuseatypeofxeooolampwhi<hprodocesaverybfqltwhitelight \nA saoh.ad r1.<Nesacrossthedorumeotuntilthewholepage \ntlasbeenscanned.AAimageolthedorumentisproducedwhich \nisthensenttoaleosusingase<iesofmir,Ol'S \nThe!ensloruseslhedocur1entimage \nThe focused i,r.age now fa k onto a char~ couple device (CCD); \nwhichronsis!sofam.mberofintegratedcirruitsetchedintosilicoo \n(ssentiallytheCCDismadeupolthousarldsoflicj,k,eosilive \neler1ents(or piHl1).fa<helementcreatesaneH'ctric<hargewhen \n:;;t,t:1:~t!,-::,~':\"\"' that the scanned iff age is now turned \nSoftware produces a digital image Imm the electronic fofm \nFiguftl5.1 \nComputers eciuipped with O PTICAL CHARACTER RECOGNITION (QCR) software \nallow the scanned text from the document to be converted into a TEXT FILE \nFORMAT. This means the scanned image can now be edited and manipulated by \nimporting it into a word processor. \nIf the original document was a photograph or image, then the scanned image \nforms an image file such as JPEG (see Section 6.2.3 ). \nThree-di mensional sca nners \n30 scanners scan solid objects and produce a three -dimensional image. Since solid \nobjects have x, y and z coordinates, these scanners take images at several points along \nthese three coordinates. A digital image which represents the solid object is formed. \nThe scanned images can be used in COMPUTI!R AIDED DESIGN (CAD) or, more \nrecently, sent to a 3D printer (see Section 5.3.3) to produce a working model of \nthe scanned image. \nThere are numerous technologies used in 3D scanners - lasers, magnetic \nresonance, white light, and so on. It is beyond the scope of this book to look at \nthese in any great depth; however, the second application that follows describes \nthe technology behind one form of3D scanning. \n5.2 \nApplicatio n of 2D sca nners at an airport \n20 scanners arc used at airports to read passports. ThL-y make use of OCR technology \nto produce digital images which represent the passport pages. Because of the OCR \ntechnology, these digital images can be manipulated in a number of ways. \nFor example, the OCR software is able to review these images, selcc.t the text \npart and then automatically put the text into the correct fields of an existing \ndatabase. It is possible for the text to be stored in ASCII format (see"
  },
  {
    "chapter": "Chapter 1) - it",
    "text": "all depends on how the data is to be used. \nAt many airports the two-dimensional photograph in the passport is also \nscanned and stored as a jpeg image. The passenger's face is also photographed \nusing a digital camera (a 20 image is taken so it can be matched to the image \ntaken from the passport). The two digital images are compared using face \nrecognition/detection software. Key parts of the face are compared. \nFigur•5.2 \nThe face in Figure 5.2 shows se\\·eral of the positions used by the face recognition \nsoftware. Each position is checked when the software tries to compare two facial \nimages. Oatasuchas: \n• distance between the eyes \n• width of the nose \n• shape of the cheek bones \n• length ofthe jaw line \n• shape of the eyebrows \nare all used to identify a given face. \n\\Vhen the image from the passport and the image taken by the camera are \ncompared, these key positions on the face determine whether or not the two \nimages represent the same face. \nApplication of 3D scanning - computed \ntomographic (CT) sca nners \nCm,IPUIBD TOMOGRAPHIC (CT) SCANNERS are used to create a 30 image of a \nsolid object. This is based on TOMOGRAPHY technology which basically builds up \nan image of the solid object through a series oh·ery thin 'slices'. Together these \n20 'slices' make up a representation of the 30 solid object. \nEach slice is built up by use of X-rays, radio frequencies or gamma imaging; \nalthough a number of other methods exist. Each 'slice' is then stored as a digital \nimage in the computer memory. The whole of the solid object is represented \ndigitally in the computer memory. \nInput devices \n5 \nINP(JT AND OUTPUT DEVICES \nDepending on how the image is formed, the type of tomographic scanner can \nhave different names. For example: \n• X-rays \nCT scanners computerised tomography \n• radio frequencies \nMRI \nmagnetic resonance imaging \n• gamma rays \nSPECT \nsingle photon emission computed tomography. \nFigure 5.3 shows a simple example of how tomography works. \nX·raysou,ce \nFigure5.3 \n5.2.2 Barcode readers/scanners ® \n~~~::Sm \n\"sjice,\" - each \n\"sjice\"isstorl'dasa \ndigital image;nthe \n-\"'~ \nA barcode is a series of dark and ligln parallel lines of \\'arying thickness. 1l1e \nnumbers O to 9 are each represented by a unique series oflines. Various barcode \nmethods for representing these digits exist. The example we shall use adopts \ndifferent codes for digits appearing on the left and for digits appearing on the \nright (known as UPC (Universal Product Code ) \\'ersion A). \nThe actual left-hand and right-hand sides of the barcode are separated using \nguard bars. The structure of these guard bars is shown in Figure 5.4. Figure 5.5 \nis an example of a barcode showing the left-hand side and right-hand side and the \nthree sets of guard bars. \nEach digit is represented by bars of 1 to 4 blocks thick as shown in Figure 5.6. \nLeft.tland \nside of \nGu¥dbars \nFigure5.4 \n\"''\"\"' \nRi't!t;:'i\"d \nbarcode \nlight \n111.IIIJJIJlmJ~IIII \nThisshows lhe use ofthe guar<l barsseparntingtheleltlfomthe right. \nFigure5.5 \nFigure 5.6 \nRight.tlandside \n5.2 \nThe barcode to represent the number 5 4 3 0 5 2 would therefore be as shown in \nFigure 5.7. \nIIIJ I~ 11.11 ~ 1111,1 ~I~ I~ Ill \nFigur•5.7 \nEach digit is made up of two dark lines and two light lines. The width representing \neach digit is the same, thus the speed of scanning isn't important. The digits \non the left ha\\·e an odd number of dark elements and always begin with a light \nbar; the digits on the right have an even number of dark elements and always \nbegin with a dark bar. This arrangement allows a barcode to be scanned in any \ndirection. \nActivity 5.1 \n• UsingthedatainFigureS.6,designthebarcodeslor \ni 900340(threedigitsontheleh;threedigit5ontheright} \nii 12576648(fourdigitsontheleft;lourdigitsontheright) \n111 0588902918(fivedigitsontheleft;fiwdigit1ontheright). \nb Look at some barcodes on a variety of products and ..ee how Jllilny lit the above ~em; \nlorthosethatdoo't,trytodrawupatables.imilartothatinFigure5.6toshowthe \nbarrndeloreac:hdigit \nSo what happens when a barcodc is scanned? \n• TI1c barcodc is first read by a red laser or red LE D ( LIGHT EMITTING DIODE). \n• Light is reflected back off the barcodc; the dark areas reflect linlc or no light \nwhich allows the bars to be read. \n• The reflected light is read by sensors (photoelectric cells). \n• As the laser or LED light is scanned across the barcodc, a pancrn is generated \nwhich is converted into digital data - this allows the computer to understand \nthe barcodc. \n• For example: the digit '3' on the left generates the pattern L D D D D L D \n(where L - light and D - dark); this has the binary equivalent of O 1 1 1 1 0 1 \n(where L - O and D - 1). \nBarcodc readers arc most commonly found at the checkout in supermarkets. \nThere arc se\\·eral other input and output devices at the checkout: \nlnpuUoutputdevice How it isused \nke)1)ild \ntokey;nthenumbe,ofsameitemsbought;tokey inaw~t;tokey \n:::,=!:. uOOl'f the batcodeilit canootbe read by the barcode \nspeak'-\" \ntomakeabeep;ngsoundf'!-lerytimeabatcodeisreadcorrectt,,;butalso \ntomakeanothersoundifthereisanermrwhen,eadingthebarcode \np,inte, \ntop,intoutareceiptr.temised list \nm.,gne~c,tripe reade, to,ead the custome,\"s crediVdebitcard \ntos.elect itemsbytoucNnganic:oo(suchasfreshlruit\\M\\ichmaybesold \nloos.ewithoutpadaging) \nInput devices \n5 \nINP(JT AND OUTPUT DEVICES \nSo the barcode has been read, then what happens? \n• The barcodc number is looked up in the stock database (the barcodc is known \nas the KEY FIELD in the stock item record); this key field uniquely identifies each \nstock item. \n• \\Vhen the barcodc number is found, the stock item record is looked up. \n• The price and other stock item details are sent back to the checkout ( or POINT \nO F SALE TERMINAL (PQS)). \n• The number of stock items in the record is reduced by one each time the \nbarcodc is read. \n• This n,:,,11 value for number of stock items is written back to the stock item \nrecord. \n• The number of stock items is compared to the re-order level; if it is less than \nor equal to this value, more stock items arc automntical/y ordered. \n• Once an order for more stock items is generated, a flag is added to the record \nto stop re-ordering every time the stock item barcode is read. \n• When new stock items arrive, the stock l,:,,•els are updated in the database . \nAdvantages of using bar codes to the management include: \n• much easier and faster to change prices on stock items \n• much better, more up·to-date sales information/sales trends \n• no need to price e\\'ery stock item on the shelves (this reduces time and cost \nto the management) \n• allows for automatic stock control \n• possible to check customer buying habits more easily by linking barcodes to, for \nexample, customer loyalty cards. \nAdvantages of using bar codes to the customers include: \n• faster checkout queues (staff don't need to remember/look up prices of items) \n• errors in charging customers are reduced \n• the customer is given an itemised bill \n• cost savings can be passed on to the customer \n• better track of'sell by dates' so food should be fresher. \nTI1e barcode system is used in many other areas. For example, it can be utilised \nin libraries where barcodes arc used in books and on the borrower's library card. \nEvery time a book is taken out, the borrower is linked to the book automatically. \nThis allows automatic checking of when the book is due to be rernrned, for \nexample. \nActivity 5.2 \nFindoutmoreabouthowbarcodescanbeuIB!inalibrary.Considerthetypesollilesneeded \nand how the system can track where books are in the library, which books are out on loan, which \ncu1tomerha1borrowedabookandsoon. \nActivity 5.3 \nCarryoutsomeres&1rchandlindoutaboutasmanydillerentbarcodeapplicationsasyoucan \nTry to find out why barrndes are used in each applic.ation and determine the advantage of using \nthis type of technology. \n5.2 \n5.2.3 Quick response (QR) codes @ \nAnother type ofbarc.ode is the QUICK REsroNSE (QR) CODE. This is made up \nof a matrix of filled-in dark squares on a light background. \nFor example, the QR code in Figure 5.8 contains the message: 'computer \nscience textbook - CIE syllabus'. \nTo make a comparison, normal barcodcs (as described in Section 5.2.2 ) can \nhold up to 30 digits; QR codes can hold over 7000 digits. This obviously gives \ngreater scope for the storage of information. \nBecause of modern smart phones, which allow internet access on the mo\\·e, \nQR codes can be scanned anywhere. This allows ad\\·ertising of products on trains, \nbuses, shopping malls and many other places. By using the built·in camera facility \non modern phones and down.loading the appropriate application ( or app ), it is \npossible to read the QR code. The code may contain a website link or some form \nof advertising ( e.g. special offers on pizzas). \nFor example, the QR code in Figure 5.9 contains a phone number and an \nadvertisement for free pizzas if ordered today. On scanning the QR code, the \nphone number and ad\\·ertisement will appear on the mobile phone's screen. \nAdvantages ofQRcodes include: \n• there is no need for the user to write down or key in a website address; \nscanning the QR code does this automatically \n• QR codes can store website addressesfURLs that appear in magazines, trains, \nbuses or even on business cards, giving a very effective method of advertising. \n5.2.4 Dig ital cameras \nDigital cameras ha\\·e essentially replaced the more traditional camera that used \nfilm to record the photos. The film required de\\·eloping and then printing before \nthe photographer could see the result of their work. This made these cameras \nexpensive to operate since it wasn't JX)Ssible to delete unwanted photographs. \nModern digital cameras simply link to a computer system via a USE port or by \nusing Bluetooth (which enables wireless transfer of photographic files). \nThese cameras are controlled by a microprocessor which can automatically \ncarry out the following tasks: \n• adjust the shutter speed \n• focus the image automatically \n• operate the flash automatically \n• adjust the aperture size \n• adjust the size ofthe image \n• remove 'red eye' when the flash has been used \nand soon. \n•\n,·.l!J \nt \n~ \nI!],,. \nFigure5.8 \nFigure5.9 \nInput devices \nThe photograph is captured when light passes through the lens onto a light-\nfiguN 5.10 Digital came,a \nsensitive cell. This cell is made up of tiny elements known as pixels. TI1e number \nof pi'l:els determines the size of the file used to store the photograph ( e.g. a \n14-megapi'l:el camera will need 42 megabytes to store each raw (uncompressed) \nphotograph). By reducing the resolution to, for example, a jpeg image, the \n5 \nINP(JT AND OUTPUT DEVICES \nstorage reguirement is reduced to 4 megabytes (sec Section 6.2.3). The guality of \nthe photograph also depends on many other factors, such as: \n• the type of lens used \n• the lighting \nand soon. \n,\\1obile phones have caught up with digital cameras as regards number of \npixels. The drawback is usually JXX>r lens quality and limited memory for the \nstorage of photos. But this may all change in the next fe,11 years. \n5.2.5 Keyboards \nKL,'boards are by far the most common method used for data entry. They are \nused as the input device on computers, tablets, mobile phones and many other \nelectronic items. \nThe keyboard is connected to the computer either by using a USB connection \nor by wireless connection. In the case of tablets and mobile phones, the keyboard \nis often VIRTUAL or a type ofroucHSCREEN technology. \nAs expbincd in"
  },
  {
    "chapter": "Chapter 1, each character otl a keyboard has an ASCII value. Each",
    "text": "character pressed is crnwcrtcd into a digital signal, which the computer interprets. \nKeyboards arc a relatively slow method of data entry and are also prone to \nerrors. Bur they are probably still the easiest way to enter text into a computer. \nH owever, frcgucnt use of these devices can lead to injuries, such as RBPETITNE \nSTRAIN INJURY (RSI) in the hands and wrists. \nErgonomic keyOOards can help to overcome this problem - these have the keys \narranged differently as shown in Figure 5.12. They are also designed to give more \nsupport to the wrists and hands when doing a lot of typing. \n5.2.6 Pointing devices \nl11e selection of an application often requires the user to 'click' on an icon. \nSelection of the icon is usually done with a POINI\"ING DEVICE (such as a MOUSE \nor a TRACKERBAU..) or by using a touchscreen. \nThe mouse is probably still the most common JXJinting device and comes \nin various forms: \n• the more traditional type ,vith a mechanical ball arrangement; connected to the \ncomputer through a USB JXJft \n• the more modern type that use red LEDs to detect movement in the x-y \ndirection; these arc a type of optical mouse \n• mice that use either of tl1e above types of technology but use a wireless \nconnection to the computer. \nWhatever type of mouse is used it will rcguire an area of desk space to allow \nmovement. They often reguire a mouse mat since some surfaces, such as paper, \nprevent the correct operation of the device. Depending on the type of computer, \ntl1e mouse is fitted witl1 one or two buttons to allow for selection and otl1er \nfimctions. Many designs of mouse have a scroll wheel to allow rapid movement \nup and down the screen. \nTrackerballs are seen more often in an industrial environment - such as a \ncontrol room. Because they don't need to move, the trackerball doesn't need any \ndesk space or special surface. The operator is also less likely to suffer from injuries \nFigure5.11Keyboard \nFigure5.12E,gonomicke)O<lard \nFigure5.13T,a<l<erball \n5.2 \nsuch as RS I. A ball on the top of the trackerball is moved to control a cursor on \nthe screen. As with the mouse, buttons are used to select icons and to carry out \notherfimctions. \nMost laptop computers have a built-in T OUCH PAD. lbis contains a tactile \nsensor which allows the user to control a cursor by simply moving a finger over \nthe surface of the pad. Buttons to the left and right of the pad act in the same \nway as buttons on a mouse. H owever, by simply tapping the surface this acts \nas a ciuick method of selection on many touch pads. \n5.2.7 Microphones \nM icropho nes are used to input sound to a computer. For example: \n• doing a 'voice over' in a presentation \n• part of a speech recognition system \n• part of a voice recognition system \n• enabling a disabled person to communicate with a computer. \nMicropho nes are either built into the computer or are external devices connected \nthrough the USB port or using wireless connectivity. \nWhen a microphone picks up sound, a diaphragm vibrates producing an electric \nsignal. This signal goes to a sound card and is converted into digital values and \nstored in the computer. \nlfthe microphone is being used in a VOICE RBCOGN m ON system, the user's \nvoice is detected and then converted into digital. A few words spoken produce \na digital wave pattern. Software compares this wave pattern to wave patterns \nstored in memory to see if they match. If th<.,' match, then the person has been \ncorrectly identified. Only certain words can be used since the system is designed \nto recognise only a few key phrases (e.g. a user may be asked to say their name ). \nThis technology can be used in security systems. \nS PEEC H RECOGNITION is a different and more complex technology. This again \nuses a microphone to input words spoken by a user. But this time the software \ndoesn't try to recognise the person talking. The spoken words are recognised and \nshown on a screen, input into a word processor or used in other application. The \nbasic differences to voice recognition are described below. \n1 Suppose a person says the word ' H UT'; the sound card in the computer will \nconvert the sound wave into a digital form: \n....._ _~ :::::::: \nD;gitalvalueaftercooversioo \nFigure5.15 \n2 The software takes the digital image (shown in Figure 5.15 ) and breaks it up \ninto phonemes (these are the smallest elements that make up a language); in \nthis case ' H U H T'. \nInput devices \nFigure5.14Microphone \n5 \nINP(JT AND OUTPUT DEVICES \n3 These phonemes arc compared with words found in the built-in dictionary: \nfiguN5.1 6 \n4 The word ' H UT' would then be suggested by the software in whatever \napplication is being run. \n5 This, of course, is a very simple example and the whole concept of speech \nrecognition is \\·cry complex. In trying to recognise which words arc being \nspoken, the software has to take into account different dialects, different \naccents and so on. Just to indicate how difficult this is, consider the following \nwell-known example: \nThe two phrases: 'recognise speech' and 'wreak a nice beach', if spoken quickly, \narc almost identical. Using phonemes, they become: \n'r eh k ao g nay z / s p iy eh' and 'r eh k / ay /nays/ b iy eh' \nOne way round this is to 'train' the computer to understand a cross-section \nof people; but some problems arc difficult to rcsol\\-c. H uman beings have \nproblems \\\\~th dialects and accents; so it should come as no surprise that this \ncontinues to challenge the software developers of speech recognition systems. \nActivity 5.4 \nOe,;cribehowspeechrecognitioncouldbeusedto: \nii teachlanguageskillstopeoplewhohavedifficultyinlearning \nb teachapersontosaywordsinaloll.'ignlanguage \nBoth voice recognition and speech recognition can be used in various other \napplications. For example, \\'oicc recognition is used in cars to allow the dri\\·cr to \nsay commands: 'make warmer', 'switch on GPS' or 'open window'. Key words \nhave to be used so that the software can compare \\·oicc patterns with the limited \ndictionary of words already stored. These systems arc becoming increasingly \nsophisticated so that normal speech in the car doesn't trigger an unwanted \nresponse by the computer. Newer systems can also be set up to only respond to \ncommands from the driver. \nActivity 5.5 \nCoo1idertheplu'ieSandminu'ieSolulingvoicerecognitioninacar. lsitsaler?Forex.arnple,it \nmay allow a driver to re~nd to an email while drMng etc. Try to develop this argument and \ndrawavalidcondusionlromyourfindings \n5.2 \nInput devices \n5.2.8 Touchscreens \nTouchscreens are now a very common form of input device. TI1ey allow simple touch to \nlaunch an application or to carry out many ofthc functions of pointing devices such as a \nmouse. \nOne of the main uses of touchscrcen technology is in mobile phones. At present, there \nare three majOI\" types oftouchscn:en technologies applied to mobile phone screens: \n• capacitive \n• infra-red \n• resistive. \n\\Ve will consider how each of these technologies work and what their main benefits and \ndrawbacks are. \n• Thisismadeupofmanyla)\"'\"ol \nglassthatact likeacai,adror, \ncreatingelec!ricfieldsbetweeothe \nglassplate,;inlayers. \n- ~thetopgl.:ts,;layertltouched, \n:.:!.:\\:::~:' \n!ournedisde!e<minedbyan \nor.-bo.YdmicropmcesSO< \n• Thisisaml'dlJmrosttedmok,gy. \n• Saeenvtlibililyi,good.....,,;n \nstrongSIK'llight \n• ltpe<mitsmuttf-lOI.Chcapabiity. \n• Thesaeenisve,ydurable;ittal::es \namajofimpac!tob<eaktheglass \nFigure 5.17 \n5.2.9 Sensors © \nINFM-IIED(heatandoptkall \nHut-,en>itM! \n-~:=~ \n- Need,awa,mobject \n(e.g. finge,s)IOGl<f}' \nout an input \noperatioo \nOptical \n-::.t::1:.: \n- Usesao.,,,~of \nSl'O<OfS(in!heform \n~:Z~~~oo \n;:t'i!/1.e~cooolinate \n• Bo!hsyrtem:sallowmutti-touchcapabiities \n• Theoplical,ystemalb.vstheuseofba,e \nfi\"9'-\"',gkNedfinge\"orastylusforinput \n• 8o!hsy;tem:shavegoodsc\"\"-\"1durabilily;it \n!akeamajorirnpacttobreaktheglass \n• ltisrelati,Plye,:peo<ivetedloology. \n• Heat-';ensi\\Nesy;temonlyalowsb.arefingers \nrobeusedforinput(gk,,edfioger,orst~, \ntloo'twork) \n• Bothsy;tem:s(oplicalaodheat-seositwe)ha.... \ntaiflygoodscrerovisibilityinrooogsonlight \nfiguN5.18 \n• Thismakesuseofaoupperlaye<ol \npolyester(afoonolplastic}and \nabonomla)'l'lolgla'5 \n• Whentl>etoppofye<terlajoer,S \ntouched,thetoplayeraodthebonom \nlayercompleteaci-cuit \n• Signals are !hen sent out which are \n~r~.t~ ... m,;:;.;:;;i!':tes \nofw!ieretl>esc\"\"-\"1wastooc:hed \n• ltisrelaWPlyinexpensivetedmology. \n• ltispossi,letousebarelingers,glo,,ed \nfi\"9'-\"'ora,~\"'IOG1ffY001aoinJ11l! \noperatioo \n• Saerovislbilityispoorinmoog \nsunlight \n• ltdoesn'tperm~rnulti-touchca~~ty. \n·::;,mscr;: t~u;:~~ ~;:: !:en \nwea\"outthJOOqltime \nfiguN5.19 \nSENSORS are devices which read or measure physical properties. 1l1esc can include \ntemperature, pressure, acidity and so on. Real data is ANALOGUE in nature - this \nmeans it is constantly changing and doesn't have a discrete value. Analogue data usually \nreciuires some form of interpretation; for example, the temperature measurement on a \nmercury tl1ermomcter requires the user to look at tl1e height of the mercury to work \nout the temperature. The temperarnre can therefore have an infinite number of values \ndepending on the precision of how the height oftl1e mercury is measured. Equally an \nanalogue clock fuce requires the user to look at the hands on tl1e clock fucc. The area \nS\\vept out by the hands allows tl1e number of hours and minutes to be interpreted. There \nare many other examples. \n5 \nINP(JT AND OUTPUT DEVICES \nH owever, computers cannot make any sense of these physical quantities and \nthe data needs to be converted into a digital format. This is usually achieved by an \nANALOGUE TO DIGITAL CONVERTI!R (ADC). This device converts physical values into \ndiscrete digital values. \nAAalogoedata \nFigu,.5.20 \nOigitajdata \nWhen the computer is used to control devices, such as a motor or a valve, it is \nnecessary to USC a DIGITAL TO ANALOGUE CONVERTER (DAC) since these devices \nneed analogue data to operate in many cases. Frequently, an AcrUATOR is used in \nthese control applications. Although these arc technically output devices, tl1cy arc \nmentioned here since tl1cy arc an integral part of the control system. An actuator \nis an electromechanical device such as a relay, solenoid or motor. Note tl1at a \nsolenoid is an cxan1plc of a digital actuator; part of the device is connected to \na computer which opens and closes a circuit as required. \\Vhcn energised, tl1c \nsolenoid may operate a plunger or armature to control, for example, a fuel injection \nsystem. Other actuators, such as motors and valves, may require a DAC so that they \nreceive an electric current rather than a simple digital signal direct from the computer. \nTable 5.2 shows a number of common sensors and examples of applications that \nuse the nan1cd sensors. \nApn~cation \ntemperature \n• mntrnlacentulhea~ngsy,tem \n• mntrnVmooito< a chemical prnces, \n• mntrnVmooito< the temperature in a c,eenhouse \nmoisture/humidity \n• mntrnVmooito< the moisture fevel, in SO<l in a greenhouse \n• mntrnVmooito< the hooiiclity fevel, in the air in a g,reenhouse \no mor,j\\()(damfl\"'-\"Slevelsinanindustrialapplicatioo(e.g .. \nmooit()(moi,tureinap,l'nt,prayboothinacarlactory) \nli~t \n• switchstreeth~tingooatnightandoffduOOgtheday \n• mooi!()(/cootmlli<j,tlevelsinac,eenhouse \n• automatically switch on acar~headlightswhen itgetsdait \n• tumoothewindscreenwiper,onaca,automatically \n• detectintrudefSinaburgla,alatmsystem \n• (OUntpeopleenteri~iWingabuiiding \n• detectintrudefSinaburgla,alatmsystem \n• wei~thing,(e.g.checkthewei~tofavehide) \n• mooito,/cootmlaprocesswhefegaspressu,ei,important \n• r,kkupnoiselevel,(e.g.footstep,)inab<.xglarala,msystem \n• detectthenoiseofliquidsdriW,nginapipe \ngas(e.g. 0,()((0 2) • mooil()(polltrtionlevelsinafiveror intheair \n• measmeO,andCO,H'velsinagreenhouse \n• cheO::forC02 1eaksinapower,tation \npH \n• mooi!()(/cootmlac:idity/aik,-initylevel,in the SO<l in ~greenhouse \n• poUution/envimnmentalmooitoringinfivers \nmiKJrieticfield \n• anyilppicalionwt.eredetectiooofchangesinamagneticfield \nisrequired (e.g.inceUphor,e,.CDplayers.etc.) \n• usedinanti·kldbrakingsystemsinmoto<vehide, \n5.2 \nSensors are used in both monitoring and control applications. 1l1cre is a subtle \ndifference between how these two methods work: \nSellSOl'SsendsiCJOalslothe \nmiaopmcPSs.xk.omputer \nThesignals..-econvertedto \ndigital(ifnecl'S\"\")')usingan \nanaloguetodigitalcorwerte, \n(AOC) \nThecomputerhnoanprocessor \naoal)'5<-;lhedatareceiwdby \n<hec:kingrtagainststoredvaiUl'S \nThemicmprncesso<lcomputer \nhasnoeffectonwhatisbe;ng \nmonitored - itissimply \n'watchong'thep«xes, \nTheoutputlrnmthesystem \naffectsthenextsetofinputs \nMonitoring system \nCootfolsystem \nFigur• 5.21 \nExamples of monitoring include: \n• monitoring a patient in a hospital for vital signs such as heart rate, temperature, etc. \n• monitoring of intruders in a burglar alarm system \n• checking the temperature levels in a car engine \n• monitoring pollution levels in a river. \nExamples of control include: \n• turning street lights on at night and turning them off again during daylight \n• regulating the temperature in a central heating/ air conditioning system \n• changing the traffic lights at a road junction © \n• operating anti-lock brakes on a car when necessary \n• regulating the environment in a greenhouse. \nInput devices \n5 \nINP(JT AND OUTPUT DEVICES \n5.2.10 Monitoring applications \nBurglar alarm system \nAa,ustk \nlnfra-<ed \n•o= \nf'rp,;sure \nFigu,.5.22 \nA burglar alarm monitoring system will carry out the following actions: \n• The system is activated by keying in a password on a keypad. \n• The infra-red sensor picks up the movement of an intruder in the building. \n• The acoustic sensor picks up sounds such as footsteps or breaking glass. \n• The pressure sensor picks up the weight of an intruder coming through a door \nor through a window. \n• The sensor data is passed through an ADC if it is in an analogue form to \nproduce digital data. \n• The computer/microprocessor will sample the digital data coming from these \nsensors at a given frequency (e.g. every five seconds); the data is compared with \nthe stored values by the computer/microprocessor. \n• If any of the incoming data \\'alues are outside the acceptable range, then the \ncomputer sends a signal to: \n• a siren to sound the alarm, or \n• a light to start flashing. \n• A DAC is used ifthe devices need analogue values to operate them. \n• The alarm continues to sound/lights continue to flash until the system is reset \nwith a password. \nMonitoring of patients in a hospital \n• A mm1ber of sensors arc attached to the patient; these measure vital signs such \nas:temperan1re,heartrate, breathingrate,etc. \n• These sensors are all attached to a computer system. \n• The sensors constantly send data back to the computer system. \n• The computer san1ples the data at fre'luent intervals. \n• The range of acceptable \\'alues for each parameter is keyed in to the computer. \n• The computer compares the \\'alues from the sensors with those values keyed in. \n• If anything is out of the acceptable range, a signal is sent by the computer to \nsound an alarm. \n• If data from the sensors is \\vithin range, the values are shown in either graphical \nform on a screen and/or a digital read out. \n• Monitoring continues until the sensors are disconnected from the patient. \n5.2 \n5.2.11 Control applications \nControl of street lighting \nfigu N5.23 \nfigu N5.24 \nThis next scciuence shows how a microprocessor is used to control the operation \nof a street lamp. The lamp is fitted with a light sensor which constantly sends \ndata to the microprocessor. The data \\'alue from the sensor changes according to \nwhether it is sunnr, cloudy, raining or it is night time etc. \n• The light sensor sends data to the ADC interface. \n• lb.is digitises the data and sends it to the microprocessor. \n• The microprocessor samples the data every minute ( or at some other \nfrequency rate ). \n• If the data from the sensor< value stored in memory: \n• a signal is sent from the microprocessor to the street lamp \n• and the lamp is switched on. \n• The lamp sr:i.ys switched on for 30 minutes before the sensor readings are \nsampled again (this prevents the lamp flickering off and on during brief \nhcary cloud cover, for example ). \n• If the data from the sensor >• value stored in memory: \n• a signal is sent from the microprocessor to the street lamp \n• and the lamp is switched off. \n• 111c lamp stays switched off for 30 minutes before sensor readings arc sampled \nagain (this prevents the lamp flickering off and on during hcary cloud cover, for \nexample ). \nActivity 5.6 \nDraw a flow diagram to ,;how the steps in how a mkroprocessor controls the switching off and \non of a si-t lamp. Remember to include a method to stop the lamp switching on and off every \nfew seconds \nAnti-lock braking syste ms (o n cars) \nANTI -LOCK BRAKING SYSTEMS (ABS) on cars use magnetic field sensors to stop the \nwheels locking up on the car if the brakes have been applied too sharply. \n• When one of the car wheels rotates too slowly (i.e. it is locking up), a magnetic \nfield sensor sends data to a microprocessor. \n• 111c microprocessor checks the rotation speed of the other three wheels. \n• lfthcy arc different (i.e. rotating faster), the microprocessor sends a signal to \nthe braking system: \nInput devices \n5 \nINP(JT AND OUTPUT DEVICES \n• and the braking pressure to the affected wheel is reduced \n• the wheel's rotational speed is then increased to match the other wheels. \n• Checking the rotational speed using these magnetic field sensors is done several \ntimes a second and the braking pressure to all the wheels can be constantly \nchanging to prevent any of the wheels locking up under heavy braking; tills is \nfelt as a 'judder' on the brake pedal as tl1e braking system is constantly switched \noff and on to equalise the rotational speed of all four wheels. \n• If one of the wheels is rotating too quickly, braking pressure is increased to that \nwheel until it matches tl1e other three. \nActivity 5. 7 \nFind out more details about how the ABS system works and how it is modified in modem \nsystemssuchastractioncontrol \nlnvestigateotherusesofmagneticlieldseosor,; \n5.2.12 Interactive whiteboards \nInteractive whiteboards are devices that allow computer images to be displayed \non a whiteboard using a digital projector. They also allow a user to write on the \nwlllteboard and the text or drawings produced are then stored in an electronic \nform for later use. Basically the information wlllch is hand-drawn or hand-written \ncan be stored so notlllng from, for example, a meeting is lost. \nSuppose a new car has been designed and its image has been projected onto \ntl1e whiteboard from a computer-stored file. It is possible for this image to be \nannotated by adding labels, a description or even changes to the design for later \nuse. The annotated version can then be saved in an electronic form to allow \ntl1ese changes to be made. \nItwouldlookg,oodwithsom~ \nklrguwhulscrodtyre.s \nFigu,.5.25 \nw~ shooldputo \n.sunroofontht.cor \nNobompus \nmokesth~ cor \npronetodoioogt. \nThecarandallol \nthecommentsafld \nanootationsshown \nwouklbestored(in \n~~l~~r:!':t!!I ;: \ntheneetingwoold \nbe automatically \ncaptured \nIt is also possible to nm software on the whiteboard and users can interact \nby simply using their fingers on the whiteboard surface. This allows tl1e user \nto demonstrate all of the features of the software to, for example, a group of \npeople at a meeting or even a demonstration of a new game in a shopping \nmall. Any application that runs on a computer can be used on an interactive \nwhiteboard. It is even possible to surf the net, annotate a spreadsheet or \n5.3 \ndemonstrate a drawing package, for example, in real time. The whole \naudience can see what is happening and even become actively i1woked in the \ndemonstration. \n5.3 Output devices \n5.3.1 lnkjet printers \nINKJET PRINTERS are essentially made up of: \n• a print head which consists of nozzles which spray droplets of ink on to the \npaper to form characters \n• an ink cartridge or cartridges; either a group of cartridges for each colour ( blue, \nyellow and magenta) and a black cartridge or one single cartridge containing all \nthree colours+ black (Note: some systems use six colours.) \n• a stepper motor and belt which moves the print head assembly across the page \nfrom side to side \n• a paper feed which automatically feeds the printer with pages as they are reguircd. \nThe ink droplets arc produced currently using n\\·o different technologies. \n• Thermal bubble: tiny resistors create localised heat which makes the ink \nvaporise. 111is causes the ink to form a tiny bubble; as the bubble expands, \nsome of the ink is ejected from the print head onto the paper. When the bubble \ncollapses, a small vacuum is created which allows fresh ink to be drawn into the \nprint head. This continues until the printing cyde is completed. \n• Piezoelectric: a crystal is located at the back of the ink reservoir for each nozzle. \nThe crystal is given a tiny electric charge which makes it vibrate. This vibration \nforces ink to be ejected onto the paper; at the same time more ink is drawn in \nfor further printing. \n\\Vhen a user wishes to print a docwnent using an inkjet printer, the following \nsequence of events takes place. Whatever teclmology is used, the basic steps in the \nprinting process are the same. \nSta<:1einprocHs DHaiptionofwhathapp•n• \nl \nThedatafromthedocumentissenttoa printe< oiv..-\n~~~:drive, ensures thatthedataisin a fom\\at that the chosen pmter can \nAched<:ismadebytheprinterclrivertoensurethatthed>osenprinte,isavai\\ab!eto \nprint(e.g.is j\\busy.isitoffline.isitootofjnk.anclsooo) \nThe data is then sent to the printer anditisst\"'edin a temp<><a,ymemorykoownas a \nprinterbulf..- (sees.ectioo4.3) \nAsheetolpape,isthenfedintothemainbodyoltheprinte,;asenso,detectswhether \npape,isavailable in thepaperleedlfay - i/;tisoot ofpaper(orthepape,isjammed) \nthen an errn, message is sent bad to the computer \nAsthesheetofpaperisfedlhf~theprinte,.theprintheadma,eslfomsidetoside \nacr=thepaperpr;ntingthetextor;mage;thefoorinkcoloorsare'f)fayedintheir \nexi>damoontstop,oducetheoesi,edlinalrolou, \nAttheendofeachfullpassoltheprinthead.thepape,isadvanc:edve,yslgltlyto \nallowthenextlinetobeprinted;thiscontinuesuntilthewholep;,gehasbeenprinted \ntlthen>isJnOfedataintheprinte,buffe,.then!hewholeprocessfmmst.,.ge5is \n,epeateduntilthebufferisfinaltyempty \nOnc:etheprinterbufferisempty. theprinterseodsan interrupt (seeSection4.3)to!he \nprocesso,in!hecomputer;thisisa,equestlorJnOfedatatobesenttotheprinte,;the \nwt.oleprocesscontim,esuntilthewhaeolthedor:umenthasbeenprinted \nOutput devices \nFigure5.261nkjetprinte, \n5 \nINP(JT AND OUTPUT DEVICES \n5.3.2 Laser printers \nLASER PRINTERS differ greatly from inkjet printers in the way they print pages. \nl11ey use dry powder ink rather than liCJuid ink and make use of the properties \nof static electricity to produce the text and images. Unlike inkjet printers, \nlaser printers print the whole page in one go (inkjet printers print the page line \nbyline). \nTheir advantage is the speed at which they can carry out large print jobs \n(e.g. 2000 leaflets) and the fact that they don't run out of ink halfway \nthrough. \nThe following table describes briefly the stages that occur when a document \nis printed using a laser printer: \nSU •inproc .. s \nc .. c,iptionofwhathappens \n1 \nThedatafromthedocumentissenttoa ?\"int0<dii\"\"' \n~~t::i diiver em<XPSltlatthe data isina lormatthatlhe chosenprinte< can \nAcl>eckismadebytheprinte,drive<toensurettlatthed,osenprintefisavailableto \nprint(e.9.isitbos,:isitoffline.isitoutofink.andsoon) \nThedataisthensenttolheprinte<anditisstoredinalemporarym<>mClfYkno.vnasa \npnntefbuffN (refe<toSec!ion4.3fllfmoredetails) \nThestartofthe printing procPSsk,vONes a princngdrum t,e;nggiltffia JX)SJttv, ~\n: \nasthisdrumrotates.alaserbeamisscannedacrossitremcMngthepositivechargein \nce,tainareas;thisleaves neg;,liYefy ch~go,d areaswhichexactlymatchthetexVim.,.ges \nolthepagetobeprinted \nThedrumisthenooatedwithpositivelyctlargedrotu(powderedink);sinc:ethetone, \nispositivelycharged.itonlystidstolhenegatJVelychargedpa,tsoftheclrum \nAnegativelyctlargedsheetofpaperisthenrolledOYe<!hedrum \nThe toner on the drum nowstids tolhe pape,to pmdoce an exactrnpyoflhe page \nsenttolheprintef \nThepape,linallygoeslhmugh~luSl'IIM>ichisasetoll>eatedrolle,s;thel>eatmelts \ntheinksothatitf,xPSpe,manentlytothepaper \nAtthevef\"jend.adischargelampr \nitreadytoprintthenextp.:,ge \nalltheek>ctricchilfgefromthedrummaking \nApp li cations of inkjet and laser printe rs \nThe choice of whether to use an inkjct printer or laser printer depends on \nwhich fcamres make it the most appropriate output device for the given \napplication. \nINKJET PRINTERS are best for one-off photos or where only a few pages of good \nquality, colour printing arc needed; the small ink cartridges or small paper trays \nwould not be an issue with such applications. \nLASER PRINTERS produce high quality printouts and arc very fast when making \nmultiple copies of a document; any application that needs high-volume printing \n(in colour or monochrome) would choose the laser printer ( for example, producing \na large number of high quality flyers or ix,sters for ad\\·crtising) - they have two \nadvantages: they ha\\·c large toner cartridges and large paper trays ( often holding \nmore than a ream of paper). \nFigure5.27Lue,printef \n5.3 \nActivity 5.8 \nFind out how the operation of colour laser printers differ,; from the operation of monochrome \nlaser printers \n5.3.3 3D printers @ \n30 PRINTERS are primarily used in COMPUTER·AIDBD DESIGN (CAD) \napplications. \nThey can produce solid objects which actually work. The solid object is built \nup layer by layer (refer to Section 5.2.l for more details) using materials such as \npowdered resin, (X)Wdered metal, paper or ceramic powder. \nThe motorcycle in Figure 5.29 was made using an industrial 3D printer. It was \nmade from many layers (0.1 mm thick) of powdered metal using a technology \nknown as BINDER 30 PRINTING. \nThe following describes some of the features of 3D printing: \n• Various types of 3D printers exist; they range from the size of a microwave oven \nup to the size of a small car. \n• 30 printers use ADDITIVE manufacturing (i.e. the object is built up layer \nby layer); this is in sharp contrast to the more traditional method of \nSUBTRACTIVE manufacturing (i.e. removal of material to make the object ). \nFor example, making a statue using a 30 printer would involve building it \nup layer by layer using powdered stone until the final object was formed. \nThe subtractive method would im·olve car\\'ing the statue out of solid stone \n(i.e. remo\\'ing the stone not required ) until the final item was produced. \nSimilarly, CNC machining removes metal to form an object; 30 printing \nwould produce the same item by building up the object from layers of \npowdered metal. \n• Direct 30 printing uses inkjet technology; a print head can move left: to right \nas in a normal printer. H owever, the print head can also move up and down to \nbuild up the layers of an object. \n• Binder 30 printing is similar to direct 30 printing. H owe\\·er, this method \nuses two passes for each of the layers; the first pass sprays dry powder and \nthen on the second pass a binder ( a type of glue ) is sprayed to form a solid \nlayer. \n• Newer technologies are using lasers and UV light to harden liquid polymers; \nthis further increases the diversity of products which can be made. \nOutput devices \nFigure5.283Dprinter \nFigure5.29 Moto<cyde \n5 \nINP(JT AND OUTPUT DEVICES \nHow to create a solid object using a 3D printer \nl11crc arc a number of steps in the process of producing an object using these \n30 printers. The steps arc summarised in Figure 5.30. \nAdesignismadeusingrnmpuler·aideddesi(jl\\(CAO)softwa,e \nThefiflilliseddrill<ingisimpo<tedintosomespec:ialsoftwarethat \nprep,aresitinalormatwhkhisunde,stoodbythe3Dprinter \nThe3Dprinterissetuptoallowthesolidobjecttobemade \nThe,ojidobjectisbuiltuplayerbylayer(oltenonly0.1m'll lhid); \nthiscantal<eseveralhours.dependingoothethid<nessolthe \nlaym. thematerialusedandthesizeofthefiflillobject \nTheobjectis,ema,edfmmtheprinterandisthenp<epared;lor \nexampH'.someuseajeliy.lii::esupportwhid\\needstobewashed \nawaybyimme\"\"\"1inwater.somerequi,etherema,alofexc= \nplasticpowderandothersrequi\"etheruttingawayoluro.ised \nmaterial;inmanycases,tti;~~astobeleftto\"ru,e\"lora \nFigu,.5.30 \nUses of 3D printing \n30 printing is regarded as being possibly the next ' industrial revolution' since it \nwill change the manufacturing methods in many industries. The following list is \njust a glimpse into what we know can be made using these printers; in the years to \ncome, this list will probably fill an entire book: \n• prosthetic limbs made to exactly fit the recipient \n• items to all0\\11 precision rcconstructi\\·c surgery ( e.g. facial reconstruction \nfollowing an accident); the parts made by this technique arc more precise in \ntheir design since they arc made from exact scatUJing of the skull \n• in aerospace, manufacturers arc looking at making wings and other parts \nusing 30 technology; the bonus will be lightweight precision parts \n• in fashion and art - 30 printing allows new creative ideas to be dc\\·clopcd \n• making parts for items no longer in production, e.g. suspension parts for a \nvintage car. \nl11csc arc just a few ofthc exciting applications which make use of this new \ntechnology. \nActivity 5.9 \nDo a search on the internet to find new and inno~ative 30 printer applications \nHave a class discussion on how these printers could herald the start of a new 'industrial \nreYOlution' \n5.3 \n5.3.4 2D and 3D cutters \nA three-dimensional ( 3D) laser cutter works in a similar way to a two-dimensional \n(2D ) cutter. The main difference is that the 3D cutter can recognise an object in \nthe x-y-z direction rather than just x-y. \n3D laser cutters can cut the following materials: \n• glass \n• polymer \n• crystal \n• wood. \n• metal \nVery complex designs can be cut since the cutters are controlled by computers \nand \\·cry sophisticated software. \nA 3D cutter can cut beyond the surface of the material and produce \\'cry \nintricate designs. \nIt is interesting to contrast this method of shaping objects with 3D printers, \nalthough it is true to say that not all the materials which can undergo 3D cutting \ncan be used in 30 printing methods. \n5.3.5 Actuators \nThese arc co\\·cred in detail in Section 5.2.9. AcruATORS arc used in many control \napplications invol\\'ing sensors and d<:'lices such as ADC and DAC. \n5.3.6 Loudspeakers/headphones \nSound is produced from a computer by passing the digital data through a DIGITAL \nTO ANALOGUE CONVERTER (DAC) and then through an AMPLIFIER; finally the \nsound emerges from a (loud)sPBAKER. \nThe sound is produced by voltage differences \\'ibrating a cone in the speaker \nhousing at different freciuencies and amplitudes: \nFigur•5.31 \nThe rate at which the DAC can translate the digital output into analogue \\'oltages \nis known as the SAMPLING RATE. lfthe DAC is a 16·bitde'lice, then it can \naccept numbers between +32767 (216 -1 ) and - 32768 (216); the digital value \ncontaining all zeros is ignored. The speed at which these w.lues can be converted \nis the sampling rate. \nMost textbooks indicate that the standard sampling rate is 44 100 samples per \nsecond. This basically means that the the DAC can convert 44 100 \\'alues in the \nrange +32 767 to - 32 768 e\\·ery second. \nSuppose a CD is being produced to contain a number of music tracks. Each piece \nof music is sampled 44100 rimes a second. Each sample is 16 bits. Since the music \nis in stereo this also needs to be taken into consideration. \nThe abo\\'e information means that 44 100 x 2 x 16 - 1411200 bits per second \nsampling (the number '2' is used in the calculation to account for the sound being \nin stereo). \nSince l byte - 8 bits, this eciuates to l 411200/8 bytes per second. \nThis works out at 176400 bytes per second. \nOutput devices \n5 \nINP(JT AND OUTPUT DEVICES \nActivity 5.10 \na Calculate how much memory is needed to store a four-minute music track using the number \nofbytesneededpersecondfromabove \nConvert your answer into megabytes (using the data from"
  },
  {
    "chapter": "Chapter 1)",
    "text": "b If the CO has a capacity of 800 megabytes, haw many lour-minute songs could be stored on \nthe CO? \n5.3.7 LCD and LED monitors \n111c days of the old cathode-ray monitors arc almost gone. Most monitors and \ntelevision sets these days arc made using LIQUID CRYSTAL DISPLAY/DIODE (LCD) \ntechnology. \nThis means that the front layer of the monitor is made up liquid crystal diodes; \nthese tiny diodes arc grouped together in threes or fours which arc known as \npixels (picture elements). The three colours which arc grouped together use red , \ngreen and blue diodes. Those systems that use groups of four include a yellow \ndiode - this is said to make the colours more vivid. \nModern LCD monitors arc back lit using LIGHI\" EMITTING DIODE (LED) \ntechnology. TI1is gives the image better contrast and brightness. Before the use \nof LEDs, LCD monitors used a cold cathode fluorescent lamp (CCFL) as the \nback.lighting method. \nEssentially, CCFL uses two fluorescent tubes behind the LCD screen which \nsupplies the light source. \\Vhcn LEDs arc used, a matrix of tiny LEDs is used \nbehind the LCD screen. Because LCD doesn't emit any light, some form of \nback-lit technology needs to be used. \nLEDs ha\\·c become increasingly more popular because of a number of \nadvantages over older CCFL tcclmology: \n• LEDs reach their maximum brigl1tncss almost immediately ( there is no need \nto 'warm up' before reaching full efficiency) \n• LEDs give a whiter light which sharpens the image and make the colours \nappear more vivid; CCFL had a sliglnly ycllmvish tint \n• LEDs produce a briglncr ligln which improves the colour definition \n• monitors using LED teclmology arc much thinner than monitors using CCFL \ntechnology \n• LEDs last almost indefinitely; this makes the technology more reliable and \nmeans a more consistent product \n• LEDs consume very little power which means they produce less heat as well as \nusing less energy. \nFurnrc LED technology is making USC of ORGANIC LIG HT EMJ'IT ING DIODES \n(OLEDs). These use organic materials (made up of carbon compounds) to \ncreate semi-conductors which arc very flexible. Organic films arc sandwiched \nbetween two charged electrodes ( one is a metallic CATH ODE and the other a \nglass ANODE) . \\Vhcn an electric field is applied to the clcc.trodcs they gi\\·c off \nlight. This means that no form of backliglning is required. This allows for \\·cry \nthin screens . \n• \n5.3 \nIt also means that there is no longer a need to use \nLCD technology, since OLED is a self-contained \nsystem. \nAs can be seen in Figure 5.32, OLEDs allow the \nscreen to be curved. This ensures a good picmrc \nfrom any angle. \nBut the important aspect of the technology is how \nthin this makes the screen. It is now possible, using \nOLED technology, to bend screens to any shape. If \nthis is adopted by mobile phone manufacturers, it will \nbe possible to develop phones which can wrap around \nyour wrist - much like a watch strap. \nImagine screens so thin that they can be folded up \nand placed in your pocket until th<.-y are needed. Or \nFiguN 5_32 \nhow about using folding OLED displays attached to \nfabrics creating 'smart' clothing (this could be used on \noutdoor survi\\'al clothing where an integrated circuit, \nmobile phone, GPS receiver and OLED display could \nall be se\\,~l into the clothing)? \nAdvantages of using OLED compared with existing LEDs and LCDs include: \n• the plastic, organic layers of an OLED are thinner, lighter and more flexible \nthan the crystal structures used in LEDs or LCDs \n• the light-emitting layers of an OLED are lighter; OLED layers can be made \nfrom plastic rather than the glass used in LED and LCD screens \n• OLEDs give a brighter light than LEDs \n• OLEDs do not reciuire backlighting like LCD screens - OLEDs generate their \nown light \n• since OLEDs reciuire no back.lighting, they use much less power than LCD \nscreens (most of the LCD power is used todo the back.lighting); this is very \nimportant in battery-operated devices such as mobile phones \n• since OLEDs are essentially plastics, they can be made into large, thin sheets \n(this means they could be used on large advertising boards in airports, subways, \nand so on) \n• OLEDs have a very large field of view, about 170 degrees, which makes them \nideal for use in television sets and for ad\\·ertising screens. \nActivity 5.11 \nCarry out some research into OLEO technology (then! all! numerous internet sites to help you} \nandanswerthefollowingquestions: \na Why all! inkjet printers helping to keep down the cost of OLED screens? \nb Howarediffell!ntcoloursgeoeratedusingOLEDtechnology? \nc Howisthebrightnessolthedisplaycontrolled? \nd OLEDs n!fresh 1000 timl'S faster than LCDs; why would this be an advantage? Where could it \nbeusedtogre;itellect? \nOutput devices \n5 \nINP(JT AND OUTPUT DEVICES \nLCD/LED screens are used on many hand-held devices with touchscrecns, such \nas mobile phones, tablets and game consoles. The technology behind such screens \nwas discussed at great length in Section 5.2.8. \n,\\1odern LCD screens are very thin and very lightweight and are \\·ery \nrcs1x:msive to touch. Obviously, the m.·w technologies described above will change \nthe way we use these hand-held devices in the very near future. \n5.3.8 Light projectors \nl11ere are two common types of light projector: \n• digital light projectors (DLP) \n• LCD projectors. \nProjectors are used to project computer output onto larger screens or even onto \ninteractive whiteboards. They are often used in presentations and in multimedia \napplications. \nThe following two sections describe the basic differences behind these \nprojector technologies. \nDigital Light Projectors (D LP) \nl11e USC of millions of micro mirrors on a small DIGITAL LIGHT PROJBCT\"OR (D LP) \nchip is key to how these devic.cs work. \nThe number of micro mirrors and the way they are arranged on the OLP \nchip determines the resolution of the digital image. When the micro mirrors \ntilt towards the light source, they are ON. When the micro mirrors tilt away \nfrom the light source, they are OFF. This creates a light or dark pi.'l:el on the \nprojection screen. The micro mirrors can switch on or off several thousand \ntimes a second creating various gn.1' shades - typically 1024 grey shades can be \nproduced (for example, if the mirror switc.hes on more often than it s,\\~tches \n?ff, it will produce a lighter shade of grey). This is known as the grey scale \nimage. \nA bright white light source ( e.g. from a xenon bulb) passes through a colour \nfilter on its way to the OLP chip. The white light is split into the primary colours: \nred, green and blue - the DLP projector can create over 16 million different \ncolours. l11e ON and OFF states of each micro mirror are linked with colours \nfrom the filter to produce the coloured image. \nThe whole concept is a little like reverse black and white photography. With \nOLP technology, the grey scales arc interpreted as colours rather than grey \nrepresenting colours as used in photography. \n5.3 \nLCD projectors \nThese are older technology than DLP. Essentially a high-intensity beam oflight \npasses through an LCD display and then onto a screen. How this works in \nprinciple is described below. \n• A powerful beam of white light is generated from a bulb or LED inside the \nprojector body. \n• TI1is beam oflight is then sent to a group of chromatic-coated mirrors; these \nreflect the light back at different wavelengths. \n• When the white light hits these mirrors, the refh:cted light has wavelengths \ncorresponding to red, green and blue light components. \n• These three different coloured light components pass through three LCD \nscreens; these screens show the image to be projected as millions of pixels \nin a grey scale. \n• When the coloured light passes through the LCD screens, a red, green and blue \n\\'ersion of the grey image emerges. \n• 1l1ese images arc then combined using a special prism to produce a full colour \nimage - this final image consists of millions of colours ( each shade of grey in \nthe original image produces a different shade in each ofthe colour images). \n• Finally the image passes through the projector lens onto a screen. \nOutput devices \n® Memory and data storage \nlnthischapteryouwilllearnabout: \ne filelormatssuchasMIOl,MP3andjpeg \ne filernmpresskmtechniques \n• primary,secondaryandoff-linestorage \ne magnetic,optkalandsolid-st.-itemedia \n6.1 Introduction \nThere are many file formats used to store data, be this text, images or sound, in \ncomputer systems. This chapter will consider how file compression is used to sa\\'e \nmemory when storing different types of files. \nAll computer systems ha\\·e primary memory and secondary memory storage. \n111c main technologies used arc magnetic, optical and solid state. Storage devices \nwhich use each of these technologies will be described later in this chapter, \ntogether with a number of applications. \n6.2 File formats \nA number of different file formats are used in computer systems. We will look at \nthe following ones: \n• Musical Instrument Digital lntcrfu.cc (M IDI) \n• MP3 \n• MP4 \n• jpcg \n• text and number format. \n6.2.1 Musical Instrument Digit al Interface (MIDI) \nMUSICAL INSTRUMENT DIGITAL INTERPACE (i\\UDI) is always associated with the \nstorage of music files. H owever, MI D I files arc not music and don't contain any \nsounds; they arc \\·cry different to, for example, MP3 files. MIDI is essentially a \ncommunications protocol that allows electronic musical instruments to interact \nwith each other. The ,\\1IDI protocol uses 8 -bit serial transmission with one start \nbit and one stop bit, and is therefore asynchronous (sec Section 2.2.3). \nA MI D I file consists of a list of commands that instruct a device ( for example, \nan electronic organ, sound card in a computer or in a mobile phone) how to \nproduce a particular sound or musical note. Each MIDI command has a specific \nsequence of bytes. The first byte is the status byte - this informs the MIDI device \nwhat function to perform. Encoded in the status byte is the MIDI channel. MIDI \noperates on 16 different channels, which arc numbered Oto 15. \nExamples of MIDI commands include: \n• note on/off: this indicates that a key (on an electronic keyboard ) has been \npressed/released to produce/stop producing a musical note \n• kL-y pressure: this indicates how hard the key has been pressed ( this could indicate \nloudness of the music note or whether any vibrato has been used, and so on). \nTwo additional bytes arc required, a PITCH BITE, which tells the MID I device \nwhich note to play, and a VELOCITY BYIB, which tells the device how loud to play \nthe note. \\Vhcn music or sound is recorded on a computer system, these MIDI \nmessages arc saved in a file which is recognised by the file extension .mid. \n0 \n6.1 \nIf this .mid file is played back through a musical instrument, such asan \nelectronic keyboard, the music will be played back in an identical way to the \noriginal. The whole piece of music will have been stored as a series of commands \nbut no actual musical notes. This makes it a \\·cry versatile file structure, since \nthe same file could be fed back through a different electronic instrument, such \nas an electric guitar, with different effects to the original. However, to play \nback through an instrument such as a guitar would need the use of SEQUENCER \nSOFIWARE, since the MIDI files wouldn't be recognised in their 'raw' form. \nBoth the electronic instruments and the computer need a MIDI interface to allow \nthem to 'talk' to each other. It was mentioned earlier that the M ID I operates on \n16 channels. In fact the computer can send data out on all 16 MIDI channels at \nthe same time. For example, 16 MI D I devices, each set up for a different MID I \nchannel, could be connected to the computer. Each device could be playing a \nseparate line in a song from the sequencer software, effectively creating an electronic \norchestra. This implementation is being used more and more today in the \nrecording studio, by major orchestras and in musical scores used in films. \nBecause MIDI files don't contain any audio tracks, their size, compared with \nan MP3 file, is considerably smaller. For example, a 10 megabyte MP3 file only \nrequires about 10 kilobyte file size when using the M ID I format. This makes \nthem ideal for devices where memory is an issue; for example, storing ring tones \non a mobile phone. \n6.2.2 MPEG-3 (MP3) and MPEG-4 (MP4) \ni\\-IPEG-3 (MP3) uses technology known as AUDIO COMPRESSION to convert music \nand other sounds into an MP3 file format. Essentially, this compression teclmology \nwill reduce the size of a normal music file by about 90 per cent. For example, an \n80 megabyte music CD can be reduced to 8 megabytes using MP3 technology. \nMP3 files are used in MP3 players, computers or mobile phones. Files can be \ndownloaded from the internet, or CDs can be converted to MP3 format. The CD \nfiles are converted using FILE COMPRESSION software. \\Vhilst the music quality can \nnever match the 'foll' version found on a CD , the quality is satisfactory for most \ngeneral purposes. \nBut how can the original music file be reduced by 90 per cent whilst still \nretaining most of the music quality? This is done using file compression \nalgorithms which use PERCEPTUAL MUSIC SHAPING; this essentially removes sounds \nthat the human ear can't hear properly. For example, if two sounds are played at \nthe same time, only the louder one can be heard by the ear, so the softer sound \nis eliminated. This means that certain parts ofthe music. can be removed without \naffecting the quality too much. \nMP3 files use what is known as a LOSSY FORMAT (see Section 6.3.2 ) since part \nof the original file is lost following the compression algorithm. This means that \nthe original file can't be put back together again. H owe\\·er, even the quality of \n,\\lP3 files can be different since it depends on the BIT RATE - this is the number \nof bits per second used when creating the file. Bit rates are roughly between 80 \nand 320 kilobits per second; usually 200 or higher gives a sound quality close to \na normal CD. \nMPEG-4 (MP4) files are slightly different to MP3 files. This format allows \nthe storage of multimedia files rather than just sound. Music, videos, photos \nand animation can all be stored in the MP4 format. Videos, for example, could \nbe streamed over the internet using the M P4 format without losing any real \ndiscernable quality. \nFile formats \n6 \nMEMORY AND DATA STORAGE \nActivity 6.1 \nA CO is being used to store music Each minute's worth of recording takes up 12 megabytes \na TheCOcontainsninetrackswhicharethelollowinglength{inminutes):3,5,6,4,5,2, \n7, 8, 8. How much memory would these nine tracks occupy on theC07 \nb If the CO was downloaded to a computer and then all the tracks were put through an MP3 \ncompression algorithm, how much memory would the nine tracks now occupy {you may \nas.sumea90percentfilereductionsize)7 \nc Find the average size of each of the MP3 tracks, and then estimate how many MP3 files could \nbe stored on an 800 megabyte CO. \n6.2.3 Joint Photographic Experts Group (jpeg) files \nLook at the following fo·c photographs of the same car wheel: \nFigu,.6. 1 \nTI1e resolution of the photographs is reduced from A to E. Photographs A and B \narc very sharp whilst photograph Dis very fuzzy and Eis almost unrecognisable. \nThis is the result of changing the number of PIXELS per centimetre used to store \nthe image (that is, reducing the PicrURE RESOLu n oN). \n\\Vhcn a photographic file undergoes file compression, the size of the file is \nreduced. The trade -off for this reduc.ed file size is reduced quality of the image. \nOne of the file formats used to reduce photographic file sizes is known as JPEG. \nThis is another example of lossy file compression. As with M P3 format, once \nthe image is subjected to the jpeg compression algorithm, a new file is formed \nand the original file can no longer be constructed. Jpeg will reduce the RAW \nBITMAP image by a factor of between 5 and 15 depending on the guality of the \noriginal. \nAn image that is 2048 pixels wide and 1536 pixels high is egual to 2048 x 1536 pixels; \nin other words, 3 145 728 piJ:els. This is often referred to as a 3-megapixcl image \n(although it is obviously slightly larger). A raw bionap can often be referred to as a TIFF \nor BMl' image (file extension .TIP or .BJ\\ilP). The file size ofthis in1,1ge is detemtined \nby the number of pixels. In the previous example, a 3-megapixel image would be \n3 megapixels x 3 colours. 1n other words, 9 megab~'tes ( each pixel occupies 3 bytes \nbecause. it is made up of the tlm:e main colours: red, green and blue). TIFF and B,\\ll' \nare the highest image guality because, rnilike jpeg, tl1<.-y are not in a compressed format. \nThe same image stored in jpeg format would probably occupy benveen \n0.6 megabytes and 1.8 megab)'tes. \nJpeg relies on certain properties of the human eye and, up to a ixiint, a certain \namount of file compression can take place without any real loss of guality. The \nhuman eye is limited in its ability to detect very slight differences in brightness \n• \n6.1 \nand in colour hues. For example, some computer imaging software boasts that \nit can produce o\\·er 40 million different colours - the human eye is only able to \ndifferentiate about 10 million colours. \nActivity 6.2 \na An image is 1200pixelsby1600pixels.Calculate: \nI the total number of pixels in the original image \nII thenumberofbytesoccupiedbythislile \nIii thelilesizeolthejpegimage(inkilobytes)iftheoriginal \nimagewasreducedbyafactoro/8 \nb A second image is 3072 pixels by 2304 pixels. Cakulate: \nI the total number of pixels in the original image \nIi thenumberofbytesoccupiedbythislile \nIii the file size of the jpeg image (in megabytes) if the original \nimagewasreducedbyafactorofS \nIv How many uncompres,;ed files of the size calculated in p;1rt \nW) could be stored on a 4-gigabyte memory card? \nv Howmanyrnmpressedfilesofthesizecalculatedinp;irt(iii} \nrnuld be stored oo the same 4-gigabyte memory card? \nActivity 6.3 \nThe very sharp image A in Figure 6.1 was blown up to about lix \ntimes its size: \nFigur•6.2 \nFindoutwhythisiniliallysharpimagenowappearsluzzyatthi1 \nmagnification \nHowcanthi1problembeovercome? \nFile formats \n6 \nMEMORY AND DATA STORAGE \n6.2.4 Text and number file formats \nText and numbers can be stored in a number of formats. Text is usually stored \nin an ASCII format (see Section 1.6.4). \n\\Vhcn using spreadsheets or databases, for example, numbers can be stored \nin a number of different formats: \n• real, e.g. 2.71678 \n• integer, e.g. 3 \n• date, e.g. 12/08/2016 \n• time, e.g. 19:45:50 \n• currency, e.g. R$ 15.50 \nIt is important that the correct format is chosen if some form of processing is \nto be done. If number files undergo any form of file compression, then it tends \nto be lossless. Since it \\'ery important that none of the information/data is lost \n(sec Section 6.3 ). \nIf ASCII format is used to store text on a file, then the table in Figure 1.7 is \nused to store each of the characters. For example, the word COi\\1.PUTER would \nbe stored as either: \n67 79 77 80 85 84 69 82 or %43 %4F %40 %50 %55 %54 %45 %52 \n(the first code is in denary and the second in hexadecimal). \nText files can also undergo file compression. These use complex algorithms that \nwork on redundancy or repeated sections of words (e.g. OU in yOUr, cOUntry \nor mOUntain). The following section shows, in \\'ery simple terms, how this \ncould work: \nThe phrase 'THIS SECTION SHOWS YOU HOW THIS WOULD \n\\VORK' consists of35 memory units (ignoring spaces). Repeated words, such as \n'THIS' could be put into a data dictionary and be replaced by 'l '. Repeated word \nsections, such as ' HO\\V' and 'OU' could be replaced by the numbers '2' and '3'. \nOur phrase then becomes ' I SECTION S2S Y3 2 I W3LD WORK'. \nAgain, ignoring spaces, this compressed form now uses only 23 memory \nunits. This is about a 33% sa\\'ing in file size. Ob\\'iously if whole pages are to be \nstored, then repeated words and word sections become even more numerous. \nCompression algorithms take many things into account when creating these \ncompressed files - but this is outside the scope of this textbook. \nThis is clearly an example oflosslcss compression since the original phrase \ncan be reformed if necessary using the data dictionary and compressed file. \n6.3 Lossless and lossy file compression \n6.3.1 Lossless file compression \nWith LOSSLESS FILE COMPRESSION, all the data bits from the original file arc \nrcconstmctcd when the file is again uncompressed. This is particularly important \nfor files where loss of any data would be disastrous - for example, a spreadsheet file. \n6.3.2 Lossy file compression \nLossy FILE COMPRESSION is very different to lossless file compression. With this \ntechnique, the file compression algorithm eliminates unnecessary bits of data as \nseen in M P3 and jpcg formats. \n6.4 \nIt is impossible to get the original file back once it is compressed. This is why \nit is chosen for files where removing certain bits doesn't detract from the quality. \n6.4 Memory and storage \nMemory and storage devices can be split up into three distinct groups: \n• primary memory \n• secondary storage \n• off-line storage. \nFigure 6.3 shows how these all link together: \n[ \nSe<ondarystorag• I \nj Harcf.diskdrive(HD0) ·1J _. \nI Sohd-stateO\"ive(SSD) II ~ \nFigure 6.3 \n\\Ve will now consider each of the three parts in the diagram. \n6.4.1 Primary memory \nRandom Access Memory (RA M) \nThe fcamrcs ofllANDOM AccBSS MEMORY (RAM) are: \nOff-line storage \nI DVDK:OandDVO.RAM I \nlllu-raydisk \nI us~=~kf I \nI Removableha,dOO\\le I \n• it is volatilc/temix,rary memory (the contents of the memory are lost when the \npower to the RAM is turned off) \n• it is used to store: \n• data, \n• filcs,or \n• part of the operating system that are currently in use \n• it can be written to or read from and the contents of the memory can be \nchanged. \nIn general, the larger the size ofRAt\\1 the faster the computer will operate. In \nreality, the RM1 never mns out of memory; it continues to operate but just gets \nslower and slower. As the RAM becomes full, the processor has to continually \naccess the hard disk drive to overwrite old data on RAM with new data. By \nincreasing the RAt\\1 size, the number of times this access operation is carried out \nis reduced, making the computer run faster. \nRM1 is much faster to write to or read from than other types of memory; \nbut its main drawback is its volatility. \nMemory and storage \nFigure6.4 RAM \n6 \nMEMORY AND DATA STORAGE \nBuffers were introduced in"
  },
  {
    "chapter": "Chapter 4 (see Section 4.3). These often use",
    "text": "RAt\\1 since they need to be a fast memory and the data only needs to be held \ntemporarily. As outlined earlier, buffers allow the processor to do other tasks \nwhile slower peripheral devices send data to and receive data from the computer. \nThere arc currently two types of RAt\\1 technology: \n• dynamic ram (DRAM ) \n• static RAM (SRAt\\1 ). \nDyn am ic RAM (DRAM) \nEach DYNAMIC RAM (D RAA-I) chip consists of a number of transistors and \ncapacitors. Each of these parts is tiny since a single RAt\\1 chip will contain \nmillions of transistors and capacitors. The function of each part is: \n• capacitor - this holds the bits ofinfonnation (0 or 1) \n• transistor - this acts like a S\\llitch; it allows tl1e chip control circuitry to read the \ncapacitor or change the capacitor's value. \nThis type of RAt\\1 needs to be constantly REFRESH ED ( that is, the capacitor needs \nto be recharged every 15 microsecondsothcnvise it would lose its value). lfit \nwasn't refreshed, the capacitor's charge would leak away very guickly, leaving \ne\\·erycapacitorwith the value 0. \nDRAMs have a number of advantages over SRAi\\1s: \n• they are much less expensi\\•e to manufacrnrc tl1an SRAM \n• they consume less JX>WCr than SRM1 \n• they have a higher storage capacity than SRAM. \nStatic RAM (SRAM) \nA big difference between SRAt\\1 and DRAM is that this type of memory doesn't \nneed to be constantly refreshed. \nIt makes use of'flip flops' which hold each bit of memory. \nSRAM is much faster than DRAt\\l when it comes to data access (typically, \naccess rime for SRAM is 25 nanoseconds and for DRAM is 60 nanoseconds). \nDRAM is the most common type of RAM used in computers, but where \nabsolute speed is essential, then SRAM is tl1e preferred technology. For example, \ntl1e processor's MEMORY CACH E is tl1e high speed portion of the memory; it is \neffective because most programs access tl1e same data or instructions many times. \nBy keeping as much of this information as JX)Ssible in SRAM, the computer avoids \nhaving to access the slower DRAM. \nRead Only Memory (ROM) \nThe main features of READ ONLY MEMORY (ROM) can be summarised as follows: \n• they arc non-volatile/permanent memories (tl1e contents of the memory \nremain even when tl1e power to the ROM is rnrncd oft) \n• they are often used to store the start-up instructions when the computer is first \nswitched on (for example, ROM might store the basic input/output system \n( BIOS )) \n• the data or contents of a ROM chip can only be read; they cannot be changed. \nFigure6.5DRAM \nFigure6.6SRAM \n6.4 \nApplicatio n \n\\Ve will now consider an application, other than a computer, where both RAM. \nand ROM chips are used. \nA remote-controlled toy car has a circuitry which contains both RAM and \nROM chips. The remote control is a hand-held device. \nWe will consider the function of each type of memory independently: \n• ROM \n• stores the factory settings such as remote control frequencies \n• stores the 'start-up' routines when the to)' car is first switched on \n• stores the set routines; for example, how the buttons on the hand-held device \ncontrol turning left, acceleration, stopping, and so on. \n• RAM \n• the user may wish to program in their own routines; these new instructions \nwould be stored in the RAM. chip \n• the RAM. chip will store the data/instructions recei\\·cd from the remote \ncontrol unit. \nActivity 6.4 \nDescribe how ROM and RAM chips could be used in the following devices \na a microwave oven \nb arelrigerator \nc a remote-controlled model aeroplane; the movement of the aeroplane \nisrnntrolledbyahand-helddevice \n6.4.2 Secondary storage \nHard Disk Drives (HDD) \nHARD DISK DRIVES (HOD) are probably still the most common method used to \nstore data on a computer. \nData is stored in a digital format on the magnetic surfaces of the disks ( or \nplatters, as they arc frequently called). The hard disk drive will have a number of \nplatters which can spin at about 7000 times a second. A number of read-write \nheads can access all of the surfaces in the disk drive. Normally each platter will \nha\\·e two surfaces which can be used to store the data. These read-write heads \ncan move very quickly - typically tl1ey can move from the centre of the disk to \nthe edge of the disk (and back again) 50 times a second. \nData is stored on the surface in sectors and tracks ( see Figure 6.8 on next page). \nMemory and storage \nA sector on a given track will contain a fixed number of bytes. \nFigur• 6.7 \nUnfortunately, hard disk drives have very slow data access when compared to, \nfor example, RAt\\1. Many applications require the read-write heads to constantly \nseek for the correct blocks of data; this means a large number of head movements. \nThe effects of LATENCY then become very significant. Luency is defined as the \ntime it takes for a specific block of data on a data track to rotate around to the \nread- write head. \nUsers will sometimes notice the effect of latency when they see messages such \nas 'please wait' or, at its worst, 'not responding'. \n6 \nMEMORY AND DATA STORAGE \nSolid-state Drives (SSD) \nLatency is an issue in HDDs as described earlier. SOLID-STATE \nDRIVES (SSD) remove this issue considerably. They have no \nmoving parts and all data is retrie\\·ed at the same rate. They \ndon't rely on magnetic properties; the most common type \nof solid-state storage devices store data by controlling the \nmovement of electrons within NANO chips. The data is stored \nas Os and ls in millions of tiny transistors within the chip. This \neffectively produces a non-volatile rewritable memory. \nH owever, a number of solid-state storage devices sometin1es \nuse ELE,CI\"RONICALLY ERASABLE PROGRAMMABLE READ-ONLY \nMEMORY (EEPROM) technology. The main difference is the \nuse ofNORchips rather than NANO. This makes them faster \nin operation but devices using EE PROM are considerably \nmore expensive than those that use NAND technology. \nFigu,..6.8 \nEEPROM also allows data to be read or erased in single bytes at a time. Use of \nNANO only allows blocks of data to be read or erased. This makes EE PROM \ntechnology more useful in certain applications where data needs to be accessed or \nerased in byte-sized chunks. \nBecause of the cost implications, the majority of solid-state storage devices use \nNANO technology. The two types arc usually distinguished by the terms FLASH \n(use NANO) and EEPROM (use NOR). \nSo what are the main benefits ofusingSSD rather than HOD? The main \nbenefits of SSDs are summarised below: \n• they are more reliable (no moving parts to go wrong) \n• they are considerably lighter (which makes them suitable for laptops) \n• they don't have to 'get up to speed' before they work properly \n• they have a lower power consumption \n• they run much cooler than HDDs (these last two points again make them very \nsuitable for laptop computers) \n• because they have no moving parts, they are \\·cry thin \n• data access is considerably faster than HOD. \n111c main drawback of SSD is the questionable longevity of the technology. Most \nsolid state storage devices are conservati\\·ely rated at only 20 GB write operations \nper day o\\·er a three-year period - this is known as SSD endurance. For this \nreason, SSD teclmology is not used in servers, for example, where a huge number \nof write operations take place e\\·ery day. H owever, this issue is being addressed by \na mm1ber of manufacturers to improve the durability of these solid-state systems. \n6.4.3 Off-line storage \nOff-line storage includes: \n• CD/DVD/DVD-RAM (optical storage systems) \n• Blu-ray disks (optical storage systems) \n• USB flash memory/memory sticks/SD-XD cards (solid state storage systems) \n• removable/external hard disk drives (magnetic storage systems). \n6.4 \nCD/DVD disks \nCDs and DVDS are described as OPTICAL STORAGE DEVICES. Laser light is used to \nread data and to write data in the surface ofthc disk. \nMemory and storage \nBoth CDs and DVDs use a thin layer of metal alloy or light-scnsiti\\·e organic (I) \ndye to store the data. As can be seen in Figure 6.9, both systems use a single, spiral \ntrack which runs from the centre of the disk to the edge. \nThe data is stored in 'pits' and 'bumps' on the spiral track. A red laser is used \nto read and write the data. CDs and DVDs can be designated R (write once only) \nor RW (can be writt~n t~ or rea_d from many times)._ \n. \n-\nDVD technology is sliglnly different to that used m CDs. One of the mam \ndifferences is the use of DUAL-LAYERING which considerably increases the storage \nFigur• 6.9 \ncapacity. Basically, this means that there are mu individual recording layers. Two \nlayers of a standard DVD arc joined together with a transparent (ix,lycarbonatc ) \nspacer, and a very thin reflector is also sandwiched between the two layers. \nReading and writing of the second layer is done by a red laser focusing at a \nfraction of a millimetre difference compared to the first layer. \npolycarbonate lay'-\" \nlase,readslayer2 \nFigur• 6.10 \nStandard, single layer DVDs still have a larger storage capacity than CDs because \nthe 'pit' size and track width arc both smaller. This means that more data can be \nstored on the DVD surface. DVDs use lasers with a wa\\·clcngth of650 nanometres; \nCDs use lasers with a wavelength of 780 nanometres. The shorter the wa\\·clcngth \nof the laser light, the greater the storage capacity of the medium. \nDVD-RA M \nDVD·RAA-1 uses a very different technology to CDs and DVDs. TI1cy ha\\'c the \nfollowing features: \n• Instead of a single, spiral track, they use a number of concentric tracks (sec \nFigure 6.11 ). \n• Use of concentric tracks allows simultaneous read and write operations to take \nplace. \n• TI1cyallow numerous read and write operations (up to 100000 times) and \nha\\'c great longevity ( o\\'cr 30 years) which makes them ideal for archiving. \nBlu-ray disks \nB LU·RAY DISKS arc another example of optical storage media. H owever, they arc \nfundan1cntally different to DVDs in their construction and in the way they carry \nout read~writc operations. \nThe main differences arc: \n• a blue laser, rather than a red laser, is used to carry out \nread and write operations; the wa\\'clcngth of blue light is \nonly 405 nanometres ( compared to 650 nm for red ligln) \nFigure6. 11 \nFigur•6.12 \n6 \nMEMORY AND DATA STORAGE \n• using blue laser light means that the 'pits' and 'bumps' can be much smaller; \nconsequently, Blu-ray can store up to fi\\·c times more data than normal DVD \n• Blu-rayuscs a single 1.1 mm thick polycarbonate disk; normal DVDs use a \nsandwich of two 0.6 mm thick disks \n• using two sandwiched layers can cause BIREFRINGENCE (light is refracted into \nnvo separate beams causing reading errors); because Blu-ray uses only one layer, \nthe disks don't suffer from birefringence \n• Blu-ray disks automatically come witl1 a secure encryption system which helps \nto pn.·vcnt piracy and copyright infringement. \nTable 6.1 summarises the main differences between CDs, DVDs and Blu-ray. \nDisk type \nWavelength of \nTrackpitch(distance \nlaser light \nbetween tracks) \nsin~1.2mm \n1.60µm \n....k,,-,rbooatelave, \ntwo0.6mm \n0.74µm \nnnlur,IOO(\\atelay.,\" \nlllu·ray \nsin~l.lmm \nO.JOµm \noolvca!booatelaye, \n(Note: nm - JQ\"\"9 metres and pm - JQ-6 metres. ) \nAll these optical storage media arc used as back-up systems (for photos, music \nand multimedia files). This also means that CDs and DVDs can be used to \ntransfer files between computers. Manufacturers often supply their software using \nCDs and DVDs. When the software is supplied in this way, the disk is usually in a \nread-only format. \nThe most common use of DVD and Blu-rayisthe supply ofmovics or games. \n111c memory capacity of CDs isn't big enough to store most movics. \nThe future of optica l media \nIn recent times both the CD and DVD arc showing signs ofbecoming obsolete. \nMany computer systems now come with USB connectors only and no DVD or \nCD drive. The main method oftransfcrring files between devices has become tl1c \nflash memory. Many people now store all tl1cir music in the following ways: \n• on hard disk drive systems (set up as sound systems as shown in Figure 6.13) \n• in i\\11'3 format on: \n• a computer/tablet \n• tl1cir mobile phone \n• a portable music player ( such as iPodlll) \n• using tl1e 'cloud' to store all their files so they can access tl1cir music from \nanywhere in the world \n• by 'streaming' their music from the internet; provided the user has an internet \nconnection, they can access music tl1rough a laptop computer, mobile phone, \ntablet or any other receiving device. \nIt is also a similar story for movics where streaming is becoming increasingly more \ncommon. Many television sets are now set up as 'smart' TVs - this means it is \nnow possible to stream movics or television programmes ON DEMAND witlmut the \nneed for any DVD or Blu-ray players. In effect, the television set has become the \ncentral computer witl1 a link to the internet using wireless connection . \n• \nFigure6.13 \n6.4 \nFloppy disks met the same fate in the early twenty-first century. H ow often do \nyou see floppy disks nowadays? It is very likely that CDs and DVDs will meet the \nsame fate and will be replaced by one of the systems described above or \nsomething entirely new. \nActivity 6.5 \nDo some research, using this book and the internet, to find out all the dillerrot way,;. to store \nmusiclilesandmovieliles \nDraw a table and show all the benefits and drav'ibac:k.l of each of the methods yoo have identified \nUSB fl ash me mo ries \nMemory and storage \nM EMORY STICKS/FLASH MEMORIES (also known as pen drives) use solid-state \ntechnology (see Figure 6.14 ). \nThey usually connect to a computer through the USB port (see Section 2.2.4). 4j\n\" \nm?'!esi~i~:~1: :~:a:;:::~ ~~:\\!~:f:~i1::r~1:~:~~~~1~::!~:,~:~~~;::i::n n;~:e \n\\ ~-.' • , .. \nbe used as small back-up devices for music or photo files, for example. \nComplex or expensive software, such as an Expert System, often uses memory \nsticks as a DONGLE. 111c dongle contains additional files which arc needed to nm \nthe software. \\Vithout this dongle, the software won't work properly. It therefore \nprevents illegal or unauthorised use of the software, and also prevents copying of \nFigure 6.14 \nthe software since, without the dongle, it is useless. \nDigital cameras (see Section 5.2.4) use a slightly different form of solid-state \nmemory, known as XD (cXtrcmc Digital) or SD (Secure Digital) cards. The \ntechnology is essentially the same as memory sticks. These memory cards allow \nphotos to be tr.1.nsfcrred from camera to computer via the USB port. Many \nprinters and computers also ha\\·c card slots allowing the device to read the \nmemory card directly. \nEach memory card is made up ofNAND chips (see Section 6.4.2) and, as with \nall solid-state memories, there are no moving parts. \nAll solid-state memories need to be treated with some care. If they arc removed \nfrom a device before being made safe (for example, while still in the middle ofa \nread- write operation), data on the memory card or stick can be corrupted. In \nextreme cases, the memory card or stick become totally unusable. It is essential to \nwait for the message: 'it is now safe to rcmo\\·e your device' if plugged into a \ncomputer. \\Vith mobile phones or digital cameras, it is usually advisable to switch \nthem offbcfore removal oftl1e card. \n6 \nMEMORY AND DATA STORAGE \nRemovable hard disk drives \nREMOVABLE HARD DISK DRIVES are essentially HDD but can be connected to the \ncomputer using one of the USB ixirts. In this way, they can be used as a back-up \ndevice or as another way of transferring files between computers. \n6.5 How to estimate the size of a file \nEstimating the size ofa text file is rclati\\·cly straightforward. In"
  },
  {
    "chapter": "Chapter 1 we",
    "text": "introduced the idea of ASCII code. Each character from the keyboard has a value \nofl byte. \nSuppose we typed in the following message: \nThis is text from the computer science text book \nand then sa\\·cd it under the filcnamc 'samplc_tcxt_for_book'. If we then looked \nat the properties ofthc file just sa\\'cd, we would sec: \nIJ' __ .... _ .. _,..,.._ .. \n-\n~ \n~n·-r-- _ \n..J \njust stored \nFigu,.6.15 \nIf we count the number of characters in the text t)'pcd in, we get the number 48. \nTI1is exactly matches the file size shown in the screcnshot in Figure 6.15 - so each \ncharacter equals I byte. \\Ve can therefore use tills to cstin1atc the size of a text \nfile. Obviously tl1crc arc other codes stored with tl1c file which make its real size \nslightly different, but we aren't concerned about tl1at in tills section of the book. \nEarlier on in the chapter we looked at file sizes for photos and for sound. \nTI1is is obviously a little more complex, but we saw that one pixel, for example, \noccupies 3 bytes of memory. \nSuppose we imported the photograph shown in Figure 6.16 into a document. \nFigu,.6.16 \n6.5 \nLooking at the properties of the photograph, we find this: \nI '\"-\n~~-:--:· \n-- (i] -\"\"Wmd \n~ \nL.oc-.c \nC\\-\n'°\"\"'\\'1-,\"\"\"-\"• \n---+-Filesizeis318kilobytl's \n,.,,,.,.,.,,..,.,=,...., .. 1 \nlortheactualpictureand \n~Jobytesf0<therodes \nFigur• 6.17 \nThe photograph was 424 by 256 pixels which confirms the file size of \n325 632 bytes (318 kilobytes). \nActivity 6.6 \na UsingNotepad,typeinthefollowingme5Silge \nThis text should have a file size of over 100 \nbytes. We can check this by saving the file \nHow to estimate the size of a file \nand then looking at the file properties. \nSaveyourlileandtheolookatitspropertiesandfindoutthe lilesizeolthetextyoutypedin. \nWasitthevalueyouexpected? \nb lmportaphotointoawordprocessorandrnec:ktheoliginalfilesizeagainstthelilesizeol \nthe document. Then import about 3K of text and recheck the file size of the new document \nWasthefile,;izeasyoupredicted? \nActivity 6. 7 \nEstimatethesizeolalileloreacholthelollowing \na Textfilernntaining256character.; \nb Word processor document containing 1000 character.; and a =all image which \nis 256 >< 256 pixels in size (aswme an extra 14KB for other document fe;itures) \nc Adataba..eistornntainapernm'1nameandtheiraddress \nI Decide the maximum number of characters you would need to input a name \nand an address. \nIi Estimate the maximum size of file needed to store the name and address. \nd Asecuritysystemrnntainsapassword{16diaracter.;long),ausername{20diarilderslong), \nasmallphoto(2S6x640pixelsinsize}andasecurityquestion(upto72character.;long} \nEstimatethefilesizeneededtostoreall thisdata \n0 High-and low-level languages \nlnthischapteryouwilllearnabout: \ne programminglanguages \n• high-levellanguages \n• low-levellanguages \n• translators \n• compilers \n• interpreter,; \n• assemblers \n7.1 Introduction \nPeople use many different languages to communicate with each other. In order \nfor two people to understand each other they need to speak the same language \nor another person, an interpreter, is needed to translate from one language to \nthe other language. Programmers use many different programming languages to \ncommunicate with computers. Computers only ' understand' their own machine \ncode. A program needs to be translated into machine code before it can be \n' understood' by a computer. \n7.2 Programming languages \n7.2.1 What is a program? \nPrograms are our way of telling a computer what to do, how to do it and when \nto do it. This enables a single computer to perform many different types of task. \nA computer can be used to stream videos, write reJX>rts, provide weather forecasts \nand many, many other jobs. \nAn example of a simple task that can be performed by a computer is the \nprovision of a multiplication tables test. Figure 7. 1 shows a simple program to set \nthis up and Figure 7.2 shows an example of the test in use. \nFigure7.2Proc_,am inuse \n0 \n7.2 \nActivity 7.1 \nFind at least ten different tas.ks that computer programs perform in your school \nA COMPurER PROGRAM is a list of instructions that enable a computer to perform \na specific task. Computer programs can be written in high-k·vel languages or low-\nlevel languages, depending on the task to be performed and the computer to be \nused. Most programmers write programs in high-le\\'el languages. \n7.2.2 High-level languages \nHigh-level languages enable a programmer to focus on the problem to be solved \nand require no knowledge ofthe hardware and instruction set of the computer \nthat will use the program. Many high-level programming languages are portable \nand can be used on different types of computer. \nH igh-level languages are designed with programmers in mind; programming \nstatements are easier to understand than those written in a low-level language. \nThis means that programs written in a high-level language are easier to: \n• read and understand as the language used is closer to human language \n• write in a shorter time \n• debug at the development stage \n• maintain once in use. \nThe following snippet of program to add two numbers together is a single \nprogram statement written in a typical high-le\\·el language. It shows how easy \nit is to understand what is happening in a high-level language program: \n::~~~::::;:;::::i.i:i.::~!~~~ii-:::::;:::~~i~~~~~:~:;.::: :··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··:··, \nThere are many different high-level programming languages in use today \nincluding C++, Delphi, Java, Pascal, Python, Visual Basic and many more. \nOnce a programmer has learnt the techni'lues of programming in any high-level \nlanguage, these can be transferred to working in other high-level languages. \nActivity 7 .2 \nHigh-level programming languages are x1id to be problem Dfieoted. What type of problems \nare the languages named above used for? Find out about five more high-level languages \nName eadi programming language and find out what it is used for. \n7.2.3 Low-level languages \nLow-level languages relate to the specific architecture and hardware of a particular \ntype of computer. Low-level languages can refer to machine code, the binary \ninstructions that a computer understands, or an assembly language that needs \nto be translated into machine code. \nAssembly lang uages \nFe,,11 programmers write programs in an assembly language. Those progranuncrs \nwho do, do so for the following reasons: \n• to make use of special hardware \n• to make use of special machine-dependent instructions \n• to write code that doesn't take up much space in primary memory \n• to write code that performs a task \\·cry quickly. \nProgramming languages \n7 \nHIGH- AND LOW-LEVEL LANGUAGES \nThe following snippet of program to add two numbers together is written \nin a typical assembly language and consists of three statements: \nIn order to understand this program the programmer needs to know that \n• LDA means load the value of the variable into the accumulator \n• ADD means add the value of another variable to the value stored in the \naccumulator \n• STO means replace the value of the variable by the value stored in the \naccumulator. \nActivity 7 .3 \nFind out about two assembly languages. Name each assembly language and find out what type \nolcomputeriti1usedf0f. \nMachine code \nProgrammers do not usually write in machine code as it is difficult to understand \nand it can be complicated to manage data manipulation and storage. \nThe following snippet of program to add two numbers together is written in \ntypical machine code, shown in both hexadecimal and binary, and consists of \nthree statements: \nI: : :::: ::::::::1 \n0 Hnadec1mal \nBinary \n• \nFigu,.7.3 \nAs you can sec, this is not easy to understand in binary! Machine code is usually \nshown in hexadecimal (sec Section 1.5). \nActivity 7 .4 \nFind out about two different types of machine code. Name each chip set the machine rnde \nisusedlorandlindthecode1f0flo.-id,.-iddandstore \n7.3 Translators \nComputer programs can exist in several forms. \nPrograms are written by humans in a form that people who arc trained as \ncomputer programmers can understand. In order to be used by a computer, \nprograms need to be translated into the binary instructions, or machine code , \nthat the computer understands. H umans find it very difficult to read binary \n(hexadecimal is easier to understand) and computers can only perform operations \nwritten in binary. \n7.3 \nFigure 7.4T,amlatioo \nA program must be translated into binary before a computer can use it; this is \ndone by a utility program called a translator. There are several types of translator \nprogram in use; each one performs a different task. \nCompilers \nA COMPILER is a computer program that translates a program written in a high-\nlevel language ( HLL) into machine code so that it can be directly used by a \ncomputer to perform a required task. Once a program is compiled the machine \ncode can be used again and again to perform the same task without \nrecompilation. \nThe high-level program statement \n!Sum :• FirstNumber + SecondNumber \n···-·········-···-····-··········-·-·-········-·-·-·······-·-·····-··--·····-·-·· \nbecomes the following machine code instructions when translated \nInterpreters \nAn INTERPRETER is a computer program that reads a statement from a program \nwritten in a high-level language, performs the action specified and then docs \nthe same with the next statement and so on. \nAssemb lers \nAn AS.SEMBLER is a computer program that translates a program written in \nan assembly language into machine code so that it can be directly used by a \ncomputer to perform a required task. Once a program is assembled the machine \ncode can be used again and again to perform the same task without re-assembly. \nTranslators \n7 \nHIGH- AND LOW-LEVEL LANGUAGES \nThe assembly language program statements \nbecome the following machine code instructions when translated \ni OOOl \n00010010 \n· 0100 \n00010011 \n•oooo \n00011010 \n·------·-·-·-·-·-·-·-·-·-·-·-·-·-·-·-·-·-·-·-····-····-···-·-·-···-····-···-·-·-···--·---·-----·---·----·-·-···-· \nTable71Surrrnaryoftrans!atiooprograms \nCompiler \nlnt .. preter \nTransiatPSahi~levellanguage \nExecutPSahi~levellaogoage \nT,aoslatesaJow.levellanguage \nprogram into ma.mine rnde \nprogram a statement at a ~me \nprogram into madline rode \nAnexecutablefileolmachinerode Noexerutilblefileo/mad,;necode Anexl'CUtablefieolmachinecode \nis produced \nis prOWCed \nis produced \nOne h\"]h~evel lang~ statement One ho~-~vel language program \nOne klw~evel langua.ge statement \n~::::'.::;.:=;al \n~ta!':;'~;~:=:.:~:~ \n~.::;,:s1i;,,~~:,\"\"\" \nCompiledplO<Jfamsareused \nwithoutthecompilPr \nlnte,pretedpmgramsrannotbe \nusedwilhouttheinterp<ete,. \nA compiled program is usually \nAn interpreter is often used w+>en a An assembled program is llSUally \ndistributedforgeneralllSI' \nprogram is being developed \ndistributedlorgene,aluse \n7.4 What happens when things go wrong? \nAs programs are written by humans, they may contain errors. TI1ere are several \ndifferent types of error. A SYNTAX ERROR is where a program statement doesn't \nobey the rules of the programming language. A program cannot be translated if \nit contains syntax errors. A LOGIC ERROR is where the program doesn't do what \nthe programmer wanted it to do. Logic errors are found when a program is \nbeing run. \n7.4.1 Syntax errors \nWhen a program is being compiled, if any syntax errors are found no translated \nprogram is produced. Instead, a list of all the errors in the whole program is \nproduced. The programmer corrects these errors and recompiles the program. \n\\\\'hen a program is being interpreted, the interpreter performs the actions \nspecified by each statement until a syntax error is found. The programmer is \nthen alerted to the place in the program where the error was found. The error \nis corrected by the programmer and the interpretation continues until the next \nerror is found or the task is completed. \n7.4.2 Logic errors \nWhen a program is being run, ifit doesn't do what it should do there is a logic \nerror. TI1cse can be found by tracing what the program does and using test data \nwith expected results - sec"
  },
  {
    "chapter": "Chapter 9.",
    "text": "7.4 \nWhat happens when things go wrong? \n7.4.3 Using an Integrated/Interactive Development \nEnvironment (IDE) \n,\\ilost high-level programming languages offer the use ofan IDE for program \nde\\·elopmcnt. This contains an editor with an interpreter and/or compiler \ntogether with debugging tools, which can impro\\·e the speed of program \nde\\'elopmcnt. \n&le16it-~ .... c.,t; .... w-n1-i,.;, \nPyt .• on , . , . a 1~, . , . a ,c<10.co,o.ne,, , -,. ,o >OH, 10,>s, n) [J<SC v . H aa ,a b>t [< \n• \n;,, I .. . . . \n.- .. . 11 \n•\n• \ni\n. \nFigur• 7.51'ythonlDE \nActivity 7.5 \nHavealookatthedevelopmentenvironmentyouareusinglorprogramming \nWhat facilities are offered to help with program development? \n7 \nHIGH- AND LOW-LEVEL LANGUAGES \nEnd-of-chapter questions \nl Use the words below to complete the following \nassembler \ncompiler \ninterpreter \nTo translate a program written in a high-le\\·el \nlanguage, you can use a ___ \nor an \n___ \n. To translate a program written in a \nlow-level language you must use an ___ \n. \n2 \nTable7.2 \nProgram A \nRRADFi n t,Second \nFin t, -\nFin t \n• Se cond \nProgramB \na \\Vhich program is easier to understand? \nb Whyisiteasiertounderstand? \nc Which program is written in a high-k·vel \nlanguage? \n3 Give three advantages of writing a program in a \nhigh-level language rather than using a low-level \nlanguage. \n4 Give three advantages of writing a program in a \nlow-le\\'el language rather than using a high-level \nlanguage. \n5 Explain what a com piler docs and what an \ninterpreter does. In your explanation include a \ndescription of the differences between them. \n6 Choose which type of translator you would use \nto de\\·elop a program written in a high-level \nprogramming language. Give three reasons to \nsupportyourcl10ice . \n• \n7 Look at these two pieces of code: \nA \nCLC \nLDX #0 \nLoop: LDA A, X \nABC B, X \nSTA C, X \nCPX #16 \nBNE loop \nB \nFOR loop • 1 TO 4 \nINPUT Number!, Number2 \nSum -\nNumber! + Number2 \nPrint Sum \na Which of these pieces of code is written in a \nhigh-le\\'el language? \n[l] \nb Give o ne benefit of writing code in a high-level \nlanguage. \n[l] \nc Give o ne benefit of writing code in a low-level \nlanguage. \n[l] \nd H igh-level languages can be compiled or \ninterpreted. \nGi\\·c two differences between a compiler and an \ninterpreter. \n[2] \nCambridge !GCSE Computer Studies 7010/0420 \nPaper 12 Ql3 June 2012 \n® Security and ethics \nlnthischapteryouwinle.-imabout: \n• keeping data safe from acddental or malkious damage \n• keepingdatasafelromunauthorisedusl'!'S \n• use of pa=rds, firewalls, proxy 51'rvers, SSL, ns and encryption \ne risksposedbyphishingandpharming \n• securitysafeguardswhenc,myingoutonlinetransactions \ne computerethics \n8.1 Introduction \nKeeping data safe is extremely important for a number of reasons. It may be \npersonal data that you want to keep within your family or your close friends, \nor commercial data, such as passwords and bank account details, which need to \nbe kept safe to protect your money. \nData can be cormptcd or deleted either through accidental damage or through \na malicious act. There arc many ways to keep data safe and some of the methods \navailable will be covered in this chapter. \nThere is also a short section on computer ethics since this is becoming an \nincreasing])' important topic for discussion. \n8.2 Security and data integrity \n\\\\'hether a user is working on an off-line computer or on a computer connected \nto the internet, keeping data safe is \\·cry important. \nData is threatened by malicious software, hackers or accidental damage. This \nsection co\\·ers a number of different security risks and considers ways to overcome \nor minimise them. \nEach security risk, together with its description, possible effects and risk \nmitigation will be set out as follows: \nPossible effect of the \nsec..-;tyrisk \nFigur• S.1 \nOescriptiooofthe \nseru,;tyrisk \nName of the \n,eru,;tyrisk \nMethodsto,ema,e \nsec..-ityrisk \n8 \nSECURITY AND ETHICS \n8.2.1 Hacking \n• Thiscanleadtoideobty \n;~t;:.~ningpersooal \n• Data can be deleted, \nchangedorcorrnpted \nFigure8.2 \nTheactofgainingillegal \niK:CPSSloacompute, \ns,s= \nHacking \nNote the difference between CRACKING and HACKING. \nH acking is breaking into a computer system to steal personal data without \nthe owner's consent or knowledge (e.g. to steal a password file). \nCracking is where someone edits a program source code (i.e. looks for a 'back \ndoor' in the software so that the code can be exploited or changed for a specific \npurfXlse ). This is usually done for a malicious purpose ( e.g. legitimate software \ncould be altered by a cracker to perform a different task e.g. send a user to a \nspecific website). \nEsscntiallr, hacking isn't necessarily harmfitl whilst cracking is ALWAYS totally \nillegal and is potentially very damaging. \n8.2.2 Viruses \n• Cancausethe~ter \nto crash.stop \nfunctiooingoormallyor \n. ~~,:~\\%~~· \n• Cancom1ptfiles/data \nFigure8.3 \n8.2 \n8.2.3 Phishing \nThecreatorsendsouta \nlegitimate-looking email; as \nsoooastherecipientcltl,on \nali~n,!:i~~~::~71, \n• Thecreatoroltheemail \n~:,~\"'~;!~ \nnumbers Imm use\" \n~~visit the fake \n• ThiscanH'adtofraudor \nidentity theft \nFigur• S.4 \n8.2.4 Pharming \nbogus website \nPhishing \nMahdouscode imtaHedona \nuser\",Mrddriveoroothe \n,:f:::'tn\"',i !':. :1: t'.:\n1\n~ \nboguswebsotewithootthei, \nknowledge \n• Thecreatorofthe \nmalicious axle can gain \n~~:c:~=~ \n~;:.,\"';.:.,:~~::1 \n• Thiscanieadtofraudor \nidentity theft \nFigur• S.5 \nPharming \nSecurity and data integrity \n8 \nSECURITY AND ETHICS \n8.2.5 Wardriving \n·~!~:!!J~a \nalocationbydoo.vnloading \nlargeMes(e.9.moviefiles) \n·;;.:~::~k·~~~ \nsteajause<'spassword \nandolhe,persooaldetaals \nFigur• S.6 \nWardriving \n8.2.6 Spyware/key-logging software \nFigur•S.7 \nSoftwa<ethatgathm \ninfom,atioobymooitorjngkey \npree,;esonlheuser's \nkeyboard; theinfo,mabonis \nthe~n~~!\"so~ \nSpyware/key-\nloggingsoftwar• \n• Useolant~spywa<esoftware \n·::;i'::i=~~~~:::. \nthat thei, keyboardac~vityis \nbeingmonito<ed \n• Wngamousetoselect \ncha<acte\"frompasswords \n(etc.)ratherthantypinglhem \n;~~',;~~dcanhelp \n8.3 Cookies \nAcooKII! is a packet of information sent by a web server to a web browser. \nCookies are generated each time the user visits the website. A message is \nfrequently displared sa)'lllg 'cookies are required to access this site' ( or some \nequivalent message). Every time a user visits the website, cookies will have \ncollected some key information about the user. Ther are able to carry out user \ntracking and also maintain user preferences (for example, when a user buys a CD \n8.4 \nLoss of data and data corruption \non a music website , the cookies will have remembered the user's previous buying \nhabits and a message like this often follows: 'Customers who bought items in \nyour Recent H istory also bought: YYYY'). \nCookies aren't programs but are simply pieces of data. They can't actually \nperform any operations. 1l1cy only allow the detection of web pages viewed by \na user on a particular website and store user preferences, as described above. \nThe information gathered by cookies forms an ANONYMOUS USER PROFILE and \ndoesn't contain personal information (such as credit card numbers or passwords). \nBecause of the information they do collect, however, they are subject to privacy \nand security concerns. \n8.4 Loss of data and data corruption \nSection 8.2 considered a number of security issues which could lead to loss \nof data or the corruption of data. \nThis section covers the potential impact on d ata caused by: \n• accidental mal-operation \n• hardware malfunction \n• sofuvare malfimction \non a computer system. In each case: \n• safeguards \n• recovery methods \nto pre\\·ent the loss or corruption of data arc considered. \nAcddl'lltall=ofdata \n(forexample.lheaccidental \ndeletiooofali e) \n~~(f.,~~\\;.\":~ \ndisk drive) \nSoftwarelault(e.g \ninc:ompatiblesoltl'.•,.-e \nimtalledonthesystem) \nIncorrect computer \noperalion(e.g. inc:Offect \nshut<lownpmcedure0< \ninc:Offectpmcedureforthe \n,ema,al ola memorys~O:) \nFigure 8.8 \n• Useofbad·upsin=dataislost0<conupted \nthrooc,ianacridmtaloperatioo \n• 'i.avedataonaregul,.-ba,is \n• Useofpasswordsanduse,idstorestrictacc5Sto \nauthorised users only \n• Useofback·upsincasedataisi<><torcorrupted \nthroociilhehardwa,efault \n• UseofUPS(uninterruptablepowe,supply)to \npteYl'fltpow..,i<><scausingha,dwaremaflunction \n• 'i.avedataonaregu!arbasis \n• Useofpa,allelsystemsasback·uphardwMe \n• Useolback·upsincasedataisi<><torcorrupted \nthrooc,ilhesoftw,.-efault \n• Savedataona,egu!arbasisincasethesottware \nsuddenly\"freezes\"0<\"aashes\"whilsttheuseris \nworkingooit \n• Useofback·upsincasedataisi<><torcorrupted \nthrooc,iv,rnngoperaboo \n• Conecttrainingproceduressothatusers,.-eaware \noltherorrectoperationofha,dware \n8 \nSECURITY AND ETHICS \n8.5 Firewalls and proxy servers \nA FIREWALL can be either software or hardware. It sits between the user's \ncomputer and an external network (e.g. the internet) and filters information \nin and out of the computer. \n~ \nFigu,.8.9 \nTasks carried out by a firewall include: \n• examining the 'traffic' between the user's computer (or internal network) \nand a public network (e .g. the internet) \n• checking whether incoming or outgoing data meets a given set of criteria \n• if the data fails the criteria, the firewall will block the 'traffic' and gi\\·e the user \n(or network manager) a warning that there may be a security issue \n• logging all incoming and outgoing 'traffic' to allow later interrogation by the \nuser (or network manager) \n• criteria can be set to prevent access to certain undesirable sites; the firewall can \nkeep a list of all undesirable IP addresses \n• helping to prevent viruses or hackers entering the user's computer ( or internal \nnetwork) \n• warning the user if some software on their system is trying to access an external \ndata source ( e.g. automatic software upgrade ); the user is gi\\'cn the option of \nallowing it to go ahead or rcguesting that such access is denied. \nTI1e firewall can be a hardware interface which is located somewhere between \nthe computer ( or internal network external link) and the internet connection. \nIt is often referred to in this case as a GATEWAY. Alternatively, the firewall can \nbe software installed on a computer; in some cases, this is part of the operating \nsystem. \nH owever, there arc certain circumstances where the firewall can't prevent \npotential harmful 'traffic': \n• it cannot pre\\'cnt indi\\'iduals, on internal networks, using their own modems \nto bypass the firewall \n• employee misconduct or carelessness can.not be controlled by firewalls \n( for example, control of passwords or use of accounts) \n• users on stand-alone computers can chose to disable the firewall, leaving their \ncomputer open to harmful 'traffic' from the internet. \nAll of these issues reguire management control or personal control ( on a single \ncomputer) to ensure that the firewall is allowed to do its job effccti\\·cly. \nPROXY SERVERS act as an intermediary between the user and a web server: \nWebb<owse, \nWebb<owse, \nI I :·:•I I l'::::1 ~1 \nresponse is filtered \nbad response to \nprnxyse,ve, \nFigu,.8.10 \n8.6 \nFunctions of proxy servers include: \n• allowing the internet 'traffic' to be filtered; they can block access to a website \nif necessary (similar type or reaction as a firewall ) \n• by using the fcamre known as a CACHE, they can speed up access to information \nfrom a website; when the website is first visited, the home page is stored on the \nproxy server; when the user next visits the website, it now goes through the \nproxy server cache instead, giving much faster access \n• keeping the user's IP address secret - this clearly improves security \n• acting as a firC'.vall. \n8.6 Security protocols \n\\Ve will now consider two forms of security protocols when using the internet: \n• Secure Sockets Layer (SSL) \n• Transport Layer Security (TLS). \nSECURE SocKETs LAYER (SSL) is a type of protocol (a set of rules used by \ncomputers to communicate with each other across a network). This allows data \nto be sent and received securely over the internet. \nWhen a user logs onto a website, SSL encrypts the data - only the user's \ncomputer and the web server are able to make sense of what is being transmitted. \nA user will know if SSL is being applied when they see https or the small padlock \ne, in the stams bar at the top of the screen. So what happens when a user wants \nto access a secure website and receive and send data to it? \nThe use,\"s web browse, sends a message so that it can comect \nwilhlherequiredwebsitewhKhi,securedbySSL \nThewebbrowserlhenrequeststhatthewebserve,ioentifiesitsett \nttthewebb<owse,canaulhenticatelhiscertificate.itsendsa \nmessage bad< to the web serve, to allow communicabon to begin \nOncethismessagei,,eceived.lhewebserverackno.Yledge,the \nwebb<owse,.andtheSSL-el\\CJ'll'tedtwo--waydatalfansferbegim \nFigur• S.11 \nTRANSPORT LAYER SECURITY (TLS) is similar to SSL but is a more recent security \nsystem. Tl.S is a form of protcx:ol that ensures the security and privacy of data \nbetween devices and users when communicating m ·er the internet. It is essentially \ndesigned to provide encryption, authentication and data integrity in a more \neffective way than its predecessor SSL. \n\\Vhen a website and client (user) communicate o\\·er the internet, Tl.S is \ndesigned to pre\\·e11t a third party hacking into this communication causing \nproblems with data security. \nSecurity protocols \n8 \nSECURITY AND ETHICS \nTLS is formed of two layers: \n• record protocol: this part of the communication can be used with or without \nencryption (it contains the data being transferred over the internet). \n• handshake protocol: this permits the website and the client (user) to \nauthenticate each other and to make use of encryption algoriduns ( a secure \nsession between client and website is established). \nOnly the most recent web browsers support both SSL and TLS which is why the \nolder SSL is still used in many cases. But what arc die main differences between \nSSL and Tl...S since diey both cffccti\\·cly do the same d1ing? \n• It is ix,ssiblc to extend Tl.S by adding new aud1cntication methods. \n• Tl.5 can make use of SESSION CACHING which improves the overall performance \ncompared to SSL (sec Section 8.6.1 ). \n• Tl.5 separates the handshaking process from die record protocol (layer) which \nholds all the data. \n8.6.1 Session caching \nWhen opening a Tl.S session, it requires a lot of computer time ( due mainly to \nthe complex encryption keys being used - sec Section 8.7). The use of session \ncaching can avoid the need to utilise so much computer time for each connection. \nTI..S can either establish a new session or attempt to resume an existing session; \nusing the latter can considerably boost system performance. \n8. 7 Encryption \nEncryption is used primarily to protect data in case it has been hacked. Whilst \nencryption won't prevent hacking, it makes die data meaningless unless the \nrecipient has the necessary decryption tools described below. \nThere are two types of encryption: \ne svmmctric \n• a.symmetric or public key. \n8.7.1 Symmetric encryption \nSYMMETRIC ENCRYPTION is a secret key which can be a combination of characters. \nIf this key is applied to a message, its content is changed which makes it \nunreadable unless die recipient also has the decryption key. \nOne key is needed to encrypt a message and another key is needed to decrypt \na message. \nIt is obviously imix,rtant that the sender and receiver have the same encryption \nand decryption key. 1l1crc is clearly a security risk here, since the sender has to \nsupply the key to the recipient. 1l1is key could be intercepted by, for example, \na hacker which puts die security of the encrypted message at risk. This sirnation \nis referred to as die KEY DISTRIBUTION PROBLEM. \nSo the question is, how can both sender and receiver have the required key \nwithout sending it electronically in some way? The following routine shows how \nthis is done. Follow it through, and you will sec that both sender and recipient \nend up with a key which is effectively secret, but didn't involve sending the actual \nkey electronically. \n8.7 \nStage \nSender \nThesenderusesaoenayptklna\"]Orithm(see \nSecbon8.73)andchoose<avalue \ne.g. X•l{thisiskeptseael) \nThisvah;eofXisput;ntoa5'mplealgo,ithm \n]X(MQQ1)) \n(M00rj,estheremainde<M1endividir,ga \nnumberby11) \nHlisgives \n7>(M0Dl1)•49(M0011) \nwt>Khrj,esthevalu.e \nS (ie.4remaindef5) \nHl<'sendernowsendslhevaluejustcakulated \n(i.e. S} totherecipient \nHlisnewvalueisputintothesamealgofilhm -\nlhenewvalue,eplaces'7' \n] X(MQQ11) \nHi s gives \n3'(MOD11)•9(M0011) \nwt.kht;j,,esthevalue \n9(i.e.Oremaindef9) \nRecipient \ne.g.Ya4(thisisalsokeptsecrel} \nThevalc;eo!Yisputintothesamealgorilhm \n]Y(M0011) \n(MODgivestheremalr>derwhendividir,ga \nnumbe,byll) \nThis gives \n7•(MOO l1)•240l(MOD11) \nwhic:hgi,,....thevalue \n3 (i.e.2l8remainde< 3) \nTheredpH'ntnowsrodsthevaluejustcakulated \n(ie. 3)tothesende, \nThisnewvall1!'isputintolhesamealgorithm -\nthenewvalJerepl;,ces'7' \nSY(M0011) \nThis gives \n5'(M0011)a6lS(M0011) \nwhich gives the value \n9(i.e.56remainde,9) \nThus both sender and recipient end up with the same encryption and decryption \nkey of9. This gives us the basis ofhow an encryption key can be generated. \nActivity 8.1 \nUsethefollowingseoderandreceivervalue1tocheckthatthesystemdesaibedinTable8.lwofks \na sender u11.'S the value x= 3 and receiver uses thevaluey = S \nb senderusesthevaluex:7andreceiverusesthevaluey:6 \nTable 8.1 refers to an BNCRl'PTION ALGORITH M. As we will see in Section 8.7.3, \nmessages are put through an encryption algorithm to produce a message in \nencrypted form. This algorithm uses an encryption key to produce a message \nwhich appears meaningless unless the same key is applied to 'unlock' the \noriginal message. The key is referred to as an encryption key or a decryption \nkey depending whether it is used to encrypt the message or to decrypt the \nmessage. \nThe next section discusses the types of encryption keys. \n8.7.2 Asymmetric encryption \nThe risks surrounding symmetric encryption keys have already been discussed. A \nmore secure method is to use ASYMMETRIC or PUBLIC KEY encryption. A PRNATB \nKEY and a public key are both needed: \n• public key is made available to everybody \n• private key is only known by the computer user. \nBoth types of key are needed to encrypt and decrypt messages. Imagine a user \non computer A wants to send a private message to a user on computer B; how is \nasymmetric encryption used? \nEncryption \n8 \nSECURITY AND ETHICS \nUse,Aappliesasymmetrickeytoeouyptthemessage \nThe symmetric key is the~ ':'~Ate;irld\"\"Bng lhe public key rooY.'f\\ \nUserAs.endslhemessage\"\"\"'theintemet \nUsefBdecryptsthe')'fffTll'trkkeybyapplyingthei\"own \nprivate key \nThecJeroded,ymmetrickeyisnowusedtodeaypt lheffil\"\"\"\"9\" \nsentbyuse,A \nFigure8. 12 \n111c encryption keys arc often generated by using a H ASHING ALGORITHM . This is \nactually very different to an encryption algorithm. The hashing algorithm takes \na message or a key and translates it into a string of characters usually shown in \nhex notation (the length of the string depends on the algorithm being used ). \n1l1is essentially makes the message or key almost imJX>ssiblc to read ifit is \nsomehow intercepted by, for example, a hacker. The same hashing algorithm has \nto be applied at both ends (sender and receiver) for the message or key to be \nunderstood. \nIn summary, the encryption algorithm converts messages using an encryption \nkey into 'meaningless' text; the same key has to be used to decrypt the message. \n1l1csc keys can, however, be intercepted which makes the encryption process less \nsecure. To overcome this problem, a hashing algorithm is applied to the message \nor key, producing a string of characters which are virmally impossible to 'break' \nif intercepted. This considerably increases the security of the whole process when \nsending personal or sensitive data across, for example, the internet. The use of \nhashing and encryption is further discussed in Scction 8.7.4. \nAn example ofa well-known hashing algorithm is ,\\1D4 which generates a \n128-bit string whenever a value is nm through it. For example, the following \n16-digit code: \n1234 5678 9012 3456 \nwould produce the following value when put through the MD4 hashing algorithm: \n543FC7DDEAOCF5EAFS4279CBADCA180D \n(Note: this contains 32 hexadecimal digits (i.e. 128 bits) - sec Section l.5. ) \nStrings which are 128 bits long gi\\'e 3 x 1038 possible combinations which \nmakes them \\·cry secure. Some newer systems use 256-bit strings which ha\\·c \n1 x 1077 possible combinations. Older systems employ strings which arc only \n56 bits in length, which gives them only 7 x 1Ql6 possibilities - this has become \nrclati\\•cly easy to break since modern computers arc so fast at number crunching! \nBut it is clear that the larger the key size, the more secure the encryption \nwill be. \n8.7 \nActivity 8.2 \nUsing the internet, carry out a 51!arch for M04 and MOS hashing algorithm generators \n(e.g. httpJMWW.online-convert.mm/) \nThen try various numbers, letters and messages to ,;ee how the 128-bit mde varies. Even \njust changing a few letters in a message can have a dramatic effect oo the 128-bit value \nFor example \n'Thi1isanex.ample': 1F312F8138628926E44AOC899161F4A8 \n'Thisisanotherexample': 2EAEB50E8870FD5418366CE235107F21 \nTryout anumbi!rofex.amplesloryour,;ell. \n8.7.3 Plain text and cypher text \nPLAIN IBXT (sometimes written as a single word 'plaintcxt') is described as the text \nor normal representation of data before it goes through an encryption algorithm. \nCYPHER TEXT (sometimes written as 'cyphertext' or 'ciphcrtext') is the output \nfrom an encryption algorithm: \nFigur• S.13 \n8.7.4 Authentication \nAurHENTICATION is used to verify that data comes from a trusted source. It works \nwith encryption to strengthen internet security. \nExamples include: \nFigureS.14 \nUsualy auser,d/nameandpasswo,dareusedtologontomilllysystem,;both \nuserodlnameillldp;rsswo,dare<hedrndaga;mtasenxeMetoronfirma \n=•~'~Jheyclaim to be; ifeitherisiocO<Tectordon\"tmat<hup. then \nThissystemisbasedonpublickeyeoc:,yptioo;itisamethodusedtoens.ureill\\ \nelectmoicdocumeotisautheotic;thefoUowiogdia<1amsumsupwhat \nhappeoswheouserAsendsam~touserB \nThe message is \nThe\"hash\" \nUser A writes \npot through a \nnumber is \n---- hashing \n---- encrypted \nalgorithm \nus,nga \nprivate key \nI \n:\"~a:\"'ar~ot \nover the internet \nEncryption \n8 \nSECURITY AND ETHICS \nRgu,.8.14contiooed \nBiometric:sreliesontheooiquecharaclPristicsolhumanbeings; \nexamplesindude \n::.:'..~:,\"\"\"' \no faa,recognition(sees.ectiooS.2.1) \n• YDkerecognition(seeSectionS.2.7) \nFingerprint scans \nlmagesoffinger,.-intsarecompa,ed\"9\"'nstp,eviouslyl \nscannedlingPrprintsstoredinadatabase;iftheymatch \n, • \n. \nthenaccessisallowed;thesystemcomparespattemsof \n'ridges' and'valleys'whimarefairlyunique \n{amxacyis1in500) \nRetina scans \nRetinae<:ansuseinfra-<edtoscantheuniquepattemof \nbloodvesselsintheretina(atthebad<oftheeye);itisa \nrathPrunpleasanttec:hnique,equi,;ngape,sontosit \ntotallystillfot 10to 1Ssec:ondswh;lethescantakesplace; \nitisver'jsec\\Xe,;ncenobodyhasyetfoundawayto \nduplicatethebloodv~lpattems \n{aa:,xaqis1in10milion) \n8.7.5 Denial of service attacks \nA denial o f service attack (DoS ) is an attempt at preventing users from accessing \npart of a network, notably an internet server. This is usually temporary but may \nbe a very damaging act or a big breach of security. It doesn't just affect networks; \nan individual can also be a target for such an attack. \nThe attacker may be able to prevent a user from: \n• accessing their emails \n• accessing websites/web pages \n• accessing on line services ( such as banking). \nOne method of attack is to flood the network with useless traffic. H ow does \nthis cause the problem? \n\\\\'hen a user types in or clicks on a URL of a website (using their web browser), \na request is sent to the internet server which contains the website or web page. \nObviously, the server can only handle a finite number of requests. So if it becomes \no\\·crloadcd by an attacker sending out thousands of requests, it won't be able to \nservice the user's legitimate request. This is effectively a denial of service. \nThis can happen to a user's email account, for example, by an attacker sending \nout many spam messages to their email account. Internet Service Providers ( ISPs) \nonly allow a specific data quota for each user. Consequently, if the attacker sends \nout very large or many hundreds of emails to the user's account, it will quickly \nget clogged up and the user won't be able to receive legitimate emails. \nAn individual user or a website can guard against these attacks to some degree by: \n• using an up-to-date malware/virus checker \n• setting up a firewall to restrict traffic to and from the internet server or user's \ncomputer \n• applying email filters to manage or filter out unwanted traffic or spam emails. \nSigns that a user can look out for to see if they arc a victim of one of these attacks \ninclude: \n• slow network performance (opening files or accessing certain websites) \n• unavailability or inability to access particular websites \n• large amounts of spam mail reaching the user's email account. \n8.8 \n8.8 Applications \nOnline banking and shopping arc all at risk from many of the security issues \ndescribed earlier on. \nWe will now consider some of the ways banks protect their customers from \nonline fraud. The following notes are in addition to safeguards such as \nencryption, SSL, virus sca1mers and many of the other ways described in the \nearlier part of this chapter and refer to additional features you might see as \npart ofa bank's security system. \n\\Vhcn a customer logs on to a banking website and carries out a transaction, \nencryption is used to protect the customer's personal details. H owever, banks \ncarry out a number of other procedures to give additional protection. Not all \nof the methods described would be used by one bank. H owever, the notesgi\\·e \nsome idea of the type of safeguards that might be encountered when a customer \nlogs on to a bank's website. \n1 Many banks use a 10- or 12-digit code uni'luc to the customer: \nm\nHODDERBANK \nPleaseenteryou,unique12-digitrode \n== = \nFigur•S.15 \n2 You may then be asked to input three random numbers from a four-digit PIN \nand/or three characters from a 10-charactcr password (this will vary from bank \nto bank,ofcoursc): \nm\nHODDERBANK \nPleaseenterlhefolkw.ingdigitslrnmyo;xPIN \n,•,,,, § \n4111 digit \nJ'\"digit \nl'leaseenterlhelolk>wingcharacterslrnm)<}\\lrpassword \n,. , . \n.. \nFigure S.16 \n3 Some systems use a hand-held device into which the customer inserts their \ncard. 111cy will be asked to enter their PIN. 111c device will then generate an \neight-digit code which the customer types into the web page of the bank. \nlbis eight-digit code is generated from an internal clock and PIN. The bank's \nscn·cr and the time arc both synchronised with the hand-held device; the server \nalso stores the PIN. The bank's server will therefore know if the eight-digit \ncode entered is correct. Each eight-digit code is only valid for a few minutes \nbefore it has to be redone. \nAppl/cations \n8 \nSECURITY AND ETHICS \nThis system defeats hackers and spyware since the code will change e\\·ery time \nthe customer logs on to the bank's website. \nFigure8.17 \n4 Some banking systems ask the customer to key in parts of their password using \ndrop-down boxes. lllls is an attempt to defeat spywarejkey-logging software. Each \nof the requested characters from the password are entered by selecting a character \nfrom a drop-down me.nu using a mouse, thus eliminating the use of a keyboard . \nm\nHODDERBANIC \nPleaseenterthelollowingcharactersfrom)'Ol#pa,,;wo<d \nFigure8.18 \n5 Once all these stages have been passed, some systems then ask for personal data, \nsuch as: \n• 'You last logged into the system on 15th September 2015. Is that correct?' \n• 'Your mobile phone number is: 9777 111 2222. ls that correct?' \n• '\\<\\'hat is your mother's maiden name?' \n6 Assuming the customer successfully negotiates all of the security 'hurdles', they \nwill be sent to a home page on the website. Once you arc there, it is imixirtant \nto only use the bank's navigation tools rather than the ones at the top of the \nscreen. Otherwise you will be logged out of the system, and you will need to \ngo through all the earlier steps again. \n8.9 Computer ethics \nC01,1PUTER ElHICS is a set of principles set out to regulate the use of computers. \n1l1recfactorsarc considered: \n• INTELLECTUAL PROPERTY RIGHTS - this covers, for example, copying of software \nwithout the permission of the owner \n• PRIVACY ISSUES - this covers, for example, hacking or any illegal access to \nanother person's personal data \n• effect of computers on society - this cm·ers factors such as job losses, social \nimpacts and so on. \nUse of the internet has led to an increase in plagiarism - this is when a person \ntakes another person's idea/work and claims it as their own. \\Vhilst it is perfectly \nfine to quote anotl1er person's idea, it is essential that some acknowledgement is \nmade so that the originator of tl1c idea is known to otl1crs. This can be done by a \n8.10 \nFree software, freeware and shareware \nseries of references at the end of a document or footnotes on each page where a \nreference needs to be made. Software exists that can scan text and then look for \nexamples of plagiarism by searching web pages on the internet. \nThe ACM (Association for Computer Machinery) and IEEE (Institute of \nElectrical and Electronics Engineers) have published the following code of ethics: \nI. to accept responsibility in making decisions consistent with the safety, \nhealth and welfare of the public, and to disclose promptly the factors \nthat might endanger the public or the envirorunent; \n2. to avoid real or perceived conflicts ofinterest whene\\·er possible, and \nto disclose them to affected parties when they do exist; \n3. to be honest and realistic in stating claims or estimates based on \navailable data; \n4. to reject bribery in all its forms; \n5. to improve the understanding of technology; its appropriate \napplication, and fX)tential consequences; \n6. to maintain and impro\\·e our technical competence and to undertake \ntechnological tasks for others only if ciualified by training or \nexperience, or after full disclosure of pertinent limitations; \n7. to seek, accept, and offer honest criticism of technical work, \nto acknowledge and correct errors, and to credit properly the \ncontributions of others; \n8. to treat fairly all persons and to not engage in acts of discrimination \nbased on race, religion, gender, disability, age, national origin, sexual \norientation, gender identity, or gender expression; \n9. to avoid injuring others, their property, reputation, or employment by \nfalse or malicious action; \n10. to assist colleagues and co-workers in their professional dL·velopment \nand to support them in following this code of ethics. \nReproduced with kind permission of the IEEEE \n8.10 Free software, freeware and shareware \nApart from the usual commercial software (such as spreadsheets and word \nprocessors) which are all sold in shops for a profit, there is a group of software \nwhicl1 causes much confusion among many users. This group consists of: \n• free software \n• freeware \n• shareware. \nThe final part of this chapter will explain the fundamental differences benveen \nthesetypesofsoftware. \n8 \nSECURITY AND ETHICS \n8.10.1 Free software \nUsers ha\\·e the freedom to run, copy, change or adapt free software. Examples \ninclude: F-six>t (photograph manager), Scribus (DTP ) and Abiword (word \nprocessor). \nThe originators of this type of software stress this is based on liberty and not \nprice. This means that a user is guaranteed the freedom to study and modify the \nsoftware source code in any way to suit their requirements. \nEssentially a user is allowed to do the following: \n• run the software for any legal purpose they wish \n• study the source code and modify it as necessary to meet their needs \n• pass the software (in either original or modified form) on to friends, family \nor colleagues. \nA user of the software doesn't need to seek permission to do any of the above \nactions since it isn't protected by any copyright restrictions. Howe\\·er, it is \nimportant to realise that there are certain rules that need to be obeyed. The user \n• cannot add source code from another piece of software unless this is also \ndescribed as free software \n• cannot produce software which copies existing software subject to copyright laws \n• cannot adapt the software in such a way that it infringes copyright laws \nprotecting other software \n• may not use the source code to produce software which is deemed offensive by \nthird parties. \n8.10.2 Freeware \nFREEWARE is software a user can download from the internet free of charge. Once \nit has been downloaded, there are no fees associated with using the software \n(examples include: Adobe, Skype or media plarers). \nUnlike free software, freewarc is subject to copyright laws and users arc often \nreciuested to tick a box to say they understand and agree to the terms and \nconditions governing the software. This basically means that a user is not allowed \nto study or modify the source code in any way. \n8.10.3 Shareware \nIn this case, users are allowed to try out some software free of charge for a trial \nperiod. At the end of the trial period, the author of the software will request \nthat you pay a fee if you like it. Once the fee is paid, a user is registered with the \noriginator of the software and free updates and help are then provided. Very \noften, the trial version of the software is missing some ofthc features found in the \nfoll version, and these don't become a\\lailable until the fee is paid. \nObviously, this type of software is folly protected by copyright laws and a user \nmust make sure they don't use the source code in any of their own software. \nPermission needs to be obtained before this software is copied and given to \nfriends, family or colleagues. \n8.10 \nActivity 8.3 \nA'iOftwarecompany offersasuiteolsharewareprograms {containir,gaspl&ldshei!I, \nwordprocessor,databaseanddrawingpackage) \nW\"hatarethebenelitsto· \ne thecompany \n• the customer \nolollerir,gsoftwarepi!d.agesasshareware7 \nFree software, freeware and shareware \n(Note: ethical issues arc raised as electronic communication continues to grow. \nEarlier in this chapter, issues such as hacking, \\'iruses and other malware were \nconsidered. All of these put users at risk when using the internet or indeed any \nelectronic de\\'ice which transmits and receives data o\\·er a live link ( e.g. mobile \nphones, tablets and other devices). \nMany users are aware that computers can undergo hacking or virus attack ( and \nany of the other security issues outlined earlier) but don't seem to be aware that \nde\\'ices such as mobile phones are also \\llllnerablc to attack by hackers and other \npeople intent on causing harm to users of electronic devices. ) \np \n0 \n-\n\"-\nm Practical problem-solving \n\\_!:_} and programming \nChapters \nt \n9 Problem-solving and design \n11 5 \n10 Pseudocode and flowcharts \n134 \n11 Programmingconcepts \n146 \n12 Datastructures: arraysand using pre-release material \n163 \ns 13 Databases \n169 \n® Problem-solving and design \nlnthischapteryouwinle.-imabout: \n• computer systems and sub-systems \n• top-downdes.ign \n• structure diagrams \n• flowcharts \n•pseudorode \n• libraryroutines \n•sub-routines \ne algolithms \ne standardmethodsofsolution \ne testdata \ne validationandverification \ne usingtracetables \ne identifyingandcorrectingerrors \ne producingalgorithms \ne theeffectivenessofasolution \n9.1 Introduction \nIn order to build a computer system that performs a specific task or sol\\'cs a given \nproblem, the task or problem has to be clearly defined, showing what is going to \nbe computed and how it is going to be computed. This chapter introduces the \ntools and techniques that are used to design a software solution that together \nwith the associated computer hardware will form a computer system. \n9.1.1 What is a computer system? \nA COMPlITER SYSTEM is made up of software, data, hardware, communications and \npeople; each computer system can be divided up into a set of sub-systems. Each \nsub-system can be further divided into sub·systems and so on until each sub-\nsystem just performs a single action. \nComputer systems can be very large or \\·ery small or any size in between; most \npeople interact with many different computer systems during their daily life \nwithout realising it. For example, when I wake up in the morning I use an app on \nmy smart phone for mr alarm, I then check the weather forecast on mr computer \nbefore I drive to work. The alarm program is a very small computer system; \nwhen I check the weather forecast I obtain information from one of the largest \ncomputer systems in the world. \nActivity 9.1 \nldeotjfyatleast fivecomputersystemsyoufrequentlyu~inyourdailylile.Seeilyoucandedde \nthesizeofeachsystem \n9.1.2 Tools and techniques \nIn order to understand how a computer system is built up and how it works, it is \noften divided up into sub-systems. This division can be shown using top-down \ndesign to produce structure diagrams that demonstrate the modular construction \nof the system. Each sub-system can be developed by a programmer as sub-routine \nor an existing library routine may be already available for use. H ow each sub-routine \nworks can be shown by using flowcharts or pseudocode. \n9 \nPROBLEM-SOLVING AND DESIGN \nTop-down design \nToP- DOWN DESIGN is the breaking down of a computer system into a set of \nsub-systems, then breaking each sub-system down into a set of smaller sub-systems, \nuntil each sub-system just performs a single action. TI1is is an effective way of \ndesigning a computer system to pro\\'ide a solution to a problem, since each part \nof the problem is broken down into smaller more manageable problems. 111c \nprocess of breaking down into smaller sub-systems is called 'stepwise refinement'. \nThis structured approach works for the development of both large and small \ncomputer systems. \\Vhen large computer systems arc being de\\'clopcd this means \nthat several programmers can work independently to develop and test different \nsub-systems for the same system at the same time. This reduces the development \nand testing time. \nStructure diag rams \nIn order to show top-down design in a diagrammatic form, structure diagrams \ncan be used. The STRUcruRE DIAGRAM shows the design ofa computer system in \na hierarchical way, with each level gi\\'ing a more detailed breakdown of the system \ninto sub-systems. \nAlarm app for a smart phone \nConsider the alarm app computer system for a smart phone. This could be \ndi\\'idcd into three sub-systems, setting the alarm, checking for the alarm time, \nsounding the alarm. These sub-systems could then be further sub-divided; \nthe structure diagram makes the process clearer. \nFiguN9.1 Stn,cture diagramlor alannapp \nActivity 9.2 \nBreakdownthe'checktime'sub-S)\"item \nlromthesmartphooealarmappintofurther \nrnb-S)\"items. \nActivity 9.3 \nDrawastructurediagramlorcleaningyour \nteeth \n9.1 \nFlowcharts \nA FLOWCHART shows diagrammatically the steps required for a task (sub·system) \nand the order that they are to be performed. These steps together with the \norder are called an ALGORITHM. Flowcharts are an effective way to communicate \nthe algorithm that shows how a system or sub-system works. H ow to construct \nflowcharts is cm·cred in"
  },
  {
    "chapter": "Chapter 10.",
    "text": "H ave a look at a flowchart for the checking-for·thc-alarm-time sub-system. \nFigure 9.2Flowchartlorched::fr,g-f0f-the...a!arm·timesub-system \nPseudocode \nPsBUDOCODE is a simple method of showing an algoritlun, using English-like \nwords and mathematical operators that are set out to look like a program. \nH ow to write algorithms in pseudocodc is covered in"
  },
  {
    "chapter": "Chapter 10.",
    "text": "H ave a look at the pseudocode for the checking-for-the-alarm-time algorithm. \nFigur• 9.31'seudocodefllfthedieck;ng-fof-the-ala,m-timealgofithm \nLibrary routines \nA LIBRARY ROUTINE is a set of programming instmcrions for a gi\\·cn task that is \nalready available for use. It is pre-tested and usually performs a task that is \nfrequently required. For example, the task 'get time' in the checking-for-the -\nalarm-time algorithm would probably be readily a'lllilable as a library routine. \nIntroduction \n9 \nPROBLEM-SOLVING AND DESIGN \nSub-routines \nA SUB-RO urINB is a set of programming instructions for a given task that \nforms a sub-system, not the whole system. Sub-routines written in high-level \nprogramming languages are called 'procedures' or 'functions' depending on how \nthey are used . See"
  },
  {
    "chapter": "Chapter 11 for further details.",
    "text": "9.2 Algorithms \nAn ALGORITHM sets out the steps to complete a given task. T his is usually shown \nas a flowchart or pseudocode. Anyone who studies the flowchart or algorithm \nshould be able to work out the purpose of the task. \nActivity 9.4 \nHave a look at the flo>Ndiart and pseudocode below. What is the purpose of the algorithm that \nthey both represent? \n'Nhatwouldbeoutputilthenumber17and 18were input? \n• i o largeot • \nFigure 9.4 Flowcha,t \nl'\"'ITT\"-'· \"~ \nI \n™~\"'~ \"-'· .,. ,.,~ ... \nRLS& PRINTNw.2, \"h hrge&t\" \nFigure9.5Pseudocode \nFor more complicated tasks just inspecting the flowchart or pseudocode may \nnot be an accurate way of determining its purpose; a more structured thorough \napproach is required . T his will reciuirc the use of test data and trace tables. \n9.3 \nSome tasks arc required frequently and there are standard methods of \ncompleting them, for example, taking the square root of a number or sorting a \nlist of names into alphabetical order. These standard solutions can be provided \nby a high-level programming language as a standard function or procedure, \nfor example, mathematical fimctions such as max or min. Library routines are \nalso available for standard methods such as sorting or searching. \n9.3 Test data \nIn order to determine whether a solution is working as it should, it needs \nto be tested. Usually before a whole system is tested each sub-system \nis tested separately. \nAlgorithms can be tested by a person working through them using any data \nthat is required and seeing what the result is; computer programs can be tested \nby running them on a computer using any data that is required and seeing what \nresult is output. In order to test a solution thoroughly it may need to be worked \nthrough several times with different sets of test data. \nA SET OF 'IBST DATA is all the items of data required to work through a solution. \nThe set of test data used in the activity above was 7 and 18. \nTesting needs to be done to prove that the solution works correctly. In order \nto do this a set of test data should be used togetl1cr \\vith tl1c result( s) that are \nexpected from that data. The type of test data used to do this is called NORMAL \nDATA, this should be used to work tl1rough tl1e solution to find the actual rcsult(s) \nand sec if these are the same as the expected result(s). \nFor example, here is a set of normal test data for an algorithm to record tl1c \npercentage marks from I O end-of-term examinations for a student and find \ntheir average mark: \nNormal test data: 50, 50, 50, 50, 50, 50 50, 50, 50, 50 \nExpected result: 50 \nActivity 9.5 \nProvideanothersetoftestdataandits \nexpected remit. \nTesting also needs to be done to prove that tl1c solution does not give incorrect \nresults. In order to do this, test data should be used that will be rejected as the \nvalues arc not suitable. This type of test data is called ERRONEOUS or ABNORMAL \nTEST DATA; it should be rejected by the solution. \nFor example erroneous/abnormal data for an algoritlm1 to record the \npercentage marks from 10 end-of-term examinations for a student and find \ntheir average mark could be: \nErroneous/abnormal data: - 12, elc\\·cn \nExpected results: these values should be rejected \nActivity 9.6 \nProvide some more erroneous/abnormal data \nlorthisalgorithmanditsexpectedresults. \nTest data \n9 \nPROBLEM-SOLVING AND DESIGN \nWhen testing algorithms with numerical values, sometimes only a given range of \nvalues should be allowed. For example, percentage marks should only be in the \nrange O to 100. The algorithm should be tested with EXTREME DATA, which, in \nthis case, are the largest and smallest marks that should be accepted. Extreme data \nare the largest and smallest values that normal data can take. \nExtreme data: 0, 100 \nExpected results: these values should be accepted \nl11crc is another type of test data called BOUNDARY DATA; this is used to establish \nwhere the largest and smallest values occur. For example, for percentage marks in \nthe range Oto 100, the algorithm should be tested with the following boundary \ndata; at each boundary two values arc required, one value is accepted and the \nother value is rejected. \nBoundary data for O is - 1, 0 \nExpected results: - 1 is rejected, 0 is accepted \nActivity 9. 7 \nProvideboundarydatafortheupperendoltherange;as.sumethatthepm:entagemarbare \nalway:swholenumbers \nActivity 9.8 \nThe erid.ol-term examinations are now marked out of 20. Provide the following \nil lwosetsofnormaldataandtheirexpectedresults \nb someerroneous/abnormaldataandtheirexpectedresults \nc twosetsofboundarydataandtheirexpectedresult1. \n9.4 Validation and verification \nln order for computer systems to only accept data inputs that arc reasonable and \naccurate, every item of data needs to be examined before it is accepted by the \nsystem. Two different methods, with very similar sounding names, are used. For \ndata entry, VALlDATION is performed automatically by the computer system to \nensure that only data is that is reasonable is accepted and VERIFICATION is used to \ncheck that the data docs not change as it is being entered. \n9.4.1 Validation \nValidation is the automated checking by a program that data is reasonable before \nit is accepted into a computer system. Different types of check may be used on \nthe sa.n1c piece of data; for example an examination mark could be checked for \nreasonableness by using a range check, a type check and a presence check. When \ndata is validated by a computer system, if the data is rejected a message should be \noutput explaining why the data was rejected and another opportunity given to \nenter the data. \n9.4 \nCub \nFigur•9.60ataentryemlf~ \nThere are many different types of validation checks including: \n• range checks \n• length checks \n• type checks \n• character checks \n• format checks \n• presence checks \n• check digits. \nA RANGE CHECK checks that only numbers within a specified range are accepted. \nFor example percentage marks between O and 100 inclusive. \nA LENGTH CHECK checks either: \n• that data contains an exact number of characters, for example that a password \nmust be exactly eight characters in length so that passwords with se\\·en or fewer \ncharacters or nine or more characters would be rejected \n°' \n• that the data entered is a reasonable number of characters, for example a family \nname could be between two and 30 characters inclusive so that names with one \ncharacter or 31 or more characters would be rejected. \nA TYPE CHECK checks that the data entered is of a gi\\·cn data type, for example \nnumber of brothers or sisters would be an integer (whole number). \nA CHARAcrER CHECK checks that when a string of characters is entered it docs \nnot contain any invalid characters or symbols, for example a name would not \ncontain characters such as %, and a telephone number would only contain digits \nm (, ), a ,d ,. \nA FORMAT CHECK checks that the characters entered conform to a pre-defined \npattern, for exam ple in Figure 9 .6 the cub number must be in the form \nCUB9999. \nA PRESENCE CHECK checks to ensure that some data has been entered and the \nvalue has not been left blank, for example an email address must be given for an \nonline transaction. \nValidation and verification \n9 \nPROBLEM-SOLVING AND DESIGN \nSc,eenbefore login attempt \nS<reen atterloginattempt \nFigu,.9.7Pfesenced\\ed<:mo,me,,;age \nA C H ECK DIGIT is the final digit included in a code; it is calculated from all the \nother digits in the code. Check digits are used for barcodes, product codes, \nInternational Standard Book Numbers (ISBN) and Vehicle Identification \nNumbers (VIN). \nCheck digits are used to identify errors in data entry caused by mis-typing \nor mis-scanning a barcode. They can usually detect the following types of error: \n• an incorrect digit entered, for example 5327 entered instead of5307 \n• transposition errors where rnro numbers have clianged order, for example 5037 \ninsteadof5307 \n• omitted or extra digits, for example 537 instead of5307 or 53107 instead \nof5307 \n• phonetic errors, for example 13, thirteen, instead of 30, thirty. \nIS8N97B-0-340-983B2-9 \n, ll~!llmllllJIJIJIUII \nFigu,.9.8IS8N 13rndewithched<:digit \nAn example ofa check digit calculation is ISBN 13, where the 13th digit of the \nISBN code is calculated using the following algorithm. \n1 Add all the odd numbered digits together, excluding the check digit. \n2 Add all the even numbered digits together and multiply the result by 3. \n3 Add the results from 1 and 2 together and divide by 10. \n4 Take the remainder, ifit is zero use this value, otherwise subtract the remainder \nfrom 10 to find the check digit. \n9.4 \nA~ \n9 7 8 0 3 4 0 9 8 3 8 2 @ \n~/y '\"°''';,;, \nEv• ndigits \nFigure9.91S!lN \nUsing the ISBN above 9 7 8 0 3 4 0 9 8 3 8 2 without its check digit: \n1 9+8+3+0+8+8 - 36 \n2 3(7 + 0 +4+ 9 + 3 +2) - 75 \n3 (36 + 75)/10 - 11 remainder l \n4 10 ~ l - 9 the check digit. \nTo check that an ISBN 13 digit code is correct a similar process is followed. \n1 Add all the odd numbered digits together, including the check digit. \n2 Add all the e\\·en number of digits together and multiply the result by 3. \n3 Add the results from I and 2 together and divide by 10. \n4 The number is correct if the remainder is zero. \nUsing the ISBN above 9 7 8 0 3 4 0 9 8 3 8 2 9 with its check digit: \n1 9+8+3+0+8+8+9 - 45 \n2 3(7+0+4+9+3+2 ) - 75 \n3 (45 + 75)/ 10 - 12 remainder 0 \n4 Remainder is O therefore nwnber is correct. \nActivity 9.9 \na Find the (heck digit for the ISBN 978190612400. \nb AretheselSBNscorrect? \ni 9718780171500 \n11\n9781234567897 \nActivity 9.10 \n• Find an ISBN, then show that its chfil digil is correct \n• Working in pairs find two ISBNs each, copy one down with a transpmition error and the other \nonecorrectly.Swapyour1S8Nsandseeilyoucanfindtheonewiththeerror. \ne lookatacorrectlSBN,canyouthinkolanerrorthatthissystemwillnotidentilyandexplain \nwithanexamplewhythisisthecase? \nActivity 9.11 \nFind out about the modulo 11 check digit cakulation and how it is used for VlNs \n( Activity 9.12 \n~nd out how limit checks and consistency checks are used \nValidation and verification \n) \n9 \nPROBLEM-SOLVING AND DESIGN \nActivity 9.13 \nWhich validation checks could you use for the following? You may decide that more than one \nvalidation check is required \na Entering a telephone number. \nb Entering a student's name \nc Entering a part number in the form XXX999, where X must be a letter and 9 must be a digit. \n9.4.2 Verification \nVerification is checking that data has been accurately copied onto the computer \nor transferred from one part of a computer system to another. \nVerification methods include: \n• double entry \n• screen/visual check \n• parity check \n• checksum. \nFor DOUBLE ENTRY the data is entered twice, sometimes by different operators; \nthe computer system compares both entries and outputs an error message \nrequesting that the data is entered again if they are different. \nCustomer Information \nFigure9.100oubleentry \nA SCREEN/VISUAL CH ECK is a manual check completed by the user who is \nentering the data. When the data entry is complete the data is displayed on \nthe screen and the user is asked to confirm that it is correct before continuing. \nThe user either checks the data on the screen against a paper document that is \nbeing used as an input form or confirms from their own knowledge if the data \nis about them. \nParity cl1ecks and checksums are discussed in Sections 2.3.l and 2.3.3. \n9.5 \n9.5 Using trace tables \nA thorough, strucmred approach is required to find out the purpose of an \nalgorithm, which involves recording and srudying the results from each step in the \nalgorithm. This will reguire the use of test data and trace tables. \nConsider the algorithm represented by the following flowchart: \nFigure 9.11Flowcharttotrace \nA TRACE TABLE can be used to record the results from each step in an algorithm; \nit is used to record the value of an item (variable ) each time that it changes. This \nmanual exercise is called a DRY RUN. A trace table is set up with a column for each \nvariable and a column for any output. For example: \ntH±£J \nTest data is then used to dry run the flowchart and record the results on the \ntrace table. \nTest data: 9, 7, 3, 12, 6, 4, 15, 2, 8, 5 \nUsing trace tables \n9 \nPROBLEM-SOLVING AND DESIGN \nTable92Completedtfacetablefo,!Jow<ha,t \nOutput \nIt can be seen from the output that the algorithm selects the largest and the \nsmallest numbers from a list of 10 positive numbers. The same trace table could \nhave been used ifthc algorithm had been shown using pseudocodc. \nFigure9.12 Psrudocodefo, thesamealgo<ithmtotface \n9.6 \nActivity 9.14 \nUsethetracetablebelowandthetestdata4,8, 19, 17, 3, 11,6, 1, 13,9torecordadryrun \nofthep1.eUdocode \nTable9.3Tracetableto~tefofthepseudocode \nA \nB \nC \nX \nOutput \n9.6 Identifying and correcting errors \nActivity 9.15 \nIdentifying and correcting errors \nUse a trace table and the test data 400,800,190,170,300,110,600,150,130, 900torec:ord \nanotherdryrunolthepseudoc:odeorllowc:hart. \nYour completed trace table should look like this: \nTable 94 Completedtra,cetable \nThere is an error as the smallest number has not been identified. \nActivity 9.16 \nUseatracetableandsomenegativetestdatatorec:ordanotherdryrunofthepseudcx:odeor \nflowchart. What error have you loondt \n9 \nPROBLEM-SOLVING AND DESIGN \nThe algorithm only works for numbers between O and I 00; a better algorithm \ncould look like this: \nFigu..,9.13Abette,algor;thm \nThis algorithm is very similar and works for a much larger range of numbers but \nit still does not work for every set of numbers. In order to do this the algorithm \nneeds to be rewritten to allow the largest and smallest numbers to be tested \nagainst numbers that appear in the list. Figure 9.14 shows this. \n9.7 \nFigur•9.14Arruch betteralgo<ithm \nActivity 9.17 \nChange the pseudocode so it works for eV!'ry set of numbers like the flowchart above \n9.7 Producing algorithms \n9.7.1 Stages in producing an algorithm \n1 Make sure that the problem is clearly specified. \n2 Break the problem down into sub-problems; if it is complex, you may want to \nconsider writing an algorithm for each sub-problem. Most problems, even the \nsimplest ones can be divided into: \n• sctup \n• input \n• processing \n• outputofresults. \nProducing algorithms \n9 \nPROBLEM-SOLVING AND DESIGN \n3 Decide on how any data is to be obtained and stored, what is going to happen \nto the data and how any results are going to be displayed. \n4 Decide on how you arc going to construct your algorithm, using a flowchart \nor pscudocodc. \n5 Construct your algorithm, making sure that it can be easily read and understood \nby someone else. This involves setting it out clearly and using meaningful \nnames for any data stores. The algorithms that you have looked at so far in this \nchapter were not designed with readability in mind because you needed to work \nout what the problem being solved was. \n6 Use several sets of test data (normal, abnormal and boundary) and trace tables \nto find any errors. \n7 If any errors arc found, repeat the process until you think that your algorithm \nworks perfectly. \nHa\\'c a look at a more readable flowchart showing the algorithm to select \nthe largest and smallest numbers from a list of 10 numbers. \nFigu,.9.15Areada<Jealgorithm \nMore practice on producing algorithms is given in"
  },
  {
    "chapter": "Chapter 10.",
    "text": "0 \n9.7 \n9.7.2 The effectiveness of a solution \nThere are many different solutions to the same problem. ln order to consider \nthe effectiveness of a gi\\·en solution ask the following questions. \n1 Does the solution work for all sets of data? \n2 Does the solution have any unnecessary processes that are never used? \n3 Arc any actions repeated more often than necessary? \n4 Can the solution be simplified and still work as well? \nActivity 9.18 \nConsiderthelollowingalgorithmwritteninpseudocodetochl'<X ilachildisoldenooghortall \nenough to go on a theme park ride. Comment on its effectiveness \n<Xrl'PITT'Pleaoeenterageofchildinyeara • \nO\\ll'PUT'Pleaoeenterheightofchildin ..,,treo• \nINPUT Height \n0\\11'P!1I' ' Pl<1aoeenterweightofchildinkilograru, • \nINPIJ'Flleight \nIFA<Je.>-\n5T!l&NOUTPUT\n' 0K' \nIFHeight>-\nlTll&NOUTPUf'OK' \nIFAge<5A!ID11eight<lTIIIUf0UFPUT\n' Youcannotride• \nFigur•9.16Pseudocode to<hecktheheighta,nda.geofach;ld \nProducing algorithms \n9 \nPROBLEM-SOLVING AND DESIGN \nEnd-of-chapter questions \nl Name and describe the comixinents of a computer \nsystem. \n2 A computer S)'Stem is to be de\\'eloped to provide \na modulo l l check digit for numbers from four to \n20 digits in length. Provide a strucrnre diagram for \nthis computer system. \n3 A phone app is being developed to split the cost of \na restaurant bill between a given number of people. \nIt is being designed to work for up to 12 diners \nand for bills from $10 to $500. \na What \\'alidation checks should be used for the \nnumber of diners and the size of the bill? \nb Provide two sets of normal data and their \nexpected results. \nc Provide some abnormal/erroneous data. \nd Identify the boundary data required and \nthe expected results. \n4 Explain what is meant by \\'alidation and \\·erification. \n5 The follmving data is to be entered onto an online \nform: \n• dateofbirth \n• password \n• phone number. \nFor each item state , with reasons, the validation \nand verification checks that should be used. \n6 Using ISBN 13: \na Find the check digit for ISBN 978034098382 \nb Are these ISBNs correct? \n9780521170653 \n9780596158086 \n7 1l1e following algorithm shown as a flowchart \nchecks the sizes of a consignment of 10 parcels. \nThe dimensions of each parcel are input in \ncentimetres. \nFiguN9.17 Howch..-t \na Use this data and the trace table to dry run the \nalgorithm. \n15, 10, 20, 17, 32, 10, 30, 35, 30, 15, 30, 28, \n25, 25, 20, 15, 40, 20, 12, 10 \nTable95Tracetableto~te \nCounter \nLength \nBreadth \nAr.a \nOutput \nb \\Vhat are the rules required to accept a parcel? \nc Comment on the effectiveness of the algoritlm1. \n8 This algorithm written in pseudocode adds up \n10 positive numbers. It contains several errors. \nPRINT\n' l!nterapo,, itivewholenwsber' \nFigure9.1BPseudococleforakjorithm \na Identify all the errors in tl1e algorithm. \nb Comment on the effectiveness of the algoritlm1. \nc Rewrite tl1e algorithm so tl1at it is effective and \nerror free. \nd Set up a trace table and some test data to dry \nrun your n.·written algorithm. \ne Identify which items of your test data are \nnormal, erroneous and extreme. \nEnd-of-chapter questions \n9 State two different validation checks and give \nan example of their use. Each example should \nbe different. \n[4] \nCambridge [GCSE Computer Studies 7010/0420 \nPaper 12 Q9(b) June 2012 \n10 NC'.11 software is often dL·veloped using top-down \n(modular) design. \nGive tl1ree benefits of using this method of \ndC'.•elopment. \n[3] \nCambridge !GCSE Computer Studies 7010/0420 \nPaper 13 Q2 November 2012 \n11 A program requires the user to type in a user ID \nwhich must be in the form: \nXX999999 \nwhere X stands for any letter, and 9 stands for any \ndigit. \na Name two possible validation checks that \ncould be applied to this user ID. \n[2] \nb Name a validation chec.k that could not be \nused on this occasion. Give a reason for your \nchoice. \n[2] \nCambridge [GCSE Computer Studies 7010/0420 \nPaper 13 Q5 November 2012 \n@ Pseudocode and flowcharts \nlnthischapteryouwilllearnabout: \ne thepseudocodelorassignment,using<-\n• thepseudocodelOfconditionalstatements \nIF ·- TIIEN -\nELSE ·- ENDIF \nCASE ·- OF -\nOTHERWISE ·- ENDCASE \ne thepseudocodelorloopstructures \nFOR._TQ_NEXT \nWHILE ·- DO ·-\nENDWHILE \ne thepseudocodelOfinputandoutputstatement:5 \nINPUT and OU'JPUI \n{e.g. READ and PRINT) \ne thepseudocodelorstandardactions \ntotalling(e.g. Sum .. SUlll + Number) \ncounting(e.g.Count .. count+l} \n• the standard llov,diart symbols for the above statements, commands and structures \n.) \n10.1 Introduction \nUsing pscudocodc is a clear and concise way to represent an algorithm. Data \nitems to be processed by the algorithm arc given meaningful names in the same \nway that variables and constants are in a high-level programming language. \nPseudocode is not bound by the strict syntax rules of a programming language. \nIt does what its name sa)'Si it pretends to be programming code! \nTo ensure that pseudocode is easily understandable by others it is useful to be \nconsistent in the way that it is written. The pseudocode in this book is written in \nthe following way to help you understand the algorithms more easily: \n• Courier New font is used throughout \n• all keywords (words used to describe a specific action (e .g. INPUT) are written \nin capital letters \n• all names given to data items and sub-routines start with a capital letter \n• where conditional and loop statements arc used, repeated or selected statements \nare indented by two spaces. \n10.2 Assignment \nValues arc assigned to an itcm/\\'ariable using the -\noperator. The 'lariable on the left \nof the -\nis assigned the w.lue of the expression on the right. 111c expression on the \nright can be a single \\'alue or se\\'cral \\'alucs combined with mathematical operators. \nTable10 1 Mathematicajope,ators \nOperator \nrrultiply \nraisetothepowe, \n() \n()'()Up \n10.3 \nExamples of pseudocode assignments: \nCost has the value 10 \nPrice <- Cost * 2 \nPrice has the value 20 \nTax <- Price * 0 .12 \nTax has the value 2.4 \nSellingPrice <-Price+ Tax \nSellingPricehasthevalue22.4 \nGender <-\n\"M\" \nGender has the value M \nChosen <- False \nChosen has the value False \nActivity 10.1 \nW'hat values will the following variables have alter the aslignmeot:5 have been completed? \n10.3 Conditional statements \n\\Vhen different actions are performed by an algorithm according to the \\'alues of \nthe variables, conditional statements can be used to decide which action should \nbe taken. \nThere are two types of conditional statement as shown below with an example \nof each. \n• A condition that can be true or false: IF ·- THEN -· ELSE ... ENDIF, for \nexample \n• A choice between several different values: CASE ·- OF -· OTHERWISE . \nENDCASE, for example \n_,. \"'\"\"\" o, \n\"A\" \nPRINT \"Excellent\" \n: PRINT \"Average\" \nOTHERWISE PRINT \"Improvement is needed\" \nENDCASE \n10.3.1 IF ... THEN ... ELSE ... ENDIF \nFor an IF condition the THEN path is followed if the condition is true and the \nELSE path is followed if the condition is false. There may or may not be an ELSE \npath. The end of the statement is shown by ENDIF. \nConditional statements \n10 PSEUDOCODE AND FLOWCHARTS \nA condition can be set up in different ways: \n• Using a Boolean variable that can have the value TRUE or FALSE (see \nSection 11.4 for details of Boolean variables). For example \nTHEN PRINT \"Your search was successful\" \nELSE PRINT \"Your search was unsuccessful\" \n• Using comparison operators, as shown in Table 10.2. Comparisons arc made \nfrom left to right, for example A > 8 means is A greater than B. Comparisons \ncan be simple or more complicated. For example \nTable102Conva,isonq,e<al<ITT \nOperator \nComparison \nlareate,lhan \n1..-eate,thano,eaual \nlesslhaoorequaj \nnotequaj \n() \nI CJ\"oup \n1l1e algorithm below checks if a percentage mark is valid and a pass or a fail. 1l1is \nmakes use of two IF statements. The second IF statement is part of the ELSE \npath of the first IF statement. This is called a nested IF. \nIliPUTPercentageMa rk \nIFP<,rcentagellark<OORPercentageMark>lOO \nIFPe rce ntag eMark>4i \nFigure10.1 \nActivity 10.2 \n;.1:h~== ;;: ;'.\"'t be \ngreate,lhanah\\ll>dred \nThisisanesll'dIFstatementshown \nde,.-tybylhellSeofaserondlevei \nofiodentation.The percMtagemark \nisontytestedifjtisintheror,ectraoge \nChange the algorithm to check fora mark between O and 20 and a pass markol 10. Decide \nwhat normal. bo\\lndary and erroneous data you will need to l\\llly test yom algorithm \n10.4 \n10.3.2 CASE ... OF .. . OTH ERWISE ... ENDCASE \nFor a CASE condition the value of the variable decides the path to be taken. \nSeveral values arc usually specified. OTHERWISE is the path taken for all other \nvalues. The end of the statement is shown by ENDCASE. \nThe algoritlun below specifics what happens if the value of Choice is l , 2, 3 \nor 4. \nCASE Choice OF \n1 \n: Answer .. Numl + Num2 \n2 \n: Answer .. Numl -\nNum2 \n3 \n: Answer .. Numl * Num2 \n4 \n: Answer .. Numl I Num2 \nOTHERWISE PRINT \"Please enter a valid choice\" \nActivity 10.3 \nUse a CASE statement to di~laythe day of the week ii the variable DAY has the value 1 to 7 \nand an error otherwise \n10.4 Loop structures \n\\\\'hen some actions performed as part of an algoritlrn1 need repeating, this is \ncalled 'iteration'. Loop structures arc used to perform the iteration. \nThere arc three different types ofloop structure: \nOperator \nA ,epetitioo. where the numbe, of repeats is \nnotknown.ttlatiscompletedatleastonce \nComparison \nA ,epetitioo. where the numbe, of repeat, is \nWIIILE - · 00 ·- ENDWHILE \nnot known. ttlatmayneverbecompleted \nAll types ofloops can perform the same task, for example printing 10 stars. \nFOR Counter .. 1 TO 10 \n· \ni \nCounter .. Counter + 1 \nUNTIL Counter > 10 \nCounter .. o \nWHILE Counter c: 10 DO \nThe FOR \n... NEXT loop is the most efficient for this type of task. \n! \nI \n! \nI \n! : \nLoop structures \n10 PSEUDOCODE AND FLOWCHARTS \n10.4.1 FOR ... TO ... NEXT \nA variable is set up with a start value and an end value and then incremented in \nsteps of one until the end value is reached and the iteration finishes. The variable \ncan be used within the loop so long as its value is not changed. This type of loop \nis very useful forreadingvaluesintolists. \nFigure10.2 \n10.4.2 REPEAT ... UNTIL \nl11is loop structure is used when the number of repetitions/iterations is not \nknown and the actions arc repeated UNTIL a gi\\·cn c.ondition becomes true. \n111c actions in this loop are always completed at least once. \nTotalo-0 ~  \nMark..-0\n~ \nPRIN'T ' Rnter valuefor\nmark ,\n- ltofiniah• \nInputMa rk\n~ \nUNTIL!lark -\n- 1 \n~ \nFigure10.3 \n10.4.3 WHILE ... DO ... ENDWHILE \nThis loop structure is used when the number of repetitions/iterations is not \nknown and the actions arc only repeated WHILE a given condition is true. If \nthe WHILE condition is untrue when the loop is first entered then the actions \nin the loop arc never performed. \nTo t alo-0~ \nPRIIIT\n' Rnterval uefor ...,rk,\n- ltofinioh• \nInput Mark \nFigure10.4 \n10.5 \nActivity 10.4 \na Writepseudocodetoinput10pos.itivenumbersandfindthetotalandtheaverage \nb Writepseudorndetoinputpositivenumbers, - 1tolini~.andlindthetotalandtheaverage \nc Explainwhyyouchos.etheloop1tructuresloreachta1k \n10.5 Input and output statements \nINPUT and OUTPUT are used for the entry of data and display of information. \nSometimes READ can be used instead of INPUT; this is usually used for reading \nfrom files, which is not covered in this textbook. Frequently PRINT is used \ninstead ofOUTPUT. \nInput and output statements \nINPUT is used for data entry. It is usually followed by a variable where the data \ninput is stored, for example: \nOUPUT/PRINT is used to display information either on a screen or printed on \npaper. It is usually followed by a single value that is a string or a variable or a list \nof values separated by commas, for example: \n10.6 Standard actions \nThe ability to repeat actions is very important in the design of algorithms. When \nan algorithm is mrned into a program the same set of actions may be repeated \nmany thousands of times, for example, keeping a running total of the value of \ngoods sold in a supermarket. \ni_R_u_n_n_i_n_~!.o,•l __ : __ Run_n.1.n.~T_o_,.-_1 __ , .. Y•.l_u_e_ ·· ·· · · · ·· ·· ·· · · · ·· ·· · · · ·· ·· ·: .: .. : : :: : .. :J \nKeeping a count of the number of times an action is performed is another \nstandard action, for example: \nCounting is also used to count down until a certain value is reached, for example \nthe number of items in stock in a supermarket: \n! Nl:l~e;:i_nStock_ .. Nu~errn.St_o_ck _ - .. 1 --····----·-·-·--\n·-·-·---· · ····--···-·__] \n10.7 Examples of algorithms in pseudocode \nExa mple 1 \nTickets are sold for a concert at $20 each. If 10 rickets are bought then the \ndiscount is 10%; if20 rickets are bought the discount is 20%. No more than \n25 rickets can be bought in a single transaction. \n10 PSEUDOCODE AND FLOWCHARTS \na Use pseudocode to write an algoritlun to calculate the cost of buying a given \nnumber of tickets. \nb Explain how you would test your algorithm. \nb Would use test data with values of \n0, 26 \nExpected result rejected \nI , 25 \nExpected results 20,400 \n9, 10 \nExpected results 180, 180 \n19, 20 \nExpected results 342, 320 \nActivity 10.5 \nForthetestdatagiveninEXilmple1,identifythetypeoltest \ndatausedandsuggesl'iOmemoretestdata \nExample 2 \nA school with 600 srudents wants to produce some information from the results of the \nfour standard tests in Maths, Science, English and IT. Each test isoutof lOO marks. \nThe information output should be the highest, lowest and average mark for each \ntest and the highest, lowest and average mark o;erall. All the marks need to be input. \na Use pseudocode to write an algorithm to complete this task. \nb Explain how you would test your algoritlun. \n10.7 \nSubjectLowest .. 100 \nSubjectTotal .. o \nCASE Test OF \n1 : SubjectName .. \"Maths\" \n: SubjectName .. \"Science\" \n: SubjectName .. \"English\" \n4 : SubjectName .. \"IT\" \nOTHERWISE \nFOR StudentNumber .. 1 TO 600 \nREPEAT \nPRINT \"Enter Student\", StudentNumber,\"\"s mark for\", \nUNTIL Mark c: 101 AND Mark > ~1 \nIF Mark c: OverallLowest THEN OverallLowest .. Mark \nIF Mark c: SubjectLowest THEN SubjectLowest ... Mark \nIF Mark > OverallHighest THEN OverallHighest .. Mark \nIF Mark > SubjectHighest THEN SubjectHighest .. Mark \nOverallTotal .. OverallTotal + Mark \nSubjectTotal ... SubjectTotal + Mark \nNEXT \nSubjectAverage .. SubjectTotal/600 \nPRINT SubjectName \nPRINT \"Average is\", SubjectAverage \nPRINT \"Highest Mark is\", SubjectHighest \nPRINT \"Lowest Mark is \", SubjectLowest \n; ov,,callAv,m,10 .. OverallTotal/2400 \nAverage is\", OverallAverage \n•overall Highest Mark is\", OverallHighest \nExamples of algorithms in pseudocode \nb For the algorithm to be tested by dry running, it would be a good idea to \nreduce the number of students to 5 and the number of subjects to 2. \nActivity 10.6 \n11 Identify the changes you would need to make to the algorithm for Example 2 to reduce the \nnumberofstudentsto5andthenumberofsubjectsto2 \nb ldeotilythetestdataneededtotestEXilmple2withthereducednumberolstudeotsand \nsubjects. \nc Withthe..etofdatayouhavechosen,setupandcompleteatracetablesothatyoucan \ncompare your expected results with the actual results when you dry run the algorithm \n10 PSEUDOCODE AND FLOWCHARTS \n10.8 Standard flowchart symbols \nFlowcharts are drawn using standard symOOls. \n10.8.1 Begin/End \nTerminator symbols are used at the beginning and end of each flowchart. \nFigure10.5lermonatofsymbols \n10.8.2 Process \nProcess symbols are used to show when values are assigned to an item/variable \nlike an assignment in pseudocode. \nFigure 10.6 Proces,,)fflbol \n10.8.3 Input/Output \nInput/Output symbols are used show input of data and output ofinformarion. \nFigure10.7 1nput!Outputsymbol \n10.8.4 Decision \nDecision symbols are used to decide which action is to be taken next. These can \nbe used for selection and repetition/iteration. \nFigure10.8 0ecisionsymbol \n10.8.5 Flow lines \nFlow lines are used to show the direction of flow which is usually, but not always, \ntop to bottom and left to right. \nFigure 10.9Rowline \n10.8 \nExa mple 1 (continued) \nTickets arc sold for a concert at $20 each, iflO tickets are bought then the \ndiscount is I 0%, if 20 rickets are bought the discount is 20%. No more than \n25 tickets can be bought in a single transaction. \nc Draw a flowchart for the algorithm to calculate the cost ofbuying a given \nnumber of rickets. \nOutput\n•Yourticketo \ncost •, coot \nFigur• 10.10Flowd>artforExampje1 \nActivity 10.7 \nDraw a flowchart for the algorithm given in \nExample 2. \nChoosethemethodyouthinkistheclearest \nway to show this algorithm and explain why \nit is the dearest \nStandard flowchart symbols \n10 PSEUDOCODE AND FLOWCHARTS \nEnd-of-chapter questions \nl Show two ways of selecting diffen:nt actions using \npscudocode. \n2 You have been asked to write the pscudocodc to \nchoose the correct routine from the menu shown \nbelow. \na Decide which type of conditional statement you \na.re going to use:. \nb Explain your choice. \nc Write the psc:udocode. \nd Select your test dau and e.~plain why you chose \neach value. \n1 Set upnewAccOU'I\\ \n2Mahchangestoan&.istjr.gAccount \n4V;ewMy Orclers \n6Alter..nE!<islingOrde, \nFigu .. t0.11 \n3 Show three w.:iys a loop to :M:ld up fa·e numbers and \nprint out the total can be sc:t up using pscudocode. \nE.\"tplain which lo:i,p is the most efficient to use:. \n4 A sweet shop sc:lls 500 different sorts of sweets. \nEach sort of sweet is identified by a unique four-\ndigit code. All swt<'ts that start with a one ( I ) a.re \nchocolates, all sweets that start with a two (2) an: \ntoffees, all sweets that surt with a three (3) an: \njellies and all other sweets an: miscellaneous and \ncan start with any other digit except zero. \na Write an algorithm, using a flowchart, which \ninputs the four-digit cock for all 500 items and \noutputs the number of chocobtes, toffees and \njellies. \nb Explain how you would test your flowchart. \nc Decide the test data to use and complete a trace \ntable showing a dry run of your flowchart. \n5 The temperature in an apartment must be kept \nbetween 18°C and 20\"C. l fthe temperature reaches \n22°C then the fun i.s switched on; if the temperature \nreaches 16°C then the he.:iter is switched on, \notherwise: the fun and the heaters arc switched off. \nThe following library routines an: available: \n• GctTempcrature \n• FanOn \n• FanOff \n• HcatcrOn \n• HcaterOff \nWrite an algorithm, using pscudocodc or a \nflowchart, to keep the temperature at the right level. \n6 Daniel lives in Italy and travels to Me,dco, India \nand New Zealand. The time differences arc: \nCountry \n11ms, ifit is 10: 15 in Italy it will be 14:45 in India. \na \\\\'rite an algorithm, using pscudocode or \notherwise:, which: \n• inputs the name of d1e country \n• inputs the time in I roly in hours (H ) and \nmi.nutes (M) \n• calculates the time in the country input using \nthe data from the t.1blc \n• outputs the country and the time in hours \nand minutes. \n[ 41 \nb Describe:, with examples, two sc:ts of test data \nyou would use: to test your algorithm. \n[21 \nCambridge !GCSE Computer 5t,.die1 7010/0420 \nPaper JI Q/7 June 2011 \n7 A school is doing a check on the heights and weights \nof all its students. The school has I OOO snidcnts. \nWrite an algorithm, using pscudocodc or a \nflowchart,which \n• inputs the height and weight of all I OOO students \n• outputs the a,·cragc (mean ) height and weight \n• includes any necessary error traps for the input \nofhcight and weight. \n[51 \nCnmbridge !GCSE Co,Hp11ter Studie1 7010/0420 \nPaper 11 Q l 7 November2010 \n8 A small cafC: sells five types of item: \n• bun \n0.50 dollars \n• coffee \n• cake \n• sandwich \n1.20 dollars \n1.50 dollars \n2.10 dollars \n• dessert \n4.00 dollars \nWrite an algorithm, using pseudocode or a \nprogram flowchart only, which \n• inputs every item sold during the day \n• uses an item called 'end' to finish the day's input \n• adds up the daily amount taken for each type of \nitem \n• outputs the total takings (for all items added \ntogether) at the end of the day \n• outputs the type of item that had the highest \ntakings at the end of the day. \n[ 6] \nC11mlnidge !GCSE Computer Studies 7010/0420 \nP11per 13 Ql6 November 2012 \nEnd-of-chapter questions \n9 5000 numbers are being input which should ha\\·e \neither one digit ( e.g. 5 ), two digits ( e.g. 36), three \ndigits (e.g. 149) or four digits (e.g. 8567). \n\\Vrite an algorithm, using pseudocode or a \nflowchart only, which \n• inputs5000 numbers \n• outputs how many numbers had one digit, \ntwo digits, three digits and four digits \n• outputs the percentage of numbers which were \noutside the range. \n[6] \nC111nbridge IGCSE Computer Studies 7010/0420 \nP11per 13 QlS November2013 \n® Programming concepts \nlnthischapteryouwilllearnabout: \ne programming \ne dedarationanduseol \n• variables \n•constants \n• bask data types \n• integer \n• =I \n• char \n• string \n• Boolean \ne howtouse \n• sequence \n• selection \n• repetition \n• totalling \n• counting \n• useolpredelinedprocedurevfunctions \n11.1 Introduction \nChapters 9 and 10 ha\\·e enabled you to de\\·elop your computational thinking \nby writing algorithms to perform \\'arious tasks. This chapter will show you how \nto put your computational thinking to the ultimate test by writing computer \nprograms to perform tasks. \nSo far you ha\\·e tested your algoritluns by dry running. Once you have written a \nprogram for your algorithm, and when there are no syntax errors (see Section 7.4. 1), \nyou should then use a computer to nm the progr:1.m to complete the task you have \nspecified. The computer will perform the task exactly as you ha\\'e written it; you \nmay need to make some changes before it works exactly as you intend it to. \n11.2 Programming \nIn"
  },
  {
    "chapter": "Chapter 7 you learnt that programs could be written in high- or low-level",
    "text": "languages then translated and run. This chapter will introduce you to the \nprogramming concepts required for practical use of a high-level language. \nThere are many high-lc\\·el programming languages to choose from. For \nCambridge !GCSE Computer Science any high-le\\·el programming language may \nbe used, howe\\•er if you plan to continue your studies with A Level Computer \nScience then one ofVisual Basic, Pascal/Delphi or Python is recommended. \n,\\1any programming languages are free to download and use. This chapter \nshows the use of programming and should be used in conjunction with learning \nthe S)~ltax of an appropriate programming language. \nPrograms developed in this chapter will be illustrated using the following freely \na\\'ailable languages: \n• Scratch: a good basic introduction to programming for beginners that is freely \nalfllilable from M IT. Scratch makes programming easy and fun to learn as it uses \nvisual building blocks. It is useful as an introduction. \n• JavaScript: a scripting language that works in any browser, no download \nneeded. JavaScript works with the H TML (see Section 1.6.2 ). \n• Python: a general purpose, open source programming language that promotes \nrapid program de\\·elopment and readable code. \n11.2 \nThe traditional introduction to programming in any language is to display the \nwords ' H ello \\\\'orld' on a computer screen. The programs look very different: \nprint\n{• HelloWorld • ) \nPython \nFigure 11.1 Programs to display \nActivity 11 .1 \n</TITLll> \n<SCRIPT LA!!GOAGB -\n' J \" v\"Script'> \ndocunent .write\n(' He lloWorld 'l \n</SCRIPT> \n</HEAD> \nJavaScript \nHave a look at all thre-e programs and dedde which program is the easiest to understand. \nScratch and Python work in their own Integrated Development Environments \n(ID Es). \n·~·~- 1.,.0 (•1 . 1.0 · l><lhrl,~O.O,fl, sop >O lOll, 10, .. ,., , \n[MSC • • uoo !J H< (lo\n~ \nU ! )] ;~ WUIJl \n? ,..... ' GGP¥<i~h•' , 'ettdi<s' or \" U«f>HU' !or ..,,e lofo<Nnloo. \n»> - ------- USLUI.I - - -- ---\n>» I \nFigur• 11.2Pythoo l0f \nHello World \nFigur• 11 3Scratd\\pro~amrunn;ng \nProgramming \n11 PROGRAMMING CONCEPTS \nFigu,. 11.4 ScratchlOE \nJavaScript works in a browser. \nO HelloWon:J \n+ it RVIIOM..-.rtlod<to p/H \nC! \n•\n• Gooq,t JJ \nEJ• + _!_, \n\" \nFigu,. 11.5 .lavaScriptworkinginabmwser \nActivity 11.2 \nlnthehigh-levelprogrammi11glanguagethatyourschoolha1dios.entouse,writeandrunyour \nown program that displays the words 'Hello Computer Scientists' \n11.3 \nDeclaration and use of variables and constants \n11.3 Declaration and use of variables and constants \nA VARIABLE in a computer program is a named data store that contains a value \nthat may change during the execution of the program. In order to make programs \nunderstandable to others, variables should be given meaningful names. \nA CONSTANT in a computer program is a named data store that contains a value \nthat does not change during the execution of the program. In order to make \nprograms understandable to others, constants should be given meaningful names. \nNot all programming languages explicitly differentiate between constants and \n\\'ariables but programmers should be clear which data stores can be ch.,nged and \nwhich cannot be changed. There are several ways of doing this, for example: \n• use of capital letters: \n• meaningful names tl1at begin with Const: \nConstPi -\n3 .142 \nIt is considered good practice to declare at the start of a program the constants \nand variables to be used in that program. Declarations arc expected in programs \nwritten for the tasks specified in tl1e !GCSE Computer Science pre-release \nmaterial(sccScction 1.2.3). \nFigure 11.6Variableandcoostantdeda<abons;nScratc:h \nvarFirstVar,SecondVar; \ncon•tCon•tFirot\n-\n500,SecondCon•t -\nlOO; \nconstConstFirot\n-\n50; \nconstConstSecond -\n100; \nassi(jl\\edtl,e;rvalueswhen \nlheyarededaredbec:ause \nlheydonotc:haoge \nFigure 11.7 Variableandcoostantdeda<alionsinJavaSaipt \nSecondVar -\nJO\n~\nariablesandronstants \nConotFirot\n-\n500 \na<ededaredinl'ythonby \n:on• tSecond - 100 \nassi(jl\\ingvakles. \nFirotVar,SecondVar - i0,30 \nConotFirot,Con•tSecond - 500,100 \nFigure11.8Howtodedate variablesandcoostantsinl'ylhon \n11 PROGRAMMING CONCEPTS \nActivity 11 .3 \nlnthehigh-levelprogramminglanguagethatyourschoolhaschosentouse,dedarethe \nvariables and constants you would use in an algorithm to find the volume of a cylinder. \n11 .4 Basic data types \nIn order for a computer system to process and store data effectively, different \nkinds of data arc formally given different types. This enables: \n• data to be stored in an appropriate way, for example, as numbers or characters \n• data to be manipulated effectively, for example numbers with mathematical \noperators and characters with concatenation \n• automatic validation in some cases. \nInteger \nAn IN\"IBGER is a ix,siti\\·c or negative whole number that can be used with \nmathematical operators. \nReal \nA REAL NUMBER is a positive or negative number with a fractional part. Real \nnumbers can be used with mathematical operators. \nNot all programming languages distinguish between real numbers and integers. \nJa\\'aScript makes no distinction; Python docs with the use of built-in functions. \nFirstlnteger • int (25) \nsets up an integer \\'ariablc with the value of \n25 in Python \nFirstReal - float ( 25) \nsets up a real lfariablc with the \\'aluc of \n25.0 in Python \nChar \nA lfariablc or constant oftypc CHAR is a single character. \nvar Gender -\n'F' \nJavaScript \nGender -\n'F' or Gender -\n\"F\" \nPython \nStrin g \nA 'l:lriablc or constant oftypc STRING is sc\\'cral characters in length. Strings \\'ary \nin length and may even have no characters: an empty string. The characters can be \nletters and/or digits and/or any other printable symbol. For example: \nVar TelephoneNumber -\n'44121654331' \nJavaScript \nVar FirstName -\n'Emma' \nJavaScript \nVar UnRepeatable -\n' @ ! &&@@## ! ' \nJavaScript \nTelephoneNumber -\n'44121654331' \nPython \nFirstName -\n'Emma' \nPython \nUnRepeatable -\n' @!&&@@##!' \nPython \nActivity 11 .4 \nlnthehigh-levelprogramminglanguagethatyourschoolhaschosentouse,writeandrun \nyour own program that dis.plays the words 'Hello <YourName>'. Use a string variable to store \n11.5 \nHow to make your program work \nBoolean \nA BOOLEAN variable can ha\\·e only two values: TRUE or FAl..SE. \nVar Age0ver21 -\ntrue \nJavaScript \nAge0ver21 -\ntrue \nPython \nActivity 11 .5 \nAt the start of a program to store ,;ome personal informatioo you need to set up variables to \nstore thefollowingdat<1 \n• address \n\"\"'\"\"\" \ne over/undef 18yearsofage \ne rnlourofhair \ne shoesize \ne 'Neightinkilograms \nYou also need to set up coostants for male <1nd female \n• Selectme.-minglulvariablenamesandtypesforyourrnnst<1ntsandvariable1 \nb lnthehigh-levelprogramminglanguagethatyourschoolhaschosrotouse,writeandrun \nyourownprogramthatdisplaysthev<1luesyouhaveusedtoinitialiseyourvariablesand \nrnmtants \nc Make sure that you un input new values <1nd select suitable test data for your program. \n11.5 How to make your program work \nPrograms work by automatically following one instruction after another in \nscguence. Look at the following examples. \nPython file \n1'1r,.tNumbcr • 1nt ( OJ \nSee ondNlllllher • 1nt ( 0 ) \nSua • i.nt ( 0 1 \nl'\"irscN\\Utber • int (input( \"Enter 1'\"1:1;.,,; Whole Nw,,ber: \" )) \nSecond.Nl'IE.bcr - int (input ( ~tnter Second Whole NW!lber, \" ) I \n.5um \"' 1'1rso;Numbe r -t- Second.NU!tber \npri nt (~Trie 9WR equal.\" ~, Sllll'I) \nFigur• 11.9Pylhonprogram \nrwe •copvr~qM\", •creGi.:a• or •ucer.n (J\" ror it.Ore •nrorr::.acion. \n>>> rm-----·--- l!tslAAl ----\n-----\n~t.,r!l'frstllhahll.-...ce \n~ \n~t,,,.~•c<mdllholc-•, ll \nTl>es-cQUAl.s \nn \n>» I \nFigure 11.1 0Pylhooprigamrunning \n11 PROGRAMMING CONCEPTS \nl\n;;;;;:.;,-·= \n1 \n:::-;~. ~~--0 :J,.....Scr,pt\"> \n:: ::c:~~u • \nO, \nlluurw.l,U • \"'-\"<10,.,prciq,t( 'Enar Uut \"?a<>l• ,i-.,r• , '' I: \n5• c<AU&tM1r-\"1.nc1c,w .prcq,( 'EntuHaon<1\"\"°hnmat>u•,•• i , \nFigu,. 11.11 JavaS.Criptproc:,am \nExplorer User Prompt \n-\nJ \n1--\nI _: :1 \n----\n112 \nExplorer User Prompt \n-\n.,;---\n1--\n~1 \nl!'IJ • Iii! • Gl oi • £age • \n~fety - ,.,.,,. 8 · 0 0 0 \nThe sum equals 25 \nFigu,. 11.12 JavaS.Criptpriqamroonk,g \n11.5 \nHow to make your program work \nSometimes the next instruction to be obeyed will depend upon what has already \nhappened before and a selection has to take place. Look at the following examples. \nS • ccndN \n•= • u,t iO) \n~-,· Nir.t t IO) ·nti .fll'\"-Ci \"E.D<u hnt. -.a.b -~ -\n, eccnON=t>er • i n t. \\ 1IlJl H i •un.u ~ \n1111<>1- _, , \n\" )) \nFigur• 11.13Pythoopriqamshowings.election \nPython S.S.O (vS.S.0:b!l!d'bnet>fl, S..p a \nlOU, 10:55 :H) [M5t: v . UOO S2 bit ll n • \nt.d)] on 111n32 \nype: •copynQnt.•, •cre,nt.o• or •ucenoeo• ror aore 1nrorut.1on. \n>» \nUHiUU \n~u~ n ut ll?loU -\n\"' ~ \n~t.,.,.,.,..... .... ole N.-,.<:3 \nPint. Whole &u.t,,,,r h h~ot \n7 \nFigure 11.14Pythooselectionprog,amrunning \nfil<{di.:,C.\"h','~f,,,!!!dl.>\"9<»<1•l.t!l-\"'9>MoooR\"\"T~FX.\nPl\"'l~\nl'(n~\nX \nod f311il o o~l ~tafR l ~~ l • \\r l t ~LCBtii / \"'., 1 a!}!D l 'il !ii:i: _ :' \n~SCHPT u.nz=>: • \"Jn•Ser·p~\" ~ \nva.r Hroc11unr,,,, -\no : \nva.r SecandRmber -\nO ; \nFirotN<mt>er -\nvind<Y~ .pra,:pt( '~nte c firot ><t.ale nu.,,t,e r' , \nS• condll\"\"\"'u _ ,,,_n<b,...prccpt ( '[r.tu .. c,on~\"hah n=u• , \nFir,tN<mt>er -\np~r,ein t (firotN:mber)· \nsecoooJ<U!lll:er - c,,,roeincc aecon=n· \nH \n1nroc11unr,,,, ;,,econ<lN.-..r/ \ndocu.=nc .w: 1te{'firotWhaleNam>er,olaag,,,t \ndocu=nc .w: ite( 'Seccnd'1!>.olellemberi,lar1Jeot \nl' \n~ / SCRIPT>-\n20 \n</1'0DY> \n</HTML> \nFigur• 11.1 5laYaS.O-;ptselectioop<iqam \n11 PROGRAMMING CONCEPTS \n&plo,..., Usu Prompt \n-\n~f'roqt: \nErterl'ntwholerunber \npo \n&plon!':r Usl!r Prompt \n-\nI~ \n-~'. ~ I ~ C:\\Usim\\H~en\\ DHkll p • C I e SO!querm \nX I \nX Goc.gle L \n• ~I SO!arch • I· More » \nSign In ~ • \nGi . lii1. ea 'ffl' . f•g• • ~foty • \nT2ol, • G· lliJ lll 0 \nSecond Whole Number is largest 56 \nFigu,. 11.1 6JavaScr;pts.electionpmc_,amrunllOn9 \nSometimes instructions need to be repeated several times so a final result can \nbe obtained, this often im·olvcs the use of totalling and counting. Look at the \nfollowing examples. \nfi!.lditfg,m,tftl,n~'t(-\nl:l<IP \n=r--.:t 1~~) \n~- • u:c (0) \n..t,,h Co~nt ~ 5 : \nFigu,. 11.17 Pylhoorepeti!ioopro~am \n11.5 \nHow to make your program work \nPythor. 3 . 3 . 0 \nlv3 . 3 . 0:bd3orh9Dtl>n, S e p 29 2012, 10:SS : •8 ) \n[ HSC T . 16JO 32bit iin _! \nTYi>\" • copyrl~\"t\", •credH• \" o r \"Hcen,el)• ror more 1nror=t1o n \n»> ----------------\nRLSTM<T ---------------- ----\n! n t ernWholeNwr.ber: \n! nt eraWholeNwr.ber :7 \n!nt eraWho l e NUlf.ber : ! \n! nt er\naWho l e NUlf.ber:\n9 \n! n t er\naWhole NUlf.ber: lJ \n! :\nr !\n! iTen:mt>er,i, \nto \nFigure 11.1 8Pythoorepetitiooprog@mrunO.ng \nf ;i,, \n{di: ~•\"h '{~ f\"'![!d J..,ngUO'j t \n'i<!ling, Mmv R.., TcrtfX \n11\"'1i\"' \nl'{ndow Z \n., d im• . ;, ~ l -1'~ ~ 1;, cl • -\\r l t \n-c lllitei l e::;,(I!}\"51 [!1 ~ \n' \nH \nwlu ! e (Co=tc< 5 ); \nt' \ndocument. l'ri t e ( 'SU1\" c! rive nm,l\"-,c~ \nH \n</~CRI PT:> \nH \n</lllAD> \n</BODY> \nn \n</KrML~ \nFigure 11.1 9laYaScr;ptrepetitiooprogram \n11 PROGRAMMING CONCEPTS \nbplorerUnrPn>mpt \n-\nJ;==--\n~ \n~ \nExplorer User Prompt \n-\nJ;==--\n~ \n~ \nExplorer User Prompt \n-\n-\n1--\n~ \n~ \n: ;·---\nEicplorerUserPrompt \n-\n1--\n~ \n~ \n: ;·---\nEi<plorerUserPrompt \n-\n1--\n~ \n~ \n: :·---\nO\nT fill T ~ -ii T ea;t \" Saftty T T.11.ols T .\n.. 0 0 O \nSum offiH: numberli 1s 20 \nFigure 11.20 Java5cript ,epetitiooprogram runnmg \n11.5 \nHow to make your program work \n11.5.1 Sequence \nStatements are followed in sequence so the order of the statements in a program \nis important. Assigrunent statements rely on the variables used in the expression \non the right-hand side of the statement all having been given values. Input \nstatements often provide values for assignment statements. Output statements \noften use the results from assignment statements. \n'II \n11.5.2 Selection \nSelection is a very useful technique, allowing data items to be picked out \naccording to given criteria, for example selecting the largest value or the smallest \nvalue, selecting items over a certain price, selecting everyone who is male. This is \ndone with the use of if and case statements. \nJavaScript uses curly \n~~!'n~ ~\";:'~ :!~..i \nifthenumbe,islafge,than \nlhehg)PSI \nFigure 11.21 Selectioo \nActivity 11.6 \nBighe• t\n-\nNumber \nprint('Ahrgernwaberhu\nbeenfound• ) \niflKuoiber>Highe• t) \nBighe•t\n-\nNumbe r \ndocu...,nt.write \n( 'Alargernurberhasbeenfound') \nUsingthehigh-levelprogrnmminglanguagethatyourschoolhaschosentouse,findoutabout \nthe structure of if .. the n..el se and case statements. Not all programming languages indude \ntheuseofaca se statement \n11.5.3 Repetition \nMost programming languages support three types ofloop: \n• a fixed number of repetitions \n• an unknown number of repetitions with at least one repetition, as the condition \nis tested at the end of the loop \n• an unknown number of repetitions which may not be completed at all, as the \ncondition is tested at the beginning of the loop. \n11 PROGRAMMING CONCEPTS \nforCountarinrange(l,10),\n~\n. \nprint(• • •,end - ''l ~ \nfor(varCounte r\n-\nl;Counter<-\nlO;Counter -\nCounter + l) \n{ \nJav\"5criptUSl'5c,.fybfad::ets \ntoioentilythestatementsto \nbeexeruted;anewvariable \n-==--J withastartingvalue,coodibon \nFigure 11.22 faednumberofrepetitioos \nandincrementissetupfo,the \nlooprounter \nHewValue - window.pr001pt('Pleaoeenterapooitivenumber', \nHewValue -\npa roe Plo.o.t(HewValue ) \nJavaSaiptusesrurfybradetsto \nioentifythestatementstobe \nexeruted;thecooditiooistestedat \ntheendoltheloop \nFigure11.23 Unknownro.Jmbef ol,epetiboos,atH'ast onerompleted \nNewValue - float(input('Pleaoeenteranegativenumber•>> \nNewValue\n- float( input('Pl<iao <i e nte raliEGATIVEnumber')) \n========={ Pythoousesindentabontoideoblythe \n] \nstatemeotstobeexeruted;the.cooditioni, \ntestedatthe,tartoltheloop \nNewVa\n,><1 - wim10w.p~t('Peueenteranegativenumoer', \nNewValu <i - pane Float(N.,...Value); \nNewValue\n- window.p~t(•Ple u eente raNl!GA.TIV&nwsber•, \nNewValue\n- paneFloat (NewValue ) \n- -\n-======::::::lJavaSaiptusesrurfybradets.toioentilylhe l \nstatementstobeexeruted;theconditioor, \ntestedatthestartoftheloop \nFigure11.24 Unkl\\0Wflro.Jmbefol,epetiboos,statements inloopmayn..,e<beused \n11.5 \nHow to make your program work \n11.5.4 Totalling \nTotalling is used with repetition with the total updated e\\·ery time the loop \nis repeated. K.:eping a rmrning total is one ofthe most frequently used \nprogramming techniques in many computer systems, for example, the total on a \nreceipt at a supermarket checkout. \n·--······-·-·-··-······-······-······-···-\nL~.'::.'::.'::.~.P.~.'!.::~:~.--~·-··-~.'::.7.~.~-~-~-~~~.:~---~----~?~.~.?.~.~-~-~.:?. ___ _ \n11.5.5 Counting \nCounting is used with repetition with the counter increased by 1 every time the \nloop is repeated. Counting items or events is another of the most frequently used \nprogramming techniques, for example, counting the number of items sold in a \nsingle transaction at a supermarket. \ni NumberOfitems .. NumberOfitems + 1 \nAs well as counting upwards, a counter can be used to count down with the \ncounter being dee.ceased by I every time the loop is repeated, for example, \nremoving an item from stock every time one is sold. \n11.5.6 Writing programs \nExa mple 1 \nTickets are sold for a concert at $20 each, if ! O tickets arc bought then the discount \nis 10%, if20 tickets are bought the discount is 20%. No more than 25 tickets can \nbe bought in a single transaction. \na Write a program to calculate the cost of buying a given number of tickets. \nb Show how you would test your program. \n!~uo tr1ekou• l.at (01 \nD10co,,..~e • Ue ot \nIOJ \n,;01,: • \nU 0\"-< ( 0 ) \nwt,Uc l<\".zl>crOtr1cr«,t:1<\nl\n>e !>wu><,rO!'T1ckoe~•25 : \n11\".-1.0f llalr,tu • U aa t (u,put '\"*\"' -\"·\"1' uenu -1e1 '\"\"\" Hlr<I u, DaV' ')) \nt\n~-eOtTickcta < 10 : \n:::\":-e::.'.....~\n1:~;e!J\"e~=~,!;~! ,e:o=,,=. =,.=_=,.= .. =_=.=, =~~ :~!! ~n~t1':bination of) \npnc.t l'Yuctn.ocon• , con 1 \nFigure 11.25Exampje1inl'ython \n11 PROGRAMMING CONCEPTS \nfk 1• s ..... - -1.nj--.... _,,,\"\"' ,_, ...... -\nl \na iJ lilQ·,D~~ -\n~\n;ll ~ j .\n... \nt\n1 l cDaJ r.a1~'iJ\nO O ~ l!j·j ..i :JI O ';> \n-~ --\n...,,.rtl>Chc\"\"t• • un•- -pr-,CI w-\n'-'.c <o0• ~ Uy<• L, k• \n~ , , \n• , \n..,_, . ,,,,,.1., \n(..,_rtlfhe<C;o) \n..,1J e\n<(l<'-.,<>n1o•ot•\n< l\n) ll(,,_.,,,ruc.,to > 14 0,· \nH \n, .. ...,, , «OC,:1'hU< 00) \n~ \n,-----.,, \n~-.c-, - ~.O \n~ \n·-\nCcot •\nN-.Ortlfhckoe,\n•\n,O\n• \n•~•• -~«•( · =•<•n•co \nc~,, \nF1gure 11.26 JavaSrnptprigamfo, E~1 \nfltfditSl,o(_l~Qption,~\ntioif \nPythcn3.3.0 lv3.3.0:bdSo fl, 9o.1>f2 . 3~29201:l, \n~el.)J er. ll>nl2 \n,.,...,., •co~·,r::.or.t•, •c,:e<IJ.:s• or •uct.~aeo• tor 110re 1nto,,..tic~. \n»> \nR!S?AA? \nYoure1crusooo.2 u. o \nl> ------------------ R!Slr.RT -----~-----\nlkw iu.ny cicb u \n,u,ald you li b \nt o buy? 2 \nYour e,cttu\ncooc tO . O \n-\n...... ; i cUu \"\"\"1.d YOU Uh <o b,iy? to \n\"\"\" -\nny eict~~• ,mul.d you li b \n~o buy• - 1 \nlkw ... nyticbU,..,,,ld:fDaUtt.tobuy1 7 \nY<lltt u ctt.uco• c UO , O \nFigure11.27 Pmgram!P<lingfxamplel inl'ython \n11.5 \n, .. \n~ c,1-\n1D<>tt, P • C ·\n~\n1 \n\"('.o<-gl,: \n· !l lo>«h • t ...,.. . s.,. .. , . \na . g . i:;:i ,.. . t •!I' · }of•,- '2'11> · e · \"' Q o \nFigur• 11.28 Program tPStingExample 1 inJavaSaipt \nActivity 11 . 7 \nHow to make your program work \nr2!lk ,Jlll -:.-w...o..-w, .... P• d 9 1,..,.,,~1 \n><I \nX GoooglrL____:J{l>H\"h· f Uo,e» Sion .. \" · \na - liiil - ..i • \n- f,.., . ,.My· ,~,.,- e - li?l Iii o \nUsingthehigh-levelprogramminglanguagethatyourschoolhaschosentouse,writeaprogram \nfor Ex.ample 1. look at the test data used with the Python and Ja~aSuipt solutions; explain how \nyou would improve this test data to ensure that your program was fully tested \n11 PROGRAMMING CONCEPTS \nEnd-of-chapter questions \nl Explain the difference between a variable and a \nconstant in a program. \n2 State four different basic data types. 11lustrateyour \nanswer by declaring a variable for each one and \nassigning it a value. \n3 A school with 600 students wants to produce some \ninformation from the results of the four standard \ntests in Maths, Science, English and IT. Each test is \nout of l 00 marks. The information output should \nbe the highest, lowest and average mark for each \nttst and the highest, lowest and average mark \nO\\'erall. All the marks need to be input. \na Write: a program to complete: thiis task. \nb Explain how you would test your program. \n4 Write three programs showing the different ways \nthat can be used to add up five numben and print \nout the total. Explain which loop is the most \nefficic:ntto usc. \n5 A sweet shop sells 500 different sorts of sweets. \nEach sort of s-,vcct is identified by a unique four· \ndigit code. All sweets that start with a one ( 1) are \nchocolates, all s-,veets that start \"~th a two (2) are \nj:1~:s~~l :;~::~~hs:~:::;~i~i~:~;:!3Js :~d \ncan start \\\\1th any other digit except zero. \na Write a program, which inputs the four-digit \ncode for all 500 items and outputs the number \nof chocolates, toffeu and jellies. \nb Explain how you would test your program. \n@ \nData structures: arrays \nand using pre-release material \nlnthischapteryouwillle.-imabout \ne dedaratklnolone-dimensionalarrays \ne theuseolooe-dimensionalarrays \ne theuseolavariableasanindexinanarray \n• reading and 'Miting values in an array using a FOR _ TO ·- NEXT loop \ne usingpre-releasematerial \n12.1 Introduction \nOne of the advantages of using computer systems is their ability to accurately \nrepeat the same tasks many times, for example, producing electricity bills or \ncalculating exam scores. In order to do this, programs are written with loops for \nrepetitions to work with lists of similar items. \nThese lists are identified by the use of a single name and each item in the list \ncan be found by an index number showing the place in the list. This type of list is \ncalled a one-dimensional array. The items in the list are the elements of the array. \nFigure12.1Ustorm>e-dimensiooala,,ay \n12.2 Arrays \n12.2.1 One-dimensional arrays \nIn order to use a one-dimensional array in a computer program, you need to \nconsider: \n• what the array is going to be used for, so it can be gi\\'en a meaningful name \n• how many items arc going to be stored, so the size of the array can be \ndetermined \n• what sort of data is to be stored, so that the array can be the appropriate \ndata type. \n12 DATA STRUCTURES: ARRAYS AND USING PRE-RELEASE MATERIAL \nFor example, if a one-dimensional array for all the students' test marks in a class \nwas to beset up: \n• array name StudentMarkTest \n• number of items - number of students in the class, this could be a constant \nNoStudents \n• whole numbers need to be stored, data type Integer. \nArrays usually start at element O or element 1. Often if an array starts at clement 0, \nthe size of the array is given as one more than re'luired and clement O is not used. \nFigure 12.2Alfif'jdeclaratiooinJavaSc:ript \n~:fo':::::::1,:! ~~-e~l=r~t;;I \npositioo,1 to30them.mberofelements \ninthea,rayneedstobe31 \nArray declaration in Python \nListde<larationinPython \nFigure 12.30eda@IDnofhstsaodarray;,nl'ylhoo \nActivity 12.1 \nUsingthehigh-lewlprogramminglang\\Jilgethatyourschoolhaschosen,lindootaboutarrays \nii ls the first element 1 or07 \nb Howdoyoudeclarethesizeofan.-may? \nc Canyoudeclarethetypeol thearr~? \nd Oeclareanarrayto'>lorethetestmarksloradassol3051udents \n12.2 \n12.2.2 Using a variable as an index in an array \nIn order to repeat the same task many times for all the items in a list, each item \nneeds to be referred to in the same way using the index number for each element \nof the one -din1ensional array. !fa variable is used for this index number, then the \nsame code can be re-used for each item. \nStudentMarkTeot(Counter] - int(input( \"Pl eaoe EnterMark\")). \nPython \nStudentMarkTeot(Counter] - winOOW.pro,apt('PleueEnterMark',''); \nStudentMa rkTeot(Counter] - p,,.uelnt(StudentMarkTeot[Counter)); \nJavaScript \nFigure 12.4Us;ngav,.-iableasanir>dexinana1ray \nThis allows se\\·eral arrays to be used together with the same index number to \nshow related information, for example, each student could sit more than one test \nand the name and gender of the student could also be recorded. \nStudentHa!Ml(Counter] - window.pr~t('EnterStudentHa...,•, \nJavaScript \nStudentGender(Counter] - window.proq,t('EnterStudentGender', ''); \nStudentMarkTestl(Counter]\n- window.proq,t(•EnterStudentllarkforTestl', \nStudentMarkTeotl(Counte r]\n-\npa r oeint(StudentMarkTeotl[Counte r]); \nStudentMarkTest2(Counter]\n- window.proq,t{'EnterStudent!larkforTeot2', \nStudentMarkTeot2.7ter]\n-\nparoeint(StudentMarkTeot2(Counter]); \nr;.:::.::a.:·.:\"'_. ;;') \nl ~ferent,.-,ays \nJ \nStudentHa-.append (input (• Plea0<1 EnterStudentHame\")) \nStudentGender.append(input(\"PleaoeEnterStudentGender•)) \nStudentMarkTeotl(Counter]\n-\nint (input( • PleaoelmterMarkforTeatl ')) \nStudentMarkTeot2(Cou~]\n-\nint (input( • Pleaoe lmterMarkforTest2')) \n( Sameva,,ablellSl'd\n. \nastheindexfor·\"'1 \n1wo,.-,ay,fathem.<nencalvi1h;es \n~=:'e,~:,the,tnngand \nFigure 12.5Useolmultiple,.-rayswilhthe\"'\"\"' index \n12.2.3 Read or write values in an array using a \nFOR ... TO ... NEXT loop \nPython \nA FOR •. TO ... NEXT loop uses a fixed number of repeats so it is ideal to use \nwith an array, when the number of elements is known, as the loop counter can \nbe used as the array index. For example a FOR ... TO ... NEXT loop could be \nused to read values into two arrays to store two sets of test marks for a class of 30 \nstudents. \nAffays \n12 DATA STRUCTURES: ARRAYS AND USING PRE-RELEASE MATERIAL \n__jt~§~~ \nfor Counter in range (1, ConotHoStudenta +U,-~-\"--'.=-:=---' 1 \nStudentMarkTe•tl[CounterJ\n-\nint(input( •EnterMarkforTe•tl')l Python \nStudentMark'reat2[CounterJ\n- int(input('EnterMarkforTeat2')) \nJavaS<ript \nStudentMark'rea tl[CounterJ\n- window.proq,t('l!nte rMarkforTestl', \nStudentMark're•tl[CounterJ\n- paraelnt(StudentMarkTe otl[Counte r)l; \nStudentMark'rest2[CounterJ\n- window.p~t('llnterMarkforTeat2', \nStudentMarkTe•t2[CounterJ\n-\np araeint(StudentMarkTeot2[Counter)l \nFigu,.12.6Reading valuesintoanan~ \nAnother FOR \n... NEXT loop could be used to show \\'alues in the arrays \nthat store two sets of test marks for a class of 30 students. \nCona tlloStudento -\nint(30) \nforCounterinra nge(l,ConstHoStudents+l), \nprint(Studentl!arkTe• tl(Counter]) \nprint(Studentl!arkTe• t2 (Counter]) \nFigu,.12.7 UutputbngvaUesa~eadyslored,nana,;r~ \nPython \nJavaScript \nI \nActivity 12.2 \nUs.ingthehigh-lewlprogramminglanguagethat\"jO.Urschoolhaschosen,dedarearraystostore \ne thename1oladassof30students \ne thegenderofe;ichstudentasMorF \ne themarbfortwotestsloraclassof301tudents \nWhen storing \\'alues that arc input in any \\'ariablc or array, \\'ll.lidarion checks \nshould be used (sec Section 9.4.1 ). For example when inputting the gender for \nthe acti\\'ity abo\\'e only M or F should be allowed. \n12.2 \nActivity 12.3 \nTheexamplesbelowte1tforM \nStudentGender.append (input(\"PleaseEnte rStude ntGende r \" )) \nPython \nStudentGender(CounterJ\n-\n(input (•Plea oellnte rStude ntGende rMorF\" )) \nStudentGeniler[CounterJ\n- winilow.proq,t('llnterStuilentGender', ''); JavaScript \n\"hile(StudentGender(Counte r] 1-\n'M'l \nStudentGender(CounterJ • .,inilo ... pro,apt('llnte rStude ntGende rMorF', \nFigur• 12.8 Chec:kinglorgender\"M\" \nExtendyourprogramtotestfor: \ne bothMandFinyourstudentgeoderarray \ne marksbetweenOandSOlorthelir,;ttest \ne marksbetweenOand 100forthe1econdtest. \nThe two previous activities ha\\·e enabled you to store validated data in four arrays; \nonce this data is stored you can use it to extract useful information. For example \nyou may want to find the students ,vith the highest and lowest mark for each test, \nthe average mark for each test, the average mark overall and the number of male \nand female students in each class. \nYou can find a student with the highest mark for test I like this: \nllighe• tMarkTe• tl\n-\nint(O) \nllighe• tlndexTe• tl -\nint(O) \nfor Counter in range (l, Con•tNoStudentul), \nif StudentMarkTestl(Counter] \n~ llighe•tMarkTestl, \nHighestMarkTestl -\nStudentMarkTestl(Counter) \nHighe8tlndexTestl -\nCounter \nvarHighe• tMarkTestl\n-\n0; \nvarHighe• tlndexTestl\n-\n0; \nif{StudentMarkTeotl[Counter)>HighestMarkTestl) \nHighestMarkTestl -\nStudentMarkTe&tl(Counter); \nHighestlndexTestl -\nCounter; \nFigur• 12.9fmdingthestuden\\w,thlhe t.,;,est,,..,.-kfortest1 \nPython \nAffays \n12 DATA STRUCTURES: ARRAYS AND USING PRE-RELEASE MATERIAL \nActivity 12.4 \nNowextendyourprogramaslollo= \nii Findthestudentswiththehighestmarksfortestsl and2 \nb Findthestudentswiththelov,,,estmarksfortestsl and 2. Hint:setyourlowestmarkvariables \nto SO and 100. \nc Findtheaveragemarkloreachtest.Hint:usearunningtotalanddividebythenumberol \nstudents at the end \nd Find the number of male and female students. Hint: count either males or females and \ncakulatetheotherbytakingawayfrom30. \n12.3 Using pre-release material \nIn order to answer practical questions based on pre -release material, you will need \nto practise the skills you ha\\·c learnt so far. The pre -release material will arri\\·c a \nfew months before your examination; you can discuss it with your teacher and \nyour fellow students. \nYou need to practise applying your skills to the tasks mentioned in the scenario, \nwhich is different for each examination series. \nH ere is a check.list of useful things to do. \n1 Read through the pre-release material several times. Check \\\\~th your teacher if \nthere is anything at all that you do not understand. \n2 For each task, write an algorithm using both pseudocode and a flowchart to \nshow what is required. \n3 Choose sets of test data that you will need to use, and work out the expected \nresults. Remember to use normal, boundary and erroneous data. Be able to \ngi\\'c reasons for your choice of test data. \n4 Complete trace tables to test your pseudocodc and flowcharts. 1his will enable \nyou to ensure that both the pscudocodc and the flowcharts work properly. It is \na good idea to get another srndcnt to trace your algorithms as well. \n5 Decide which works best for each task, pseudocodc or a flowchart, and why. \n6 Before starting to write your program for each task: \n• decide the variables, including any arrays, and constants you will need \n• decide the data types required for these \n• decide the meaningful names you will use \n• be able to explain your decisions. \n7 If you arc asked to repeat the same thing many times, for example adding \nup totals, complete the task for one and check it works before repeating it \nmany times. \n8 \\Vritc and test each task. You can use the same test data as you used for your \npscudocodc and flowcharts. \n( Activity 12.5 \nWork through the diecklist with the pre-release material for your examination \n) \n@\nDatabases \nlnthischapteryouwillle.-imabout: \ne whatdatabasesareusedlor \n• database ~tructure \ne practicalusesoladatabase. \n13.1 Introduction \nA DATABASE is a structured collection of data that allows people to extract \ninformation in a way that meets their needs. 111c data can include text, numbers, \npictures: anything that can be stored in a computer. \nDatabases are very usefol in preventing data problems occurring because: \n• data is only stored once - no data duplication \n• if any changes or additions are made it only has to be done once - the data is \nconsistent \n• the same data is used by everyone. \n13.2 What are databases used for? \nTo store information about people, for example: \n• patients in a hospital \n• students at a school. \nTo store information about things, for example: \n• cars to be sold \n• books in a library. \nTo store information about events, for example: \n• hotel bookings \n• resultsofraces. \nActivity 13.1 \nFind fivemoreuse1fordatabases,andforeachonedecidewhat1ort ofinlormationi1being \nCoed \n13.3 The structure of a database \nInside a database, data is stored in TABLES, which consists of many RECORDS and \neach record consists of several FIBLDS. \nRecotd1 \nField l \nRecotd2 \nField l \nField l \nField l \nRecotd5 \nField l \nRecotd6 \nField l \nFigur• 13.1 Struct .. e ofadatabasetabie \n13 DATABASES \nTables contain data about one type of item, person or event, for example: \n• a table of patients \n• a table of books \n• a table of doctor's appointments. \nEach record within a table contains data about a single item, person or event, for \nexample: \n• Winnie Sing (a hospital patient) \n• !GCSE Computer Science (a book) \n• the 15:45 apixiintment on 27 January 2014. \nEach field contains one specific piece of information about a single item, person \nor event, forexainple: \n• For a hospital patient the fields could include: \n• first name \n• family name \n• date of admission \n• consultant \n• ward number \n• bed number. \n• For a book the fields could include: \n• title \n• author \n• ISBN. \n( Activity 13.2 \nWhatlieldswouldyouexpecttolindineachrecordloradoctor'sappointments7 \n) \nIn order to be sure that each record can be found easily and to prevent more than \none copy of the same record being kept, each record includes a PRIMARY KEY field. \nEach primary key field in the table is uni'lue. \nl'rimarvke \nFieldl \nl'rimarvke \nF\"'ldl \nPrimary key \nPrimary key \nl'rimaryke \nl'rimaryke \nFigu,. 13.25tructureofadatabasetab!eindtrlngaprimarykey \n1l1e primary key can be a field that is already used, provided it is uni'lue, for \nexample the ISBN in the book table, or a new field added to each record, for \nexample, a uni'lue hospital number could be added to each hospital patient's \nrecord. \nSometimes, a primary h.-y can be formed by using nvo or more existing fields, for \nexample, the doctor's appointments could have a primary key made from tl1e date \nand the tin1e of each appoinanent. \n13.4 \n13.4 Practical use of a database \nAs a Cambridge !GCSE Computer Science student you need to be able to do the \nfollowing: \n• define a single -table database from given data storage requirements \n• choose a suitable primary key for a database table \n• perform a query-by-example from given search criteria. \nIn order to do this you will need to use a relational database management system. \nThe following case study shows how to set up a database with Microsoft Access \nand complete the tasks described above. \nCfbii@O \nBoy,;.-mdgirlsbetweentheagesolsevenandelevencanjoinacubscoutgroup. ~ \neowikipediaorgfwil::i/CubScout) \nEach cub scout group needs to keep records about its members. Most groups will keep the \nfollowinginformationabout&Khcubintheirgroup: \nToensu,eot.-rec:o,dsa,euptodate.pleaselilootalloflheinfom>abon \nbeiow. W,thoutacompletedfomi.yoorchild1<illnotbeabletopartidpate \ninmeetimpacti,,;ties \nFigur•13.3Datacollectionform \n13.4.1 Defining a database \nThis section shows you how to define a single-table database from given data \nstorage requirements and choose a suitable primary key. \nTocreatetherubscoutdatabase,openAccess,selecttheBlankdatabasetemplate \nJ:) \n'iWl -\no,uo«< .. _ \n'\"\"\"\"'\"' \nltmOiot<> \nFigur•13.4!llankdatabase \nandtypethelileoameCubScoutanddicktheCreatebutton \nPractical use of a da tabase \n13 DATABASES \nJa, \nlJ \nFiguN13.5Creatir,gtherubscootdatab.ase \nFiguN13.60esignView \nandnamethetableCub. \nFiguN13.7Namir,glhetable \nSetupthelieldstomatc:hthedatacollectionlormandindudetheprimarykey.Eachfield \nwill require a me<mingful name and a data type must be selected. The bas.ic: data types were \nintroduced in Section 11.4. TheyareavailableinAccessbutthe names are different \nAcces1alsohasotherdatatype1thatwillbeuseful:Date/TimeandCurrenc:y. \n13.4 \n'i CubNumber \nTe•! \nlexl \nOat.1\"lype \nDate{Trme \nTelephoneNuriber \nTe•t \nDate/Time \nFigur• 13.8Cubtab!efields \nAc:cessallowsvalidationdieckstobebuiltinforeachlield,lorexamplethegenderlield \n::::-= \n~ \nFigur• 13.9Gend<.>rheldvalklatioo \n=c.~· \n~ \n....,,En<oMfo,\"'\"\"'\"'\"''\"' \n'\". \nActivity 13.3 \nO!!eidewhidiotherlieldsshouldbe validated. \n13.4.2 Getting information from a database \nThis section shows you how to perform a query-by-example (QBE) from given \nsearch criteria. \nThe cub scout leader wants to be reminded before the first me{'ting in the month of any cub \nscoutswhowillhaveabirthdaythatmonth \nTosetupaquery-by-exampletoperformthistask.openthedatabase CubScout, selectthe \nCreate tab followed by Query Design \nFigur• 13.10 \nPractical use of a database \n13 DATABASES \nTheo add table Cub \nFigure 13.11 \nThe cub 'iCOul ledder wants to see the Name of any cub wilh a Date of Birth this month. \nSelect the fi~ds Name and Date of Birth, check the box to display the Name and check that the \nmontholtheDilteofBirthisthesamea1thecurrentmonth. \n' . \nRun \nFigure 13.12 \nFigure 13.13 \nTheorunthequerytotestit \nActivity 13.4 \nSetupacub'iCOutdatabasewith 10recordsinit.lncludeappmpriate validation.Usingqllel)'-\nby-example,writeaquerytopick outanycub1bomthismonth \nThecubSCOlltle.lderwantstopute<Khcubintoagroupcalleda's.ix'.Each'lix'canhaveuptosix \nrub'i in it and isgiwn a name, for example red, yellow, blue or green. Add a newtextlieldcalled5i)(. \nput&Khrubintoasix.Usingquery-b)'-example,writeaquerytopkkoutanyrub'i intheredsix. \nEnd-of-chapter questions \n1 A database of students is to be set up with the following fields: \n• Family name \n• Other names \n• Student ID \n• Date ofbirth \n• Date of entry to school \n• Currentclass \n• Current school year/grade \n• Email address. \na Select a data type for each field. \nb Which fields should be validated and which fields should be verified? \nc Decide the validation rules for those fields which should be \\'alidated. \nd Which field would you choose for the primary key? \ne Choose a suitable format for the student ID. \nf Build a database with at least 10 records. Include all your validation checks. \nEnsure there are at least three different classes and two different years/grades. \ng Set up and test QBEs to: \ni Print Other names, Family name and Email address in alphabetical order of \nfamily name \nii Select all the students from a given class \niiiSelect all the students for a year/grade and print Other names, Family name \nand Data of birth, grouping the students by class. \nEnd-of-chapter questions \n13 DATABASES \n2 A motor car manufacturer offers various combinations of \n• scat colours \n• scat materials \n• car paint colours. \nA database was set up to help customers choose which scat and paint \ncombinations were possible. \ncar paint colours \nNotes: N - no, not t1 p01s1ble combmntwn, Y • yes, combinntwn is pomble. \nFigure13.14 \na How many records arc shown in the database? \nb The following search condition was entered using a query-by-example grid: \ncarpaintrolours \nrode \nD \nD \n./ D \nFigureB.15 \nWhat will be displayed? \nc A customer wants to know the possible combinations for a car with leather \nseats and cithcrsikcrorgrcypaint. \nWhat search condition needs to be input? Copy and complete the table. \nFigureB.16 \n3 A database was set up to compare oil companies. A section of the database is \nshown below: \nemploye• \nGazjeti \nWa5fJPetrol \nFigure 13.17 \nEurope \nEurope \nProfits \n(billion$) \nShare \nprice($) \na Howmanyfieldsarethereineachrecord? \n(1) \nb The following search condition was entered: \n(No o f countries< 30) AND (H ead office - \"Americas\") \nUsing Code only, which records would be output? \n(2) \nc What search condition is needed to find out which oil companies ha\\'e a \nshare price less than $50 or whose profits were greater than 8 billion \ndollars? \n(2) \nCambridge [GCSE Computer Studies 7010/0420 Paper 13 Ql2 June 2013 \n4 A database was set up to keep track of goods in a shop. A section of the \ndatabase is shown below: \nFigure 13.18 \nNumber in \n·-· \nPric• of \nitem($) \nValue of \nstock($) \na How many records are shown in this section of database? \n(1) \nbi Using Item code only, what would be output if the following search was \ncarried out? \n(Number in stock < Re-order level ) AND (Items ordered - \"No\") (2) \nii What usefol information does this search produce? \n[ 1] \nc Write a search condition to locate items costing more than $2.00 or which \nha\\·e a stock value exceeding $300.00. \n(2) \nCambridge [GCSE Computer Studies 7010/0420 Paper 13 Q9 November 2013 \nEnd-of-chapter questions \nIndex \nA \nAbiword(wordprocessor),free \nsoftware112 \nacknowledgement 21 \nACM(AssociationforComputer \nMachinery),codeofethics \n110-111 \nacoustidsoundsensor 62 \nactuators51,62,71 \nADC(analoguetodigitalconverter) 62 \nadditivemanufacturing 69 \naddressbus45 \naddresses,incomputermemory 45,47 \nAdobeReader(freeware) 112 \nairports,useofscanners 53 \nalarmapp,forasmartphone 116 \nalgorithms \nfindingthepurpose118,125 \nflowcharts 117,118 \nidentifying and correcting errors \n127-129 \nproducing 129--131 \npseudocodellS,139-141 \nstandardactions 139 \nALUarithmeticandlogicunit 47,48 \nAND gate 26,27 \nmade up of of NAND gates 39 \nAndroid 42 \nanonymoususerprofile 101 \nanti-lock braking systems 65-66 \nARQ(automaticrepeatrequest) 21 \narrays \nname,sizeanddatatype 163-164 \none-dimensional 163-164 \nreadingorwritingvalues 165-167 \nASCII code 12,53,58,88 \nassemblers 93-94 \nassemblycode,hexadecimal 13 \nassembly languages 91-92 \nassignment \ninpseudocode134 \nstatements 156 \nasymmetricencryption 105-107 \nasynchronousdatatransmission 15-16 \naudiocompression 77 \nauthentication107 \nB \nback-lighting72 \nback-ups,regular101 \nbarcode \ncheckdigit122 \nreaders/scanners51,54-56 \nbinary numbers \nconvertingtodenary2-3 \nconverting to hexadecimal 6-7 \nbinder3Dprinting 69 \nbiometrics 108 \nBIOS(basicinput-outputsystem) 43,82 \nbirefringence86 \nbit(binarydigit)4 \nB1u·raydiscs85-86 \nBMP,rawbitmapimage 78 \nB0oleanal9ebra 26-29 \nBoolean variable 136,151 \nboundary data 119,169 \nbrowser \nfeatures24 \nsecurity99,103-104 \nuseofcookies25,100 \nuseofHTML 24 \nuseofJavaScript146,148 \nbuffers43-44,82 \nburglaralarm,monitoringsystem 64 \nbuses,function45 \nbyte,smallestunitofcomputer \nmemory 4 \nC \nCAD(computeraideddesign) \n52,69,70 \nCASE ... OF ... OTHERWISE ... \nENDCASE 137 \ncathode-ray monitors 72 \nCCD(chargecoupledevice) 52 \nCCFL(cold cathode fluorescent \nlamp) 72 \nCD/DVD storage media 71-72,85,87 \nCHAR,datatype 150 \ncharacterchecks121 \ncheckdigits121,122 \nchecksum 17,21-22,124 \nOR current instruction register \n47,48,49 \nclothing,'smart' 73 \nCNCmachining 69 \ncomparison operators 136 \ncompilers 93 \ncomputer architecture 45-48 \ncomputerethics 110-111 \ncomputermemory,sizeandunits 4 \ncomputer operation, incorrect 101 \ncomputer programs see programs \ncomputer systems \ncomponents 114 \ntop-down design 114, 115-116 \ncomputers,effectonsociety 110 \nconditionalstatements 135-138 \nconstants149,150 \ncontrol,useofsensors63,65-66 \ncontrolbits15-16 \ncontrolbus45 \ncontrolunit48 \ncookies25,100-101 \ncounting139,154-155,158 \ncracking98 \nCSS(cascadingstylesheet)file23-24 \nCT(computedtomography)scanners \nS>-54 \ncustomerloyaltycards 56 \ncutters,2Dand3D 51, 71 \ncyphertext107 \nD \nDAC(digitaltoanalogueconverter) \n62,71 \ndata \nanalogueinnature61 \nlocation in computer memory 47 \nlossorcorruption101 \nsafetyandsecurity97 \nstoring 149, 165-167 \ntypes150-151,169,172 \ndatabits15-16 \ndatabus45 \ndatacollectionform 171 \ndataentry,validationand \nverification 120 \ndata transmission \nasynchronous 15-16 \nintemettechnologies 22-25 \nparallel15 \nrate4 \nserial14-15 \nsimplex,half-duplexand \nfull-duplex14 \nsynchronous16 \nviaUSB15,16,57,58,59,88 \ndatabases \ncreating171-173 \ndefining169,171 \nsearching173-174 \nstructure169-170 \ndecisionsymbols 142 \ndeclaration,ofvariablesand \ndenary(base10)numbers 2 \nconversion to hexadecimal 8--9 \nconverting to binary 3 \ndenialofserviceattacks108 \ndigital cameras 51,57-58 \nXDorSD(SecureDigital) \ncards87 \ndigitallightprojectors(DLP) 74 \ndigitalsignatures107 \ndongle87 \nDOS 42 \ndoubleentry124 \nDRAM (dynamic RAM) 82 \ndryrun125,127,141,146 \nDVD-RAM 85 \nE \nechocheck22 \nEEPROM(electronicallyerasable \nprogrammable read-only \nmemory) 84 \nelectroniccircuits26 \nencryption 104- 108 \nalgorithm 105,106 \nsecure86 \nerroneous/abnormal data 119, 169 \nchecking 17-22 \nidentifyingal'ldcorrectlng 127- 129 \n,,,,., .. \nextremedata 120 \nF \nF--spot (photograph manager), free \nsoftware112 \nface recognition53,108 \nfetch-executecycle 49-50 \nfields,inadatabase169- 170,172 \nfile compression \nalgorithms 77,80 \nlosslessandlossy77,78,80-81 \nfile formats 76-80 \nfilesize,estimatlng 88--89 \nfingerprintscans108 \nfirewalls 102 \nflash memory 87 \nNANO technology 84 \nfloppydisks87 \nflow lines 142 \nflowcharts 114,117, 142- 143, 169 \nFOR ... TO ... NEXT loop 137- 138, \n16S-167 \nformatchecks 121 \nffeeware 112 \nfulkluplex data transmission 14 \nG \ngames, on DVO and Blu-<ay 86 \ngassenSOf\"62 \ngateway 102 \ngibibyte{GiB) 4 \ngigabyte(GB) 4 \nH \nhacking98 \nhalf--duplexdata transmlssion 14 \nhand•helddevices, LCD/LEO screens 74 \nhardwarefault,causlngdatalossor \ncorruption 101 \nhashingalgorithms 106,107 \nHDD(harddlskdrlves) 83 \nremovable 88 \nsize 4 \nheadphones 71 \nhexadecimal numbers \nconversion to binary &-7 \nconversion todenary 8-9 \nhexadecimal system \nnotation S-6 \nuses~13 \nhigh·level programming languages \n91,93,14&-148 \nhospital patients \ndatabaserecordsl70 \nmonitoring system 63, 64 \nHTML (hypertext mark-up language) \nhexadecimalcodes 10-11 \nand JavaScript 146 \nstructureanclpl\"esentation23-24 \nuseforwebi:>a9es 23-25 \nhttp (hypertext transfer protocol) 24 \nhttps(httpoversecure)24, 103 \npaclloc.ksymbol 24, 99,103 \nI \nIDE(integrated/interactive \ndevelopment environment) 95, \n147,148 \nIEC(lnternationalElectrotechnical \nCommission)convention 4 \nIEEE(lnstituteofElectricaland \nElectronics Engineers),codeof \nethics110-111 \nIF ... THEN ... ELSE ... ENDIF 135---136 \nifstatements 156 \nIndex number 163,165 \ninfra-redsensor62 \nlnkjetprinters67,68 \nlnputdevices48,51 \ninputstatements 13g,156 \ninputloutputdevices,supermarket \ncheckouts55---56 \ninput/output statements 139 \ninputloutputsymbols 142 \nintegers 150,151, 152 \nintellectualpropertyrights110 \ninteractive whiteboards 51, 66-67 \ninternet technologies, data \ntransmission 22-25 \ninterpreters93 \ninterrupthandler43 \ninterrupts43-44 \nIP(intemetprotocol)address \n22- 23,25 \nISBN (International Standard Book \nNumbers),checkdigits 122-123 \nISP(internetservice provider)22 \ndenialofserviceattacks108 \nJavaScript \narrays164,165,166,167 \ndatatypes150-151 \ndeclarationofvariablesand \nconstants 149 \ndisplay147,152 \nex.ample program 159,160 \nloops158 \nrepetition program 155,156, 158 \nselection program 153, 154, 156 \nworks in a browser 146,148 \nJpegOolntPhotographk Experts \nGroup)files 52, 53, 78-79 \nK \nkeydistributlonproblem 104 \nkey-logging software 100, 110 \nkeyboard \nASCllchMacteu 12,58,88 \nas input device 48, 58 \nMIDI files 7&-77 \nvirtual58 \nkibibyte {KIB) 4 \nkllobyte(KB)4 \nLAA (locally administered MAC \naddress)11 \nlaserprlnters68 \nIndex \nlatency83,84 \nLCO(llquld crystaldisplay)technology \n72,74,75 \nLCD/LEO monitors 51, 72- 74 \nLEO(llghtemlttlngdlode) \ntechnology72 \nlengthchecks 121 \nlibraries, barcodesystem 56 \nlibraryroutlnes114,117- 118 \nlightprojectors(LCOandDLP) \n66,74,75 \nlight sensor 62 \nLinux 42 \nlists, Importance In programming 163 \nlogic circuits \ndesigning 33-35, 38 \nInputs and outputs 2&-29 \noff-the-shelf components 29, 39--40 \nlntherealworld 38-42 \nwfetyfunctlon35---3S \nsimplifying 39,40-41 \ntruthtables29-38 \nlogicerror94 \nlogic gates 26, 27-29 \nloo,, \nstructures137 \ntypes 157 \nloudspeakers51,71 \nlow-level languages 91-92 \nM \nMAC(medlaaccesscontrol)addresses \n11- 12,23 \nmachlne code 13,92 \nmagnetlcfleldsensor 62,65 \nmagnetlcstoragesystems 83,84 \nmanufacturing.subtractive 69 \nMAR memory address register 47-48 \nmathematkalfunctlons.stanclard \nsolutlom 119 \nM04 hashing algorithm 106, 107 \nMOR memory data register 47-48 \nINDEX \nmebibyte(MiB) 4 \nmegabyte(MB) 4 \nmemory \ndevicesandmedia 81-88 \nprimary 81-83 \nrefreshing82 \nmemory cache 82 \nmemory cards 87 \nmemory dumps 9-10 \nmemory unit 47--48 \nmicrophones 51,59 \nmicroprocessors,embedded 43 \nMicrosoftAccess 171 \nMIDI (Musical Instrument Digital \nlnterface)files76-77 \nmobile devices \ncameras 58 \nflexible73 \nsecurityrisks113 \ntouchscreentechnologies61 \nmoisture/humidity sensor 62 \nmonitorin9,useofsensors 63-64 \nmotion sensor 62 \nmouse 51,58 \nmovies \nonDVDandBlu-ray 86 \nstreaming 86 \nMPEG-3 (MP3) and MPEG-4 (MP4) files \n77-78 \nMRl(magneticresonance \nimaging) 54 \nmultimedia files, MPEG-4 (MP4) \nformat 77 \nN \ndevicesandstoragesystems 86 \nMP3fileformat 77 \nstreaming 86 \nNANDtechnology 26,28 \nas'buildingblock'39-40 \ninsolid-statedevices84,87 \nnestedlF136 \nNIC(networkinterfacecard) 11 \nNOR chips 84 \nNOR gate 26,28 \nnormal data 119,169 \nNOT gate 26,27 \nmade up of NAND gates 39 \nnumber formats 80 \n0 \noff-linestorage84-88 \nOLED(organiclightemittingdiode) \n72-73 \nonlinebanking,security109-110 \nopticalcharacterrecognition(OCR) \n52,53 \noptical storage systems 85-86 \nOR gate 26,28 \nmadeupofNANDgates 39 \nOS(operatingsystem) 42-43 \noutput.statements 139,156 \noutput devices 48,51,67-75 \np \npadlocksymbol(https) 24,99, 103 \nparallel data transmission 15 \nparity,even and odd 17- 18 \nparitybit17 \nparity blocks 19 \nparitybyte19 \nparitycheck17-21,124 \npartitions,addressandcontents 47 \nPascal/Delphi146 \npasswords \nforanalarmsystem 64 \nauthentication107 \ncontrol102 \nforl5Paccount22 \nlengthcheck121 \nforpersonalbanking109-110 \nstrong98 \ntheft98,100 \nanduserid101 \nPCprogramcounter 47,48,49 \npendrives87 \nperceptualmusicshaping 77 \npetabyte(PB)4 \npH sensor 62 \npharming 99 \nphishing99 \nphotographic files \ncompression 78 \nwirelesstransfer 57 \nPIN,four<ligit109 \npiracy and copyright infringement, \npreventing86,87 \npitchbyte,in MIDI files 76 \npixels78,88-89 \nplagiarism 110 \nplaintext,unencrypted107 \npointing devices 51, 58--59 \nP05(pointofsale)terminal 56 \npre-releasematerial,writingand \ntesting algorithms 169 \npresencechecks121 \npressuresensor62 \nprimarykeyfield 170,171 \nPRINT,output statement 139 \nprinters51,67,68 \n3D 69-70 \nprivacyissues110 \nsee a/so security \nprocesssymbols 142 \nprocessor48 \nproductcodes,checkdigits122 \nprogramming languages \n90-92,146 \nprograms \ndefinition and uses 90-91 \nexamples 90,159 \ntesting160-161 \nprojectors see light projectors \nprotocols18 \nproxyservers102-103 \npseudocode114,117,126, \n139-141,169 \nassignment 134-135 \nconsistentpresentation134 \noperators134 \npublickeyencryption105-107 \nPython programming language 91, \n146-147 \nQ \ndeclaration of variables and \nconstants149-151 \ndisplay147 \nexample program 1S9, 160 \nIDE 95,147 \nlistsandarrays164,165,166,167 \nloops158 \nprogram testing 160-161 \nrepetition154-155,157,158 \nselection153 \nQBE(query-by-example) 173 \nQR(quickresponse) \nR \ncode57 \ncodereader51 \nRAM (random access memory) \n81-82,83 \nrangechecks121 \nrawbitmapimage,TIFForBMP 78 \nREADoperation 47 \nreal numbers 150 \nrecords,inadatabase169-170 \nregisters4-5,45,47 \nrelational database management \nsystem 171 \nREPEAT ... UNTIL loop structure \n137,138 \nrepetition157-158 \nprogram 154-156 \nrepetitivestraininjury(RS1)58 \nresolution78 \nROM (read only memory) 82, 83 \nrunning total 139,159 \ns \nsafetysystem,logiccircuit 35-38 \nsampling rate 71 \nscanners51 \n2D 51-52,53 \n3D 52 \nScratch programming language \n146-147 \ndeclarationofvariables90,149 \nIDE 90,148 \nscreenlvisualcheck124 \nScribus(DTP),freesoftware 111 \nsearching,libraryroutines118 \nsecurity \nanddataintegrity97-98 \ndenialofserviceattacks 108 \nprotocols103-104 \nrisks98--100 \nuseofpersonalquestions110 \nselection 153,157 \nsensors51,61--63 \nsequence,importance 157 \nsequencersoftware77 \nserialdatatransmission 14--15 \nsessioncaching104 \nshareware 112- 113 \nsimplexdatatransmission 14 \nSkype(freeware) 112 \nsoftware \nonCDsandDVDs 86 \ndevelopment 9--10,13 \nfault101 \nfree111- 112 \nsolenoid62 \nsolid-state storage \noffline84 \nrequirescarefulhandling87 \nsolution.effectiveness 131 \nsorting,libraryroutines 118 \nsource code \nediting98 \ninfreewareandshareware 112 \nSPECT(singlephotonemission \ncomputed tomography) 54 \nspeechrecognitionsystem5~0 \nspreadsheetfile,losslesscompression 80 \nspyware 100,110 \nSRAM (static RAM) 82 \nSSD(solid-statedrives) 84 \nSSL(securesocketslayer)103 \nstandardactions,inalgorithm \ndesign139 \nstatements.order 157 \nstatusbyte,inMIDlfiles 76 \nstepwiserefinement 116 \nstockcontrol,automatic 56 \nstorage \nmedia 81-88 \nsecondary83-84 \nstoragemedia,obsolescence 86-87 \nstreetlighting,control65 \nSTRINGtypevariableorconstant 150 \nstructurediagrams 114,116 \nsub-routines 114,117,118 \nsub-systems 114,115,116,119 \nsupermarkets,computerapplications \n55---56,139,159 \nsymmetricencryption 104--105 \nsynchronousdatatransmission 16 \nsyntaxerrors94,146 \nT \ntables,inadatabase169-170 \ntags, in HTML 10,23 \ntebibyte(TiB)4 \ntemperature sensor 62 \nterabyte(TB)4 \nterminatorsymbols 142 \ntestdata119--120,140,169 \ntext,ASCllformat 80 \ntext files \nfilecompression 80 \nformats 52,80 \nTIFF,rawbitmapimage 78 \ntimeout 21 \ntomography 53-54 \ntop-down design 114, 115--116 \ntotalling 154-155, 159 \ntouchpad,on laptop computers 58 \ntouchscreentechnology 51, 58,61 \ntracetables12S-127 \ntrackerball58--59 \ntranslator programs 92-94 \ntransportlayersecurity(TLS)103- 104 \ntruthtables26-29 \nforlogiccircuits29--38 \nTVs,'smart' 86 \ntypechecks121 \nu \nUAA (universally administered MAC \naddress)11 \nIndex \nuniformresourcelocatorseeURL \nuniversalserialbusseeUSB \nUNIX 42 \nURL(uniformresourcelocator) \nhexadecimal 13 \n1Paddress23 \nparts25 \nstored in QR code 57 \nUSB(universalserialbus) \ndata transmission method 15, 16, \n57,58,S9,88 \nflash memories 81,84,87 \nuser id/name 22,98,101,107 \nV \nvalidation \nofinput166 \nmethods 120--124 \ninMicrosoftAccess 173 \ntypesofchecks121 \nvariable \nasanindexinanarray165 \ninacomputerprogram 149 \nvelocitybyte,in MIDI files 76 \nverification124 \nVIN(vehicleidentificationnumber), \ncheckdigit122 \nviruses98 \nVisual Basic 146 \nvoicerecognition5~0,108 \nvonNeumannarchitecture 45-46 \nw \nwardriving 100 \nweb address see URL \nweb browser see browser \nWEP(wiredequivalentprivacy) \nencryption 100 \nWHILE ... DO ... ENDWHILE loop \nstructure137,138 \nWindows 42-43 \nwireless,passwordprotection 100 \nWRITE operation 47 \nX \nXOR gate 26,29"
  }
]